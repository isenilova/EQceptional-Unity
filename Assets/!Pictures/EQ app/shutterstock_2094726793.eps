%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: bkstr55.eps
%%Creator: Adobe Illustrator(R) 22.1
%%For: 
%%CreationDate: 12/22/2021
%%BoundingBox: 0 0 3700 1400
%%HiResBoundingBox: 0 0 3700 1400
%%CropBox: 0 0 3700 1400
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 22.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 22.1.0 x312 R agm 4.7767 ct 5.4352%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 48 8%%BeginData: 11670 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FDFCFFFD09FFAFFD0BFFAFFFFFFFAFFD17FFCFFFCFFD11FFAFFFAF
%FD11FFCFFD2FFF8B84AFA8AFA88B36613661366184AFA885602F2F592F59
%3561366185FFFFC9C1C8C1C8C7C8C1C8C2C2BCC3BCBDB7BDB7BDB7BDB7BD
%B7BDBDBCC3FFFF67131A146136613661366136613661366136613684C1C8
%C1C8C1C8C9FFFFAF36613684949B94BD94BDBCC3BCC3C4CBC4CAC4CAC4CA
%C4CAC4CACAFD0AFFA8FFFD05AF613661366185FFAFAFAF842727355A352F
%2E6036A9FFFFC9C7C7C8C8C8C2C3BDBDB7BDB7BDB7BDBDBDB7BDBDBDB7BD
%B7BDBCCAFFFF8B1A191A36613C6136613D847E613C6136613C6137A7C7C8
%C1C8C1CEFFFFA96136613C5221FD044BC3BCC3BCCACACBC4CBCACBC4CBCA
%CBC4FD0BFFBDB7C4A8AFA8AF8461366184AFA8AFAF7D52A82F613661362E
%202F84FFFFC9BBC3BCBDB7BDB7BDB7BDB7BDB7BDB7BDB7BDB7BDB7BDB7BD
%BCBCC3FFFFAF3C3C193C366136615A3DA1A1366136613661363D59C8C1C7
%C1C7C9FFFF8B366136619BBDB7BDB7BDBCC3BCBCBCCAC4CAC4CAC4CAC4CB
%C4CAC3FD0AFFBDBDB7BDA2AFA9AFA9AFA9FFAFAFAF7D52FFAF7D36612F52
%36592FAFFFFFC4BDB7BDB7BDBDBDB7BDBDBDB7BDBDBDB7BDBDBDB7BDBDBD
%B7C3BCCAFFFF8B676067608560613DA19BC3C385A1853C6136613D61C1C8
%C7C8C1CEFFFF603D60613C7EB6BD94BD9BC3BCC3BCC2BCCBCACBC4CBCACB
%C4CABCC3FD0AFFBD94BD94B7A2AF84AFA8AF84AFA9A82EAFAFA8528B2F2E
%3661352F85FFFFC4B6BDB7BDB6BDB7BDB6BDB7BDB6BDB7BDB6BDB6B7B6BD
%BDBDC3CACAFFFFAF3C61608BCFFFA8FFA8C4BDC3BCA1363D3661366136C8
%C1C8C1C7C8FFFF8A133D363D5A704B4B4570BCC2BCC3BCBCBCC4C4CAC4CA
%C3C3BCBCC3FD0AFF767070BDB7BDA8FFAFFFAFAFAFFF59A8FFFF52A8A852
%3D613D2F2FAFFFFFC4BDBDBDB7BDBDBDB7BDB7BDB7BDB7BDBDC4C3C4C4CB
%CAFFFFFFCAFFFFFFAF67608B60FFCFFFFFFFCBFFCAC3BDC3A1613C613D84
%C2C3BCC3BCCAFFFF601A1A613C85BDBEBDBEBDC3BCC3BCC3BCC3BCC3BCC3
%C2C3BCC3C2C9FD0AFF27275294BDBCCACFFFCFAF84AFAF7D52CA5259AF7D
%7DAF615A2EAFAFFFFFC4B6BDB7BDB6BDB7BDB7BDBDC4C3CACAFFCAFFFFFF
%CFFFCFFFCACACAFFFFAF60676067A8FFCACBCACBCACBCAC37D603661363D
%7EC2BCC2C2C2C9FFFF8B131A1461369BFD04709ABDBCC2C2C2BCC3BCBCBC
%BDBCC2C2C7C8FD0AFF709A94BDBCC3CAFD04FFAFA9FFFFA152A8FFFF7D7D
%847D52AFAFFFFFFFC4BDB7BEBDC4C3CACAFFCFFD07FFCFFFFFFFCFFFFFFF
%CAFFFFFF8567606760AFFFFFCFFFCACBCAFFAF6136613C613685C7C8C7C8
%C7CEFFFF601A191A3C61FD0470459AC2C8C7C8C7C8C1FD04C2C8C7C8C1C9
%FD0AFFBD94BDBCBCBCFFC9C9A8FFCAFFCAFFFFFFCFFFA8AF7D7D7DAFA8AF
%AFFFFFC4BCCAC3C9CFFFAEFFCFFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCFFF
%CAFFFFAF3C67606184FFCAFFCAFFCACBCAFF843D3661363D5AC2BCBD219A
%C3FFFF8B131A131A36BDB6BDB7BECAC8C1C7C1C8C1C7C1C8C1C7C1C7C1C9
%CAFD0AFFBDBDBDC3BCFFFFCFCAFFFFFFCFFFFFFFCFFD05FFAFAFAFFD05FF
%C3C3C3C2C2FD05FFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCAFFFFFFCB8B
%6067608BFFFFCFFFFFFFCAFFFFAF36613C613C61FD04C2C1C9FFFF601A19
%3C1A3CCACAC4CAFFFFC9C7C7C8C7C8C7C8C7C8C1C8C9FD0DFFBDB6BDBCCA
%CFFFC9C9CAFFCFFFCAFFCFFFCAFFCFFFA8FFA8FFCAFD04FFCABCBCBCCAFF
%FFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFF527DFD04FFA867606760FF
%CFFFCAFFCAFFCFFF843D366136613660C899C1C1A6FFFF67131A131AA8FF
%CFFFCFFFCAFFC8C7C1C8C1C7C1C8C1C8C9FFFFFFCAFD0AFFBDBDB6CAFFFF
%CFCFCAFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCAC3BCCAFD04
%FFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFCF52A87DFFFFFFCBCB84676067A8
%FFFFFFCFFFFFFFCFAF366136613C6136617DC34BA1FFFFAE663C8AAEFFFF
%FFCFFFAFFFFFFFC8C7C1C8C7C7C1CEFFFFCFFD0CFFAF6095BDA8FFCAFFC9
%C9CFFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFCAFFFFFFC3C9CFFFA8FFCA
%FFA8FFCAFFA8FFCAFFA8FFCAFFA8FFA1277D27FD04FFCACB60673C8BCAFF
%CAFFA8FFCAFF843D3661366136613661363D60FFFFFFCAFFCFFFCAFFA8FF
%A8FFCAFFA8FFC9C9C1C8C9CFA8FFCAFFA8FFCFFD0AFF1A3CA8FFFFFFCFFF
%FFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFD07FFCFFFFFFFCFFFFFFF
%CFFFFFFFCFFFFFFFCFFFFFFFA8FFA8FD04FFCBCAAF618B84FFFFFFCFFFFF
%FFCFAF366136613C6136613C61368BFD06FFCFFFAFAFCFFFFFFFCFFD0BFF
%CFFD0CFFAF1A1AFFCACBCAFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFF
%CFFFCFFFFFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFF
%CFFD05FFCACBC9C8C1C8C8FFCFFFCAFFCFFF843D3661366136613661363D
%84FFFFFFCAFFCAFFCAFFCFFFA8AFAEFFCAFFCFFFCAFFCFFFCAFFCFFFCAFF
%CFFD0AFF1A1AA8CBCACBCAFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFD
%07FFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFF7DA8FFFF
%CBCBCAC8C1C8C7C7C8FFFFFFCFFFFFFF36613C6136613C6136613685FD04
%FFCAFFCAFFCFFFFFFFAEFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFD0AFFAF
%1A35FD04CACBCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FD05FFCAFF
%A8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFCFFF527DA8FFFFFFCAC9
%C19F9FC89FC8A8FFCAFFA8FFCF85363D36613661363D366184FFFFFFCAFF
%A8FFCACACAFFCFFFCAFFCAFFA8FFCAFFA8FFCAFFA8FFCAFFCAFD0AFF84CB
%CACBC4CBC9CFFD04FFCFFFFFFFCFFFFFFFCFFFFFFFCFFD07FFCFFFFFFFCF
%FFFFFFCFFFFFFFCFFFFFFFCFFD04FFCF52A8FD06FFC9C79F9F759FC7FFFF
%FFCFFFFFFFCFAF60613661608584FD07FFCFFFFFFFCFFFCAFFCFFFFFFFCF
%FFFFFFCFFFFFFFCFFFFFFFCFFD0BFFCAC4CAC4CBC3C7C1C9CAFFCFFFCAFF
%CFFFCAFFCFFFCAFFCFFFCAFD05FFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFF
%CFFFCAFFFFA84BFFFFFFCFFFFFFFCFCFC1C79FC7C1C9CAFFCFFFCAFFCFFF
%CFFFA8FFA8FFCFFFCAFFCFFFFFFFCAFFCAFFCFFFCAFFCAFFCAFFCFFFCAFF
%CFFFCAFFCFFFCAFFCFFFCAFD0AFFCACAC4CBC9C7C1C8C1C9FD04FFCFFFFF
%FFCFFFFFFFCFFFFFFFCFFD07FFCFFFFFFFCFFFFFFFCFFFFFFFCFFD04FFA8
%52FD07FFCACAFFFFC8C8C8CEFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFF
%CFFFFFFF856185FFCFFFFFFFCAFFCAFFCFFFFFFFCFFFFFFFCFFFFFFFCFFD
%0DFFCBC4CBC2C7C1C7C1C8C1CFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFCA
%FFFFFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFFFA84BFFCFFFA8FFCF
%FFFFCABCFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFCA
%FFFF8B596036FFCAFFC9C8CAFFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCF
%FD0AFFCACBC9C8C7C8C7C8C7C7C9FFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCF
%FD07FFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFF52FFFFFFCFFD05FFC3C3FD
%08FFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFF8584C7843DFFC9C7
%C9FFFFFFCAFFFFFFCFFFFFFFCFFFFFFFCFFD0DFFCBC2C7C1C8C1C7C1C7C1
%CFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCFFFFFFFCAFFCFFFCAFFCFFFCA
%FFCFFFCAFFCFFFCAFF767DFFFFCFFFCAFD04FFCAC3FFCAFFCFFFCAFFCFFF
%CAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFFFAF36A7C1847DC7C1FFFFFF
%CFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFD0AFFC9C7C7C8C1C8C1C7C1CF
%FFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFD07FFCFFFFFFFCFFFFFFFCFFFFFFF
%CFFFFFFFA87DFFFFCFFFFFFF7DA8FFFFCAFFFFFFA8AFAFFFCFFFFFFFCFFF
%FFFFCFFFFFFFCFFFFFFFCFFD05FFA9617DC8C7C8C1C8C9CFCAFFFFFFCAFF
%FFFFCFFFFFFFCFFFFFFFCFFD0BFFC8C1C8C1C7C1C9C9FFA8FFCAFFA8FFCA
%FFA8FFCAFFA8FFCAFFA8FD05FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFFF
%7D7DFFCAFFCFCF527DA8FFFFFF84AFA8AF84AFA8FFCAFFCAFFA8FFCAFFA8
%FFCAFFA8FFCAFFA8FFCFFFFFCFC1C8C1C8C1C7C1C7C1C8C9FFCACAA8FFCA
%FFA8FFCAFFA8FFCAFFCAFD0AFFC8C7C7C9CAFD07FFCFFFFFFFCFFFFFFFCF
%FFFFFFCFFD07FFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFF52FD05FF52CACA
%FFFFFFFD08AFFD04FFCFFFFFFFCFFFFFFFCFFFFFFFCFFD05FFA8C8C7C8C7
%C8C1C8CAFD05FFCAFFFFFFCFFFFFFFCFFFFFFFCFFD0BFFC8C8FFFFFFCAFF
%CFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFD05FFCFFFCAFFCFFFCAFF
%CFFFCAFFCFFFCAFFA17DFFFFCFFF7CA1CACACAFFFFFF84AFA8AFA8AFA8FF
%CAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFFFCF9FA6A0C8C1C8C1C9
%FFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFD0AFFCAFD05FFCFFFFFFF
%CFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFAFAFAFFFCFFFFFFFCFFF
%FFFFCFFD04FFA87DFFCFFFFF7DA8CBCAFFFFFFAFAFA9AFAFAFA9FFFFFFCF
%FFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFF855B3737A0C83DA8C1CEFF
%FFCFFFCAFFCFFFFFFFCFFFFFFFCFFD0CFFAFFFCAFFA8FFCAFFA8FFCAFFA8
%FFCAFFA8FFCAFFA8FFCFFFA8FFCAFFCAFFFFAF84AFA8AFA8FFCAFFCAFFCA
%FFA8FFCAFF7D7DFFFFCAFF76CACACBCAFFFFCAA2AFA8AFA8AFCAFFCAFFA8
%FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFCAFFFFA9303736A1C13D85CFC9FFCA
%FFA8FFCAFFA8FFCFFFA8FFCAFFA8FFCFFD0AFFAFFFCFFFFFFFCFFFFFFFCF
%FFFFFFCFFFFFFFCFFFCFFFCAFFFFFFCFFFFFFFFD07AFFFAFFFFFFFCFFD05
%FF52A8FFFFFF7DCAFF76A8FFFFC4BD4C84AFAFFD04FFCFFFFFFFCFFFFFFF
%CFFFFFFFCFFFFFFFCFFFFFFF855B36377EC93CAFFD04FFCFFFCAFFCAFFCA
%FFCFFFFFFFCFFD0DFFAFA8AFA8FFCFFFCAFFCFFFCAFFCFFFCAFFFD09CAFF
%CFFFFFAF84AFA8AFA8AFA8AFA8AFA8FFCAFFCFFFCFCF527D7DA8525276A1
%CAFFFFC4B6B7A1AFA8FFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFF
%CAFFFFA9305B365A7D61A8FFCAFFCFFFCAFFCAFFCAFFCAFFCAFFCFFFCAFF
%CFFD0AFFCAAFAFAFA9AFAFFFAEFFFFFFCFFFCACBCACBCACBCAFFCACACACB
%CAFFFFFFAFAFA9AFAFAFA9AFAFAFA9AFAFFFAEFD05FFA77D7DA14BCACBFF
%FFFFA19494C484AFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFD05FF
%A937365B36615AFFFFFFCFFFCAFFCAFFFFFFCFFFFFFFCAFFCFFFCFFD0BFF
%CAA8AFA8AF84AF84AFA8FFCACBFD09CACBFD04CACFFFFF8459AFAFAFA8AF
%84AFA8AF84AFA8AF84AFA8FFCAFFFFFFCACA4BA1CAFFFFC49494B77DA8FF
%CAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFCAFFCAFFFFA93037305B3661
%CAFFCAFFCAFFCFFFCAFFCAFFA8FFCAFFA8FFCAFFA8FD0AFFCAFFFD08AFA7
%C8CAFFCACBCAFFCACBCACBCAFFCAFFCAFFFFFFA87D527D84AFAFFFFD0BAF
%FFAFFFFFFFCACA76A8FFFFA194BD9BAFAFAFFFCFFFFFFFCFFFFFFFCFFFFF
%FFCFFFCACBCACBCAFFFFFFA937365B366160FFFFFFCAFFFFFFCAFFFFFFCF
%FFFFFFCFFFFFFFCAFD0BFFA8A8AFAEAFA8AFAFAEC2C7C1C8CACBCACACAFF
%CAFFCAFFCACACACBCBFFFFAFAFAF7D7D527D84AFAFAFA8AFA8AFA8AFA8AF
%A8AFA8AFA8CBCACACAFFFFA169BD76AFA8AFA8FFA8FFCFFFCAFFCFFFCAFF
%FD09CAFFFFA93637365B3685CAFFCFFFCAFFCAFFCAFFCFFFCAFFCFFFCAFF
%CFFFCAFD0AFF1A61608585AFAFCEC7C7C1C8C7C9CACBCACBCACBCACBCACB
%CACAC9FFFFFF846161AFAFAF7D595284A8FFFD04AFA9AFAFAFA9AFAFAF84
%8584FFFFFFC4BDB6CAAFAFA9AFAFAF60673C663C66A8CBCACBCACBCACBCA
%CBCAFFFFFF855B365B366160FFCFFFFFFFCAFFFFFFCFFFFFFFAEFFFFFFCF
%FD0CFFAE61363D363D5AC3C1C7C1C7C1C7C1FD0ACAC9C1C7C9FFFF85365B
%366160AFAFA85952527E84AFAFAF84AFA8AF84AFA8AF843D84FFFFCA6970
%A8AFA8AF8460131A131A131A131A60CAC4FD08CAFFFFA93037365B363D84
%FFCAFFCAFFA8FFCAFFA8AFA8AF84AFA8FFCAFFCFFD0AFF61613C617EBDB7
%BDC2C8C7C8C7C8C8FFCBCBCAFFCACBCAC9C7C8C1CFFFFF85615B61366160
%8585FFAFA8597D5984A9FFFD07AFFF85AFFFFFC4B7A8AFAFFFAF3CFD0A1A
%60CBCACBCACBCACBCAFFFFFF855B365B36613C6184FFFFFFCFFFFFFFAFFF
%AFFFAFFFAFAFAFFD0DFF61363D77BDB7BDB7BDC2C7C1C8C1C7C1CACACBCA
%CAC9C7C1C8C1C7C9FFFF85366136613661365B368585AFAEA859525284A8
%AFAFAFA8AFA8AFAFFFFFCAA2AFA8FF841A131A191A131A191A131A191A13
%1A3B3C133C193C60FFFFA9305B365B3661363D368584AF84855A615A615A
%5B5A858485A8FFCFFD0AFF60619BB7B7BDB7BDB7BDC1C7C1C8C1C7C1C8C8
%C8C1C7C1C7C1C8C1CFFFFF853736613C613661366136375A8585AFAFA853
%59528484AFAFAFA8FFFFFFFD04AF841A191A131A191A131A191A131A191A
%131A191A131A1360FFFF85373637365B3661363D363D3637303736373037
%36373037365B84FD0BFFAFA2CAC4CAC4CAC4CAC4CAC9C9C9CFC9C9C9CEC9
%C9C9CFC9CAC9CFCAFFFFAF84A984AF848584AF84A984A9848584FFAFFFAF
%A87D84A8FFAFFFA8FFFFFFA8FFFF8B3C673C663C673C663C673C663C673C
%663C673C663C4384FFFFFF848584A984A98485848584A9848584A9848584
%A9848584A9848584FDFCFFFDFCFFFD0CFFFF
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c143 79.161356, 2017/09/07-01:11:22        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Basic RGB</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:CreatorTool>Adobe Illustrator CC 22.1 (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2021-12-22T13:27:42+02:00</xmp:CreateDate>
         <xmp:ModifyDate>2021-12-22T13:27:42+02:00</xmp:ModifyDate>
         <xmp:MetadataDate>2021-12-22T13:27:42+02:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>100</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEBLAEsAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABLAAAAAEA&#xA;AQEsAAAAAQAB/+ICQElDQ19QUk9GSUxFAAEBAAACMEFEQkUCEAAAbW50clJHQiBYWVogB88ABgAD&#xA;AAAAAAAAYWNzcEFQUEwAAAAAbm9uZQAAAAAAAAAAAAAAAAAAAAAAAPbWAAEAAAAA0y1BREJFAAAA&#xA;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKY3BydAAAAPwAAAAy&#xA;ZGVzYwAAATAAAABrd3RwdAAAAZwAAAAUYmtwdAAAAbAAAAAUclRSQwAAAcQAAAAOZ1RSQwAAAdQA&#xA;AAAOYlRSQwAAAeQAAAAOclhZWgAAAfQAAAAUZ1hZWgAAAggAAAAUYlhZWgAAAhwAAAAUdGV4dAAA&#xA;AABDb3B5cmlnaHQgMTk5OSBBZG9iZSBTeXN0ZW1zIEluY29ycG9yYXRlZAAAAGRlc2MAAAAAAAAA&#xA;EUFkb2JlIFJHQiAoMTk5OCkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#xA;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAADzUQABAAAA&#xA;ARbMWFlaIAAAAAAAAAAAAAAAAAAAAABjdXJ2AAAAAAAAAAECMwAAY3VydgAAAAAAAAABAjMAAGN1&#xA;cnYAAAAAAAAAAQIzAABYWVogAAAAAAAAnBgAAE+lAAAE/FhZWiAAAAAAAAA0jQAAoCwAAA+VWFla&#xA;IAAAAAAAACYxAAAQLwAAvpz/7gAOQWRvYmUAZMAAAAAB/9sAhAAGBAQEBQQGBQUGCQYFBgkLCAYG&#xA;CAsMCgoLCgoMEAwMDAwMDBAMDg8QDw4MExMUFBMTHBsbGxwfHx8fHx8fHx8fAQcHBw0MDRgQEBga&#xA;FREVGh8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx//wAAR&#xA;CABkAQADAREAAhEBAxEB/8QBogAAAAcBAQEBAQAAAAAAAAAABAUDAgYBAAcICQoLAQACAgMBAQEB&#xA;AQAAAAAAAAABAAIDBAUGBwgJCgsQAAIBAwMCBAIGBwMEAgYCcwECAxEEAAUhEjFBUQYTYSJxgRQy&#xA;kaEHFbFCI8FS0eEzFmLwJHKC8SVDNFOSorJjc8I1RCeTo7M2F1RkdMPS4ggmgwkKGBmElEVGpLRW&#xA;01UoGvLj88TU5PRldYWVpbXF1eX1ZnaGlqa2xtbm9jdHV2d3h5ent8fX5/c4SFhoeIiYqLjI2Oj4&#xA;KTlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+hEAAgIBAgMFBQQFBgQIAwNtAQACEQMEIRIxQQVR&#xA;E2EiBnGBkTKhsfAUwdHhI0IVUmJy8TMkNEOCFpJTJaJjssIHc9I14kSDF1STCAkKGBkmNkUaJ2R0&#xA;VTfyo7PDKCnT4/OElKS0xNTk9GV1hZWltcXV5fVGVmZ2hpamtsbW5vZHV2d3h5ent8fX5/c4SFho&#xA;eIiYqLjI2Oj4OUlZaXmJmam5ydnp+So6SlpqeoqaqrrK2ur6/9oADAMBAAIRAxEAPwD1TiqHbULR&#xA;Z3hZyJEoWBVqbio+KlDkuA1bUc0QaJ3ak1OxjRnaX4VFTQMdh7AVwiBKnPAC7S3/ABr5W/6uCf8A&#xA;Av8A805f+Sy/zXG/lLB/OCItPM2h3jFbW5EpX7XFHoK+J40GQnp5x5imzHrcU/pN/ND6x518s6Nb&#xA;yXGp3otYIhyeR45aBQaFtlOwrue2RGCZF1sy/NY+IRvcqbefvJ6mjapCpO4B5A7/AEZZ+UydzWO0&#xA;MP8AO+9U/wAa+Vv+rgn/AAL/APNOH8ll/msf5Swfzgm31q3+qi65j6uUEgk3pxIrX7sw8shjBMtg&#xA;ObnYxx1w72g/8RaL/wAtS/c39MwP5W0388fb+py/yOb+a7/EWi/8tS/c39Mf5W0388fb+pfyOb+a&#xA;py+afL8QrLexoPFqj9Yy3Hr8M/pPF7gT+hlHs7PLlElCHz/5PBodSj28FkP6lzMG4b/5G1X8w/Z+&#xA;t3/KwPJ//VyT/gJP+acNL/Iur/mH7P1u/wCVgeT/APq5J/wEn/NONL/Iur/mH7P1o7S/MmiapKYr&#xA;C6WeRVLlQrD4QQK/EB3IyHGLrq42o0GbCLnGh8FLWPN3l7RrlbbUrsW87oJFQpI1UJK1qisOqnMj&#xA;HgnMWA6LWdr6bTT4MsuGRF8pHb4A9yhF568pyxiRNQUq3QlJB026Fcs/JZf5q4u19NkjxRnsfI/q&#xA;X/418rf9XBP+Bf8A5px/JZf5rZ/KWD+cHf418rf9XBP+Bf8A5px/JZf5q/ylg/nB3+NfK3/VwT/g&#xA;X/5px/JZf5q/ylg/nBWh81eX51LRXiuAaGgbr92a/V54aYgZTwk8nP0o/MAnF6gFT/EWi/8ALUv3&#xA;N/TMT+VtN/PH2/qcr8jm/moz61b/AFU3XMfVwhkMm9OIFa/dmfikMgBjuDycTIOC+Lakp/xr5X7X&#xA;6H24v/zTmWdHlH8Lhw1+GRAEhZUv+VgeT/8Aq5J/wEn/ADTmPT0H8i6v+Yfs/Wvj88+VJBVNQQgb&#xA;V4yf805XPII82J7I1I5wP2frRNt5n0K65ehdrJwpyorClenUe2GExLk05Oz80PqjXyV/0zpn+/x9&#xA;zf0ydFr/ACuTud+mdM/3+Pub+mNFfyuTuVINRsriT04ZQ70rQA9vmMaYTwTiLIROBqdiry7zp5x1&#xA;LSfN09rG0csHCNlt3ArTgvIqRRurZZEvT6DsLT6rTCUrGQ3uD3Hu5JxoHmSx1mEmGsdxGAZYG6j3&#xA;B7j3ywG3mu1ex8ujl6vVA8pfr7ik155Inl1B3gmjjtJG5UNeS13ICgUNO2+bOGuAjuN3kcnZpM7B&#xA;HCybTtPtrC1W2t1oi7lj1Zu7N75gZMhmbLs8WKOOPCGHT2lz+YMc4e4ez8nK7RW5tyFuNQK1R5fV&#xA;IJit+VQnD4n68gpoa4yN+X3uROIA3Hq+79rzLTtG8raV5Ytpr6xtnhdOKyvAkj3FWKJT4S0rSAUH&#xA;WubXAMXhCRA+X43dPq55zqDGMpfMgD9QQa2WvWM0NxYk6NpV5NHbtp3JZ5IxJ8KSor84oW5UBjWq&#xA;0364OGcaI9MSarn8e4e5PiYpgiX7ycQTxcga6bbn3l9LzytaeRfUZmnaDTlJZuIZysQ3PEBQT7Cm&#xA;aHW4fEE4X9Vi3ruyo8c8Q5XwvJJvNd620USRjxNWP8P1ZpsXs7hj9RlL7B+Pi+iw7NgOZJQE2san&#xA;Ns9w4Hgp4j/haZssXZunx/TAff8Ae5MNLjjyCDZmYlmJJPUnc5mgN4FNYpdirsVel/lhazx6tI5j&#xA;cQ/VGVZCpCk84+/TNfhB8WR9/wB7yPtBkBxAWL4/0FEfmXpEGo38CseEqQL6cg3pV2qCO4zfaKVR&#xA;PvfHfabSjLlj0Ij+ksT07ylrz2rejAJ1iYrWNlrQ/FWjEHvmw/N440JGnB7N7PzyxGhfCenzbm8v&#xA;6xArNPZzRgdG9Niv/BDbKs/aMIUR6gTvXMfB33Z/YOXUGcSeCcY3GxtLy4uh7u/4IR4uRABAp8J7&#xA;dKb/AE5r9H2rGpmZJPF6R136B6Htf2VyE4RiEYgY6nLlEGPOUj535nbyUc34eBkKNc0x0OUpdmOu&#xA;0ikU9xv/AFzmPa7TxnozM84EH5mv0vS+ymoMNXwdJgj5b/oKfZ5W+ms1nkMXkueUCpSwkYD5RE56&#xA;P2R/d4vdF4vtnJwQzS/mxmfkC8ZikWSNXX7LdM7QF89xZBOIkOReearpH5a2Woz295PHb3CNV4Xv&#xA;rhGXmOQ+H1RTYg5zGXGIzIPe+46D+TsuCEyaMogn1S51uOfeyHyOvlVI7yPQJ0mAMbXHC4e4pUMF&#xA;rzdyvQ5rNbW1O200NPG/BN9+5P3s10nUDZXQc7xP8Mq+3j9GUYMvBK+jLU4PEjXVmEUscsayRsHR&#xA;tww6ZuIyBFh0MomJo823kSNC7sEQdWY0A+/EkDcqASaC7ytrUNz5hS2txyj9Ny0h2rQdAMxhqBKX&#xA;CGPaOlMMBlLnYZ3lzzbsVfMv5xWnmOT80NbkRi9l9Rg/R0VU4iTjEZDIpR3dCEIMa0LGnxDHd6Ls&#xA;zFqzAHGRwb8/fvtzZX5BtLkeYLJid35CRVqAV4EtXrttXKZ6mpcId925wT00oy35fO3rklpCykIK&#xA;MOm/f3yyOY2+eT00SNtkr1LSbu/0y9so3NtJcwSwpcfyNIhUMPkTXLpZBTi4sEuLcMRttO8/Xeg2&#xA;fli30dPLkcFvHZ3mtG6hmVYo0EbGxihq5ZlHwNKI+HXiemVDKXLlp43fVKvNOk+XtN1/SbfVwdP0&#xA;LTNNaDRZwjGCG5RgjK7AEBvQVRHy6jnTfMvFm4JA9HXZsHiwlH+Infv/ALLQWl+VJvMmrwTBp4fL&#xA;dg/rLczQtbyXk61CCKOX41iSvLmwHJuPGoqcy8muM6ocnBxdnDGDcrMhXuHX4l6z5kjSHyVfRrXh&#xA;HZMq9zQR0HTNZI3K3rOyBWbF5GLxW00TWLtFe3spnjf7MnBgp7faIAx4x3vpGTWYofVID4pzbflz&#xA;5rm+1bJAD3lkT9Slj+GDxA4GTt3Sx/iv3AptbflLqLU+s38MXj6atJ/xL08j4rg5PaXGPpgT79v1&#xA;prbflPo6UNzeTzHwThGPxDn8cHilwsntLlP0xiPmf1Jtbfl95Tg3+p+qw/ald2/CoX8Mjxlwcnbe&#xA;ql/FXuATa20TRrWn1exgiI7pGgP30rkbLhZNXmn9U5H4lWsoTHqUhp8LoWB/2Qrk4sMs7xj3sc86&#xA;/wDHVi/4wL/xN82el+n4vFduf3w/q/pLflCalxcQV+2gcf7E0/42yrXR2Bb/AGfyVOUe8X8v7U7v&#xA;PXA4GTny/wB1hd8w4U9li4edJDqegW+pqQoWO7ofSloNzTZW8QcZ4wTYPCR1HNzfzJhAgxE4EbxP&#xA;I/f9zzy4LCRkZAjISrLQAgjYg0A6Z0mlwmEd5Gd975p2nrY55+nFDCBe0f0/2BW01Wa4IVxG3E8Z&#xA;DvTceP3ZrfaI1pJbcW4279/wXaeyJj+dFx4vTL4ef6Pii5ntYp4YLrVlSe4JW3hLqjOVUswUFt6K&#xA;K550Mp6YPs/46+reKBQEeb0eYKvkC4CtzUabLR61r+5beudj2dImOMkVy2fP/aI/utR/Vn9xeG6f&#xA;dCJzG5pG3Q+Bzqscuj5LodTwS4T9J+9Aa7f65BqDJZ6UL2Eqp9b6xHFvShXiwrtTNLrdspp+ifZP&#xA;U5z2diqHEBxAHiAv1H7uXwRflOfX7+9lgudINnGI+fr+vHKAQwFCFApWvXNL2jMQx8UuQd/k1E/8&#xA;pHgH9YG2ZLoXwjlNRu9F2/XnMS7X32jt73EOs8ln6P1O3JFtKeLdSj8OnjuMy8PauM9TFl4+OX1D&#xA;7LaOn6pcMBcOaDo0j8/uoThy9qY+8yT4+OP0j5BlfkfTorbVQygs3BuUhHt+GR7L1c82o7ogF0va&#xA;+czxb97P86p5h2KvFvzJFfOtwOtVhFP9guE3wmn0DsE/4IP8772a+SfLTafAb66Wl3OtEQ9Y4zvv&#xA;/lN3zAw463PN57tfX+LLgj9I+0p9YqitccVjWsrFvTblUnu3gfbK9KADKhH6jyN/PuPk6zMSeHny&#xA;6ovMtodiqhParKeQPFvHxy2GThaMuAT36rYrJENXPM9h2wyzE8mOPSgbndV1m1kutEu7aKnqSwOi&#xA;A9KldhkMguJHk5ukyCGaMjyEg8u8v6Pfaxew2spYWdmT6vLoilqsoH8zH/PbNbjgZGugey1uqhgg&#xA;ZD65cvP+x6rme8U7FDsVdiqUeavNOkeVtEl1rV5GjsYZIYpGRebcriZIUoo6/FIK+2EBVLyXrOo3&#xA;82sWmqvaDU9Mv54Gt7RyxjtXYS2frVJo727ox/UDUZOPNjI7O832nrOsij95FHUe61NRmZp8lGuh&#xA;db2poPGwccR64faOv6/7Ui8vz+lq0BPRyUP+yFB+OZOpjcC832Vk4NRHz2+bOKCtab+Oad7m1GO1&#xA;RQ4YAgvyX2yRk2Syk1TyLzDw/TuocBRfrEv38zX8c6rS/wB1H+qHz3XV406/nH70DGwVwWXkv7S1&#xA;pUfMZHV6YZsZgdr693m2dm6+ekzxyw5x+0dQs1SXS45ZNQk0j67HpkP1nThE5a4a4KSLLGIiafY4&#xA;hTvUnOAy9kdoQPDd2eYjYroeT6ng7f0+eHiHJCJiLqREZXRsUf7HrenW7XP5dpBaxSB7jTWEMMpB&#xA;k5SwmisSetWp1zdaQShw8f1Crea7XBzY8oh6jOMq352DW7yay8gebLqf0hYPAA1HlmIRBvSu5qw/&#xA;1Qc3ctXjiLt8vwdgazJKhjI85bD7efwt6ba/l55YSxt7e5tRcTQoFe45PGzt1LHgw79K9Btmly5z&#xA;ORl3vr3ZGoz6HTxwY5nhiPI+Z53W/RNLPStJis5rG1tVt4D8LhFAJPYk7kke+Y+pwDJAxlykGX8o&#xA;ZMuTikSZR72Lahp1xZTGOVfhP2JB9lh/n2zg9Xo54JVLl0Pe9DgzxyCwh0R3YKilmOwUCpP0DMaM&#xA;TI0BZbSQNyn2meWXakt98K9RCDuf9Y9s3+i7EJ9WXYd363WajtADaHzZNZwxQ0jiQIgGyqKDOmw4&#xA;4wFRFB1GSZluTaKzIaXYq8m1mC3n/NuSK4/uiEcg9C0dqHSv+yGbCQ/we/xzeU0Wuz4e3JQxzMY5&#xA;KEgOUh4e1j7uo6M+t9TFAsw36cx/EZqiHu56fqEckcaFiihS55NQUqT3OVxgI3Qq3GMiea7JMXYq&#xA;7FXYqiD/AHX0ZaeTX1QcUEEPP0o1T1GLvxAFWbqx98qApvlOUuZulTFg7FXYq7FUs8xeW9E8x6W+&#xA;la1ai8sJHileBmdAXhkWWM8kKts6A9d+h2wqh9CTyhYeaNVsdM9NNe1IDUtWjjLu5KhIVeU/EsdV&#xA;pxXbluQD8RyUWMkbrRC3CsdgIwSfkTlpkIgk8g5ukFx+LDi8KXfrQghVcPGNhShr4ZoM3tWeUIXH&#xA;vJ5uDH2Sx+IZ8ZG9gADb8fBmemanDfwmRAVZTR0PY5l6LWx1EbGxHMOXqNOcRoozMxx3j3ma3kg1&#xA;+/SQULTPIvush5j8DnV6SQlijXc8J2hAxzzB/nE/PdLMyXDdir2ry3UeWtPIFT9WTb/Y5zGq/vJe&#xA;8vc6D+5h7gq+uB9tGT3IqP8Aha5h07Lg7i4JHJIsytWgoKHbJcRApoli9XEebaNKZHDKAo+yfHEg&#xA;VsiJlZsbLnRHUq6hlPUEVGVyiCKO4bQSOS2K3t4a+lEkdevBQv6shjwwh9IA9wZSySlzJKpljBfD&#xA;9vJR5olyRGWtbsVYTrOl2kXmS71ALW6nEYLn9kLGq0Xwrx3y/wAQmIj0Dk9m9l4YZJairy5Op6AC&#xA;qHdy3UJb94QADybsp6fTmj7U7Tjpxwx3yH7Pe7yOEST3SNdjvm9GRfTuAKgD7LU60/pmP2f2oM54&#xA;SKn9hdbqtGce43imubZwXYq7FXYqiD/dfRlp5NfVD5U2OxV2KuxV2KsP1XW9X17Vbny75alNrDaN&#xA;6et+YQoYW7GhNraqw4yXJU/Ex+GLvVvhwpZF5Z8vaToNp9T02D0kJLzSsS800rfalmlarySN3ZjX&#xA;JR5sZKuqG1upZdOLgXJg9RVPUKxZQw+kb5Tqo8cZQuuKLkafigBkr08VPNNZ8r351ITRO9pO0bW9&#xA;y4DsWidkJMRDKqNSOgYDate2cTKE8VwnHkbH4rcO+jOM/UCzbyfpl3Zaf/pUjyyuEUyyhVd+APxs&#xA;qBFBYnoFGdB2NppQjKUhw8fIeQ/tdV2hlEiADdJ9m5delGu+WNN1lVNwDHOgok8dA1PA16jMrTau&#xA;eLly7nC1nZ+PP9W0u8MeH5Yx86nUSU/lEQB+/n/DM/8Alc/zft/Y6oez4v6/s/am1h5E0C1o0kbX&#xA;TjvMaj/gRRfvzFy9pZZcjXuc7D2PghzHEfNkpMFpYFgojggiJ4IKAKi1oAPYZQLkfMuaeGA7gEDp&#xA;2radqURlsp1mUfaA2ZfmpoRkMuCeM1IUnBqceUXA2rSRoKyA+mwFS42H09sqMqFnk5UZHlzbil5H&#xA;i1A9Kgjow8Rjz3CJRrcKmLB2KuxVfD9vJR5olyRGWtbsVYf5mnEepSAbuQtB/sRmr7T7UGnjwx3y&#xA;H7PN33Z8LxhICSSSTUnqc4eczImUjZLswEw0G3ml1KFoweMZ5SN2A/t6Zn9lYpSzxMem5cTWzAxm&#xA;+rNM7Z552KuxV2Kog/3X0ZaeTX1Q+VNjsVdirsVYz5z1TUR9T8v6NJ6Wta0zpHcihNraxUNzd0PU&#xA;xq6qn/FjL2rhCU40XRtO0XS7fS9Oi9K0tl4xrUsxJNWd2O7O7EszHck1OKEZBeWn136n68f1v0zL&#xA;9X5L6npggF+FeXGrAVyUObGXJKbyxnk85xXu629vYhWfsWeSQBfu3yqcScl+TsceeMdGYHmZ/oCZ&#xA;m6gBpzH0b5b4cu51ZzwHVUBBFRuD0ORbQbbwK7FXYq7FVuqf8cW8/wCYeX/iBzKwfVH3hxdT9Evc&#xA;fueVaa8/pRXti/oX9v8AByGwcKNlYe48cx9d2gdFqjjzerT5fUO+JPOvK966Xt54uh0X5zTRy4fT&#xA;qMXpPdIDlfw2vy38pZ+lptVntrecpbQfCZ15bMQKkVPauwGcvqNdHU5xjB4cN9drHn+p6vBp5YsX&#xA;FIXkrp0PkyeRA6AqaMN0b3zpgXVxNHddG/NA3Q9x4EdRhRIUV2Bi7FV8P28lHmiXJEZa1uxVies6&#xA;Rd32tymMcYgE5St0+yOnjnK6/s/Jn1Uq2jtv8Hd6XVRx4RfPfZGWnlvToQDIpnfuX6f8CP45m4Ox&#xA;sMPqHEfP9Tj5Nfkly2CZRxRRLwiRUUdFUAD8M2kMcYioig4cpGRsm1+SYuxV2KuxVEOQsBJ2AXc5&#xA;dVhrJrcoZWVhVSCPEZURTMSB5N4EuxV2KsT8sKuoebvNGsSHk1tPFo1n34Q20KTyU8C89y/LxCr4&#xA;YUonztrOoWNnZ2GlOItX1m5FnZ3DKHWBQjzT3BU7N6UMTlQdi/EHriExjZp3kvy3o2j3MpsrcC5l&#xA;jJub6U+pdTsWWrzzt8cjGnc+woABlkW/UQEYADvTnVifrCiu3AbfScvx8nSak+pA5Y46Z2ylYEB6&#xA;9fv3zDyG5O1wCoBVyttdirsVdirWovw0i6fkF4wSHkRUCiHegywx4o1V2OXK/j0YcXCbuqeXW+t6&#xA;fczJbpciWdhsAGANBU0rt26VzkNZ2BrccJZZ45Rxx75RJH27/J3en7X02SYxxmDM9wP4+1MLN7N7&#xA;wQzueK09UJ9pQwBB3HTcZhQ0MoiGTLEjDP8AiDkHVwlKWOBHiw5x+39LOLHT7O1QG2Bowry5FgQe&#xA;/WmddpdJixD0feXTZs85n1KqfDM69mo4/Uf1ZlsDvEFVwNbsVXw/byUeaJckRlrW7FUuuLxUu3jb&#xA;dRTcdqgHE47FhhLKYH1D0nkuWeFujj5dD+OVmBHRsjlieRVMg2OJpucUoaW/tk25cz4Lv+OGm2OC&#xA;RUf0oSTwiJpud+33YabPy3eVS31COVgjDgx6dxgIYTwGItMLn/eOT/UP6svh0cDL9JSNWZTVSQfb&#xA;LyLdcJEckRHfSrswDD7jlUsI6OTDVSHPdER3kLdTxPvlUsRDkw1MT5KwIIqNxlbeCwySe88pa/ql&#xA;1NZT3flvWZVvXubOJ7iWzuhEkMqywRh5WikWJXDop4ty5AChxSx3zp+ZPk8anoOpW16bqKxuZYb+&#xA;OGCd5YkuoGRH4BOX98qJTr8WEBtwmpWy3yXqmu6jq0s02mnTdIEDCEXTD65LJzSjmJCyRRheWzNz&#xA;NRstN5xbNUTw/FI/zO82a1pGvNb6S0T3J05ZI7e4B9ISvJMsbtx+KnJN6eGWxLsezuycOs00gf72&#xA;Mtj8BV+V2yfQ5nvbKymmKNJNEkkpiqIyxUFuPLelelcnKVRt5SWmMMxxy5xNfJPswnYOxV2KuxV2&#xA;KqWtf8cC/wD+YWb/AJNnMvTfXH3hxtR9EvcXztbTtBcRzLWsbBtuuxzsdVgGbFLGeUokfN5bR5/B&#xA;zQyfzZAvVPJcUV1r+oXIpJCsCR+IPPj4/wDGM5xcNOcWgx4cg33sfE/rd/iyxy6/LmgbjQo/AfqZ&#xA;qiQ20IRRwjX7K7nqa0GYmPGIDhjydsSZm+qznM06lU4/CftfMeGWM6Ajz6qnKcdUVh/kmh/EfxxY&#xA;VHvbSVGPHcOOqnY4qYEK0P28MebXLkiMta3Yqxq/v7Ea1dW5uIxOoj5RF1Diq1+zWvQ5fjxyq62a&#xA;NXqsJhHGJR8SJNi9x8F2ScFD3OqpZbKxMnaMH9eajtHtTFgFH1T7v19ztNBoMuU2PTDv/V3rIdVk&#xA;vkPM8WX7UY6fPKOztfHUR7pDmHey0wxnZVSMvy3A4qW370zYsCaVuUvwt8MazDhUdKA0NcWFDlzp&#xA;Q+y2x6HYjFs5pzrAaXQLql09iz27UvIwheIlftqJFdDx/wApSMuhEkgB0eciIkTyDAotS87abGHm&#xA;trfzNYAV+t6cy213T3t5WMEhp1KTL7JlxEo7F18TCYsGvtCYaT5z8u6nc/Uobn6vqQFW027R7W7F&#xA;Op9CYI7D/KUFffAJBZYyN+id5JguSR0NVYj5YDEHmyjMjkVdL6QfaAYfccqOEdHIjq5Dnuh9bi07&#xA;U9LntLyNZbaZGS4glAKPGylXVu1KHK/CkHO02rhe+3vSnyHpGr6VfPafpAahoS25+o+uGa8iIZOM&#xA;bTAlZowtaMw5japbrgAouXqTcBRsWwn87bZL3zhZWdzZ+rZixiuDdc+PGaG5dok4rRj3atabe+WB&#xA;6P2dhx4TGUbjx3d9Rw0P0sl/LS0NtoEOoyW8lte6ifXuoZXL/ZHox0FSqgwxpsvz61yfDYeR7Y1J&#xA;lrJSqqPL4UWcJdQMPtcT4HbMc45BrjqIHqqCSM9GB+RGRMS2CcTyLTzQoKs4H04KbBAnkEK+qQ0r&#xA;EC9eh6DDwt8dMeuyFOqXZY0CADwB/rkuEN35aHmj9Tdn8tXjt9prOUmn/GM5kaf+8j7w6nVihIeR&#xA;fO8IBmjBFQWAI+nO2lyeLunrn5Zqn1O+YfbMiA+NApp+s5yva/1R9zvOwAOCXvDLpmCSI7g8ADuA&#xA;TQ7eGah6OAsEDm3HV5DJSi0CpXYnuTisthSrga1rxo4ow6dD3B9jhZRkQ3bM6zCN99jxfx+fvko8&#xA;1yAEWEZljQ7FXkXn+JF82XbqPikWIt7kRqBnQaA/uh8Xju08IGqkYj1S4fuoJBD5iv8AT2As52FP&#xA;tKSSny49MwddnjkBjH/Tdfg+hezXsfOIGXVWL5Y/0y/4n59yeaVrUWoqeXwXK7uhNa/5QzzTtPsy&#xA;enlxXxQPX9b1Wo0hxcvpTS3neCUSL26jxHhmFpdTLDkE4/2hwpwEhSfW08EwVgapUcwPtAZ3Wm1U&#xA;M0eKB/WPe63JCUdmrq6t4KkttvwX9oj5ZDVa7HgFyO/d1TjxyklFxqFxK2zGNOyqafec5PV9rZsp&#xA;2PDHuH6S50MEY+bK9Zr/AIOuaGh+pHf/AJ553fZn+T90Xj+0/oyf5zx2yv8AUbScyW8pjKihKErU&#xA;9d1NQRnW5McJCi8VDIYcjwptceY9O1S2Sz8x6VDqVuTUepGrFSN+VGDKGFNipGYGTs0H6S7HB2jM&#xA;c9/cibC0EYVvKvmWW2B+xpWqk31uT2VTK63K/wCwnKj+XbNfk0mSHR2WPWY8nPn8imf+KPMOm7a/&#xA;oMvpL11DSS1/DQd2hCpdKe9FicD+bKLPVv4AeR+aa6P5m8v6yH/Rd/DdPEaTQo49WM+EkRo6H2YD&#xA;CCCwlAjmmeFih/LehJY69PdWz8baeFg9v2Vy6EFR0psfllmfPx4wDzB5o0Wn4MpMT6SOXnsx78xf&#xA;KN35h83aeFmltbO1ht5rmaI8eaxzyMYakGofoR4ZixFvZ6XtKGm0Z9R8TxLiB12jz/o9/fyTzUdR&#xA;0/R9ONxcER28QCRovUkD4UQeO2ZEIGRoPDa7XRxROXIeZ+JJ/S8t1zzjrOqysPVa2tTULbxMVHE/&#xA;zkULfT92bLHhjH3vn+t7Wzagmzwx/mjlXn3/AB+xIy7HqSfpy23WUE68u+ar7R5eNTPZN9u3Y7D/&#xA;ACk68T+vMfPpo5B3Hveg7D9oMuhnW88R5xv7Y9x+/r0ImMH5gaAYas0sbKPsMm5+XEsPxzAloZ29&#xA;9D210MgSeOPkY7/YSPtXxeffL7N8UrR8u7I+3bfiGwS0U23H7Y9nyq5Sj74n9Fs3nuIbnyfPcQtz&#xA;ilsZHRh3BiJHXIYYmOWIP84fe3Zc8MuMzgbjKNg+VPn6B+EyNWgBFT7d87SQsPHFmXlnzDLot4ZQ&#xA;vqW8wCzxDYkDow9xXNPq9KM0a5EcmzQa06ed84nmHodr5x8u3CBheLET1SUFCPv2+45oZ6DNH+G/&#xA;c9Tj7U08x9Ve/ZQvPPnle3qov43YVB48mAp/qg1yzH2Zml/CUZe0sUeRtLW/MPy0xqdQPyEUw/40&#xA;zKHZeUfw/aP1uDLtCJ/i+9G2HnXQpmUJqETBuiyNwO/hz45Tl7PyD+E/j3N2HXgH6rDJ7SSOXjJG&#xA;wZGFVYbgjNeIkGi7XiEo2EVk2LsVSLV/JWh6tdvdXayGWQBXKOVBCigy4aiYhwdEaaMcOfx4gHIO&#xA;V715jzS7/lVnlL/fc3/I05Vbvf8ARFqu+PyXwfln5YglWaFZ0kQ1VhKf6ZXmxxyRMZbgsZ9v6mQo&#xA;8Ne5Mv8ACej/AMr/APBnNV/IWn7j83E/lLL5NjynpA6K/wDwZxHYenHK/mv8pZfL5O/wno/8r/8A&#xA;BnH+QtP3H5r/ACll8mv8J6P/ACv/AMGcf5C0/cfmv8pZfJMZ7C3nsHsZAfq7x+kwBoeNKdflm4w/&#xA;u64f4f0OuzRGQES/iY+v5b+WFFBHL1JqZD3zPPaOU9zrj2Rg7j83f8q38s8g3CbYUp6hpvj/ACjl&#xA;8l/kjB3H5tN+WvlZmVjFLVa0/eHv9GI7Sy96R2VhHf8ANHWHlKwsSBBcXXpr0heXmlPCjA0+jKcm&#xA;qlPmB8m6GihHkT81HWvy/wDKGtssmp6dHcXEf91dfYuI/wDjHOnGVP8AYsMoMrciOMDkq6P5Ss9L&#xA;iaGO8vLqD/daXk5uCnylkBlP+yc4iRRLDEprBZwQOXQGpFNzXbEyJTDEImw6ezgncO4NQKbGm2Ik&#xA;Qs8QkbKRa75B0XWpo5byW5AiXikccgCCpqTQq25y/FqpQFAB03aHYGHVTEpymKFUCK+2J3/UEs/5&#xA;VB5V/wB+Xf8AyMT/AJoy38/PuH2/rcH/AEH6b+fk+cf+Id/yqDyr/vy7/wCRif8ANGP5+fcPt/Wv&#xA;+g/Tfz8nzj/xDv8AlUHlX/fl3/yMT/mjH8/PuH2/rX/Qfpv5+T5x/wCId/yqDyr/AL8u/wDkYn/N&#xA;GP5+fcPt/Wv+g/Tfz8nzj/xDv+VQeVf9+Xf/ACMT/mjH8/PuH2/rX/Qfpv5+T5x/4hlVtpFpb6Ou&#xA;kpyNosP1fc/EUK8dyKb0zFOQ8fF1u3o8GljixDEL4QK82N/8qo8of76m/wCRpzP/AJWzd4+TjfyX&#xA;h7j81Vfyy8sooVPrCqOg9Sv6wcge08p7vkxl2RgPf83N+WXlllKv9YIP/FtP1AYjtPKO75LHsnAO&#xA;h+al/wAqo8of76m/5GnJ/wArZu8fJl/JeHuPzd/yqjyh/vqb/kacf5Wzd4+S/wAl4e4/N3/KqPKH&#xA;++pv+Rpx/lbN3j5L/JeHuPzTjQvKel6IT9QedUNaxPIWTfvx6VzFz6qWX6qv3N+DSRxG4389k5zG&#xA;cp2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV//2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:OriginalDocumentID>uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7</xmpMM:OriginalDocumentID>
         <xmpMM:DocumentID>xmp.did:baedf90e-b34d-4f4c-8e3f-f5814cf984a6</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:baedf90e-b34d-4f4c-8e3f-f5814cf984a6</xmpMM:InstanceID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:7850767f-5cf3-45ce-aa95-e29f51630387</stRef:instanceID>
            <stRef:documentID>xmp.did:a35f03c8-2298-4945-b78d-6a4fbacc0700</stRef:documentID>
            <stRef:originalDocumentID>uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:bca9d2d0-eea9-4f43-a2da-7a489c6e57e4</stEvt:instanceID>
                  <stEvt:when>2021-09-20T13:09:51+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 22.1 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:2de8f570-6d54-ec43-b731-281f51000abb</stEvt:instanceID>
                  <stEvt:when>2021-09-20T22:45:54+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 22.1 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:fd9659a9-1811-ed44-bc6d-b97f5cdce4d7</stEvt:instanceID>
                  <stEvt:when>2021-10-30T14:54:17+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 22.1 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:affb21ba-0ebd-5043-b99e-24f3fb030012</stEvt:instanceID>
                  <stEvt:when>2021-10-30T15:04:29+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 22.1 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:a35f03c8-2298-4945-b78d-6a4fbacc0700</stEvt:instanceID>
                  <stEvt:when>2021-12-20T22:17:35+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 22.1 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:baedf90e-b34d-4f4c-8e3f-f5814cf984a6</stEvt:instanceID>
                  <stEvt:when>2021-12-22T13:27:42+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 22.1 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Basic RGB</illustrator:StartupProfile>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>3700.000000</stDim:w>
            <stDim:h>1400.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>RGB Red</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>RGB Yellow</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>RGB Green</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>RGB Cyan</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>RGB Blue</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>RGB Magenta</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=193 G=39 B=45</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>193</xmpG:red>
                           <xmpG:green>39</xmpG:green>
                           <xmpG:blue>45</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=237 G=28 B=36</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>237</xmpG:red>
                           <xmpG:green>28</xmpG:green>
                           <xmpG:blue>36</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=241 G=90 B=36</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>241</xmpG:red>
                           <xmpG:green>90</xmpG:green>
                           <xmpG:blue>36</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=247 G=147 B=30</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>247</xmpG:red>
                           <xmpG:green>147</xmpG:green>
                           <xmpG:blue>30</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=251 G=176 B=59</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>251</xmpG:red>
                           <xmpG:green>176</xmpG:green>
                           <xmpG:blue>59</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=252 G=238 B=33</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>252</xmpG:red>
                           <xmpG:green>238</xmpG:green>
                           <xmpG:blue>33</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=217 G=224 B=33</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>217</xmpG:red>
                           <xmpG:green>224</xmpG:green>
                           <xmpG:blue>33</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=140 G=198 B=63</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>140</xmpG:red>
                           <xmpG:green>198</xmpG:green>
                           <xmpG:blue>63</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=57 G=181 B=74</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>57</xmpG:red>
                           <xmpG:green>181</xmpG:green>
                           <xmpG:blue>74</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=146 B=69</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>146</xmpG:green>
                           <xmpG:blue>69</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=104 B=55</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>104</xmpG:green>
                           <xmpG:blue>55</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=34 G=181 B=115</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>34</xmpG:red>
                           <xmpG:green>181</xmpG:green>
                           <xmpG:blue>115</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=169 B=157</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>169</xmpG:green>
                           <xmpG:blue>157</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=41 G=171 B=226</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>41</xmpG:red>
                           <xmpG:green>171</xmpG:green>
                           <xmpG:blue>226</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=113 B=188</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>113</xmpG:green>
                           <xmpG:blue>188</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=46 G=49 B=146</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>46</xmpG:red>
                           <xmpG:green>49</xmpG:green>
                           <xmpG:blue>146</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=27 G=20 B=100</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>27</xmpG:red>
                           <xmpG:green>20</xmpG:green>
                           <xmpG:blue>100</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=102 G=45 B=145</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>102</xmpG:red>
                           <xmpG:green>45</xmpG:green>
                           <xmpG:blue>145</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=147 G=39 B=143</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>147</xmpG:red>
                           <xmpG:green>39</xmpG:green>
                           <xmpG:blue>143</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=158 G=0 B=93</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>158</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>93</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=212 G=20 B=90</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>212</xmpG:red>
                           <xmpG:green>20</xmpG:green>
                           <xmpG:blue>90</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=237 G=30 B=121</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>237</xmpG:red>
                           <xmpG:green>30</xmpG:green>
                           <xmpG:blue>121</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=199 G=178 B=153</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>199</xmpG:red>
                           <xmpG:green>178</xmpG:green>
                           <xmpG:blue>153</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=153 G=134 B=117</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>153</xmpG:red>
                           <xmpG:green>134</xmpG:green>
                           <xmpG:blue>117</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=115 G=99 B=87</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>115</xmpG:red>
                           <xmpG:green>99</xmpG:green>
                           <xmpG:blue>87</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=83 G=71 B=65</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>83</xmpG:red>
                           <xmpG:green>71</xmpG:green>
                           <xmpG:blue>65</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=198 G=156 B=109</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>198</xmpG:red>
                           <xmpG:green>156</xmpG:green>
                           <xmpG:blue>109</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=166 G=124 B=82</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>166</xmpG:red>
                           <xmpG:green>124</xmpG:green>
                           <xmpG:blue>82</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=140 G=98 B=57</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>140</xmpG:red>
                           <xmpG:green>98</xmpG:green>
                           <xmpG:blue>57</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=117 G=76 B=36</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>117</xmpG:red>
                           <xmpG:green>76</xmpG:green>
                           <xmpG:blue>36</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=96 G=56 B=19</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>96</xmpG:red>
                           <xmpG:green>56</xmpG:green>
                           <xmpG:blue>19</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=66 G=33 B=11</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>66</xmpG:red>
                           <xmpG:green>33</xmpG:green>
                           <xmpG:blue>11</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=56 M=0 Y=20 K=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>101</xmpG:red>
                           <xmpG:green>200</xmpG:green>
                           <xmpG:blue>208</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=51 M=43 Y=0 K=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>131</xmpG:red>
                           <xmpG:green>139</xmpG:green>
                           <xmpG:blue>197</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=26 M=41 Y=0 K=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>186</xmpG:red>
                           <xmpG:green>155</xmpG:green>
                           <xmpG:blue>201</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=0 B=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=26 G=26 B=26</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>26</xmpG:red>
                           <xmpG:green>26</xmpG:green>
                           <xmpG:blue>26</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=51 G=51 B=51</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>51</xmpG:red>
                           <xmpG:green>51</xmpG:green>
                           <xmpG:blue>51</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=77 G=77 B=77</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>77</xmpG:red>
                           <xmpG:green>77</xmpG:green>
                           <xmpG:blue>77</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=102 G=102 B=102</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>102</xmpG:red>
                           <xmpG:green>102</xmpG:green>
                           <xmpG:blue>102</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=128 G=128 B=128</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>128</xmpG:red>
                           <xmpG:green>128</xmpG:green>
                           <xmpG:blue>128</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=153 G=153 B=153</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>153</xmpG:red>
                           <xmpG:green>153</xmpG:green>
                           <xmpG:blue>153</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=179 G=179 B=179</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>179</xmpG:red>
                           <xmpG:green>179</xmpG:green>
                           <xmpG:blue>179</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=204 G=204 B=204</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>204</xmpG:red>
                           <xmpG:green>204</xmpG:green>
                           <xmpG:blue>204</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=230 G=230 B=230</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>230</xmpG:red>
                           <xmpG:green>230</xmpG:green>
                           <xmpG:blue>230</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=242 G=242 B=242</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>242</xmpG:red>
                           <xmpG:green>242</xmpG:green>
                           <xmpG:blue>242</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -1400 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 1400 li
3700 1400 li
3700 0 li
cp
clp
3700 1400 mo
0 1400 li
0 0 li
3700 0 li
3700 1400 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
881.526 92.2095 mo
877.11 92.2095 li
732.768 92.2095 li
726.512 92.2095 li
682.616 92.2095 li
690.172 102.021 696.703 112.573 701.903 123.756 cv
722.708 116.563 744.59 112.547 766.634 112.254 cv
808.586 111.697 853.957 125.298 882.526 157.236 cv
898.87 151.605 915.758 147.52 932.923 145.039 cv
932.923 92.2095 li
881.526 92.2095 li
cp
.478431 .729412 .890196 rgb
f
348.449 129.974 mo
353.832 143.862 358.499 158.571 367.22 170.456 cv
369.029 172.92 371.015 175.262 373.216 177.451 cv
375.328 179.551 377.632 181.515 380.181 183.302 cv
398.08 195.853 421.254 193.625 440.414 185.427 cv
462.327 176.052 478.185 159.396 493.562 141.753 cv
508.817 124.25 524.81 104.805 547.451 96.8774 cv
591.404 81.4878 635.708 108.809 665.369 140.281 cv
673.514 135.665 681.955 131.563 690.621 128.018 cv
685.668 117.296 679.409 107.075 671.97 97.5728 cv
670.545 95.7524 669.08 93.9668 667.584 92.2095 cv
629.928 92.2095 li
625.083 92.2095 li
405.515 92.2095 li
400.266 92.2095 li
320.42 92.2095 li
332.485 101.507 342.271 114.035 348.449 129.974 cv
cp
f
673.386 149.3 mo
684.274 162.196 694.09 175.988 703.819 189.845 cv
704.156 172.386 701.124 155.183 695.136 138.917 cv
687.702 141.939 680.44 145.424 673.386 149.3 cv
cp
f
771.127 248.641 mo
768.104 252.6 765.248 256.944 762.769 261.537 cv
763.905 262.533 765.053 263.52 766.217 264.493 cv
783.779 279.167 804.014 291.393 826.526 296.535 cv
836.885 298.901 847.32 299.61 857.645 298.876 cv
877.184 280.113 891.232 254.987 894.333 229.278 cv
897.021 206.991 890.321 187.188 878.053 171.036 cv
835.96 186.909 798 213.438 771.127 248.641 cv
cp
f
878.333 293.112 mo
877.539 294.104 876.723 295.085 875.9 296.062 cv
882.529 294.498 889.066 292.38 895.452 289.73 cv
908.706 284.229 921.032 277.024 932.923 269.112 cv
932.923 228.199 li
932.923 221.048 li
932.923 156.804 li
918.456 158.938 904.116 162.292 890.146 166.804 cv
917.979 206.308 907.104 257.147 878.333 293.112 cv
cp
f
798.885 203.75 mo
820.359 186.173 844.464 172.089 870.121 161.849 cv
858.352 149.817 843.332 140.41 827.168 134.284 cv
788.56 119.651 745.22 121.537 706.471 134.691 cv
709.746 143.46 712.221 152.558 713.739 161.945 cv
716.028 176.11 716.289 190.712 714.543 205.072 cv
726.57 221.983 739.035 238.509 753.762 253.109 cv
764.819 233.894 782.124 217.468 798.885 203.75 cv
cp
f
875.9 296.062 mo
861.319 313.367 842.41 327.892 821.19 335.837 cv
800.452 343.604 774.55 345.033 757.362 328.77 cv
739.334 311.711 739.502 284.072 748.857 262.741 cv
750.299 259.453 751.956 256.248 753.762 253.109 cv
739.035 238.509 726.57 221.983 714.543 205.072 cv
710.946 234.685 698.777 263.268 677.988 284.862 cv
675.832 287.103 673.57 289.263 671.229 291.344 cv
676.136 295.75 680.662 300.429 684.708 305.146 cv
708.396 332.757 724.881 366.389 753.146 390.008 cv
765.887 400.653 780.565 409.521 796.896 413.252 cv
813.797 417.113 830.98 414.921 846.896 408.315 cv
863.031 401.619 877.276 391.453 891.301 381.195 cv
904.814 371.313 918.468 361.791 932.923 353.379 cv
932.923 333.751 li
932.923 328.404 li
932.923 269.112 li
921.032 277.024 908.706 284.229 895.452 289.73 cv
889.066 292.38 882.529 294.498 875.9 296.062 cv
cp
.835294 .937255 .945098 rgb
f
603.279 212.975 mo
591.578 230.589 580.191 251.992 581.995 273.826 cv
582.021 274.138 582.063 274.438 582.097 274.745 cv
585.921 272.158 590.004 269.974 594.45 268.417 cv
618.444 260.016 642.576 269.167 662.224 283.937 cv
682.374 266.528 695.725 240.141 700.985 214.98 cv
702.738 206.593 703.659 198.19 703.819 189.845 cv
694.09 175.988 684.274 162.196 673.386 149.3 cv
645.438 164.655 620.892 186.461 603.279 212.975 cv
cp
f
826.526 296.535 mo
804.014 291.393 783.779 279.167 766.217 264.493 cv
765.053 263.52 763.905 262.533 762.769 261.537 cv
754.034 277.72 750.013 297 760.128 313.511 cv
772.074 333.012 797.168 331.823 816.158 325.092 cv
831.243 319.746 845.502 310.537 857.645 298.876 cv
847.32 299.61 836.885 298.901 826.526 296.535 cv
cp
f
206.065 491.927 mo
207.335 493.599 208.57 495.311 209.728 497.111 cv
222.023 516.248 223.071 539.243 211.375 558.912 cv
209.544 561.992 207.483 564.917 205.292 567.747 cv
207.714 571.183 210.61 574.445 214.061 577.474 cv
236.804 597.436 270.488 601.705 298.793 608.78 cv
311.734 612.015 324.778 615.529 337.539 619.816 cv
342.417 614.833 347.09 609.58 350.656 603.584 cv
359.141 589.316 358.38 572.635 349.461 558.753 cv
339.791 543.703 324.509 535.046 308.322 528.51 cv
292.127 521.97 275.354 517.016 261.139 506.497 cv
250.556 498.664 241.755 488.503 234.974 477.257 cv
231.564 471.601 228.668 465.675 226.244 459.566 cv
218.836 469.439 212.078 479.734 206.604 490.805 cv
206.42 491.176 206.246 491.554 206.065 491.927 cv
cp
1 .807843 .847059 rgb
f
174.51 1143.83 mo
183.682 1119.19 186.855 1092.47 181.795 1065.1 cv
179.131 1050.69 173.999 1036.57 166.449 1023.99 cv
162.171 1016.86 156.965 1010.66 151.478 1004.69 cv
151.478 1013.63 li
151.478 1013.79 li
151.478 1016.05 li
151.478 1029.22 li
151.478 1037.04 li
151.478 1042.06 li
151.478 1046.67 li
151.478 1056.63 li
151.478 1057.7 li
151.478 1069.71 li
151.478 1074.37 li
151.478 1082.28 li
151.478 1093.97 li
151.478 1121.64 li
151.478 1126.26 li
151.478 1130.53 li
151.478 1136.24 li
151.478 1139.48 li
155.213 1140.2 158.952 1140.91 162.694 1141.61 cv
166.631 1142.35 170.57 1143.09 174.51 1143.83 cv
cp
1 .72549 .843137 rgb
f
264.348 692.014 mo
310.709 646.327 li
316.503 640.618 322.3 634.91 328.091 629.197 cv
330.103 627.213 332.121 625.235 334.129 623.247 cv
335.271 622.116 336.409 620.971 337.539 619.816 cv
324.778 615.529 311.734 612.015 298.793 608.78 cv
270.488 601.705 236.804 597.436 214.061 577.474 cv
210.61 574.445 207.714 571.183 205.292 567.747 cv
202.838 570.918 200.214 573.963 197.479 576.909 cv
194.587 580.025 191.592 583.046 188.592 586.017 cv
177.858 596.65 167.07 607.229 156.308 617.834 cv
151.478 622.594 li
151.478 665.006 li
151.478 671.931 li
151.478 757.236 li
151.478 779.13 li
151.478 810.885 li
159.417 799.365 168.505 788.575 177.771 778.441 cv
205.247 748.391 235.355 720.585 264.348 692.014 cv
cp
f
229.479 172.296 mo
230.299 172.714 231.126 173.117 231.944 173.542 cv
236.381 175.845 240.772 178.287 245.103 180.849 cv
266.676 193.614 286.581 209.674 301.308 230.013 cv
307.573 238.665 312.422 247.953 315.857 257.646 cv
316.681 259.97 317.432 262.315 318.092 264.683 cv
318.88 267.514 319.552 270.374 320.105 273.257 cv
322.158 272.315 324.24 271.399 326.344 270.509 cv
328.669 269.526 331.024 268.579 333.403 267.675 cv
336.97 266.318 340.591 265.059 344.252 263.923 cv
354.064 260.878 364.15 258.719 374.196 257.942 cv
382.465 257.304 390.705 257.599 398.741 259.114 cv
412.817 261.768 426.404 268.182 435.946 279.085 cv
444.871 289.281 449.008 302.646 456.495 313.801 cv
459.354 318.062 462.629 321.862 466.331 325.03 cv
468.31 327.257 470.538 329.307 473.11 331.111 cv
486.094 340.216 502.906 338.599 516.804 332.652 cv
532.7 325.852 544.204 313.769 555.358 300.971 cv
560.535 295.032 565.835 288.794 571.684 283.238 cv
571.321 281.853 571.018 280.429 570.78 278.967 cv
566.965 255.467 577.601 231.78 589.697 212.259 cv
601.973 192.447 617.702 174.976 635.826 160.357 cv
645.095 152.882 654.992 146.163 665.369 140.281 cv
635.708 108.809 591.404 81.4878 547.451 96.8774 cv
524.81 104.805 508.817 124.25 493.562 141.753 cv
478.185 159.396 462.327 176.052 440.414 185.427 cv
421.254 193.625 398.08 195.853 380.181 183.302 cv
377.632 181.515 375.328 179.551 373.216 177.451 cv
371.015 175.262 369.029 172.92 367.22 170.456 cv
358.499 158.571 353.832 143.862 348.449 129.974 cv
342.271 114.035 332.485 101.507 320.42 92.2095 cv
250.917 92.2095 li
244.812 92.2095 li
183.986 92.2095 li
182.224 92.8296 180.464 93.4609 178.711 94.1123 cv
170.041 97.3345 161.536 101.012 153.233 105.077 cv
152.645 105.432 152.064 105.802 151.478 106.162 cv
151.478 143.218 li
151.708 143.275 151.938 143.326 152.167 143.384 cv
178.931 150.129 204.935 159.794 229.479 172.296 cv
cp
.835294 .937255 .945098 rgb
f
181.795 1065.1 mo
186.855 1092.47 183.682 1119.19 174.51 1143.83 cv
227.693 1153.8 280.943 1163.94 329.311 1186.86 cv
352.917 1169 376.832 1151.55 401.134 1134.7 cv
425.985 1117.46 451.475 1100.81 477.615 1085.21 cv
473.579 1081.85 469.393 1078.63 464.987 1075.6 cv
401.632 1031.98 321.284 1032.55 249.813 1011.47 cv
215.322 1001.3 182.445 985.447 157.693 958.769 cv
155.533 956.441 153.465 954.034 151.478 951.565 cv
151.478 1004.69 li
156.965 1010.66 162.171 1016.86 166.449 1023.99 cv
173.999 1036.57 179.131 1050.69 181.795 1065.1 cv
cp
f
594.45 268.417 mo
590.004 269.974 585.921 272.158 582.097 274.745 cv
584.495 297.269 605.377 306.502 626.037 302.258 cv
639.775 299.436 651.891 292.864 662.224 283.937 cv
642.576 269.167 618.444 260.016 594.45 268.417 cv
cp
.984314 .960784 .92549 rgb
f
393.42 469.458 mo
389.917 474.188 383.542 477.376 377.193 477.042 cv
375.671 477.232 374.136 477.281 372.637 477.163 cv
359.334 476.115 353.986 463.631 359.047 453.581 cv
364.999 441.761 381.271 440.856 390.81 450.044 cv
396.282 455.314 398.04 463.221 393.42 469.458 cv
cp
358.768 401.321 mo
364.72 389.5 380.993 388.597 390.531 397.784 cv
396.003 403.054 397.761 410.96 393.142 417.197 cv
389.637 421.928 383.263 425.116 376.914 424.782 cv
375.392 424.972 373.857 425.021 372.357 424.902 cv
359.056 423.854 353.708 411.371 358.768 401.321 cv
cp
358.487 348.778 mo
364.439 336.958 380.712 336.053 390.25 345.241 cv
395.723 350.511 397.48 358.417 392.861 364.654 cv
389.357 369.385 382.982 372.573 376.633 372.239 cv
375.112 372.429 373.577 372.478 372.077 372.359 cv
358.775 371.312 353.427 358.828 358.487 348.778 cv
cp
846.896 408.315 mo
830.98 414.921 813.797 417.113 796.896 413.252 cv
780.565 409.521 765.887 400.653 753.146 390.008 cv
724.881 366.389 708.396 332.757 684.708 305.146 cv
680.662 300.429 676.136 295.75 671.229 291.344 cv
656.611 304.335 638.545 313.845 618.806 315.078 cv
596.939 316.445 577.217 304.358 571.684 283.238 cv
565.835 288.794 560.535 295.032 555.358 300.971 cv
544.204 313.769 532.7 325.852 516.804 332.652 cv
502.906 338.599 486.094 340.216 473.11 331.111 cv
470.538 329.307 468.31 327.257 466.331 325.03 cv
462.629 321.862 459.354 318.062 456.495 313.801 cv
449.008 302.646 444.871 289.281 435.946 279.085 cv
426.404 268.182 412.817 261.768 398.741 259.114 cv
390.705 257.599 382.465 257.304 374.196 257.942 cv
364.15 258.719 354.064 260.878 344.252 263.923 cv
340.591 265.059 336.97 266.318 333.403 267.675 cv
331.024 268.579 328.669 269.526 326.344 270.509 cv
324.24 271.399 322.158 272.315 320.105 273.257 cv
322.874 287.682 322.697 302.703 319.485 317.665 cv
318.343 322.989 316.884 328.195 315.154 333.292 cv
314.343 335.679 313.467 338.04 312.542 340.379 cv
302.89 364.783 287.229 386.648 270.556 406.817 cv
266.791 411.373 262.917 415.885 259.005 420.391 cv
256.871 422.849 254.728 425.308 252.581 427.77 cv
251.841 428.619 251.101 429.47 250.361 430.32 cv
248.051 432.974 245.747 435.636 243.458 438.313 cv
237.523 445.253 231.702 452.292 226.244 459.566 cv
228.668 465.675 231.564 471.601 234.974 477.257 cv
241.755 488.503 250.556 498.664 261.139 506.497 cv
275.354 517.016 292.127 521.97 308.322 528.51 cv
324.509 535.046 339.791 543.703 349.461 558.753 cv
358.38 572.635 359.141 589.316 350.656 603.584 cv
347.09 609.58 342.417 614.833 337.539 619.816 cv
356.059 626.038 373.978 633.903 390.075 645.034 cv
413.703 661.372 431.824 685.208 438.987 713.277 cv
445.765 739.843 441.027 768.205 421.846 788.534 cv
401.735 809.849 371.772 817.826 344.316 824.764 cv
310.87 833.214 278.292 843.518 246.97 858.131 cv
215.561 872.783 185.404 890.694 157.909 911.828 cv
155.768 913.474 153.613 915.197 151.478 916.984 cv
151.478 951.565 li
153.465 954.034 155.533 956.441 157.693 958.769 cv
182.445 985.447 215.322 1001.3 249.813 1011.47 cv
321.284 1032.55 401.632 1031.98 464.987 1075.6 cv
469.393 1078.63 473.579 1081.85 477.615 1085.21 cv
548.74 1042.77 624.721 1008.22 706.059 991.523 cv
753.089 981.872 804.928 975.326 851.341 991.473 cv
872.202 998.729 890.98 1010.87 904.115 1028.85 cv
920.344 1051.06 923.71 1078.87 931.299 1104.58 cv
931.806 1106.3 932.349 1108.02 932.923 1109.75 cv
932.923 1083.94 li
932.923 1072.01 li
932.923 1031.74 li
932.923 955.144 li
932.923 949.403 li
932.923 937.36 li
932.923 934.005 li
932.923 698.577 li
932.923 638.471 li
932.923 633.969 li
932.923 497.024 li
932.923 492.091 li
932.923 486.269 li
932.923 475.165 li
932.923 439.519 li
932.923 400.226 li
932.923 395.479 li
932.923 353.379 li
918.468 361.791 904.814 371.313 891.301 381.195 cv
877.276 391.453 863.031 401.619 846.896 408.315 cv
cp
f
307.978 279.231 mo
284.849 291.406 264.282 308.2 248.135 328.322 cv
245.007 332.22 242.047 336.244 239.266 340.382 cv
231.167 352.431 224.583 365.455 219.867 379.236 cv
218.506 385.482 217.579 391.913 217.136 398.523 cv
216.64 405.938 216.718 413.413 217.342 420.842 cv
217.546 423.263 217.794 425.679 218.12 428.085 cv
218.955 434.265 220.185 440.389 221.843 446.39 cv
223.078 450.858 224.535 455.26 226.244 459.566 cv
231.702 452.292 237.523 445.253 243.458 438.313 cv
245.747 435.636 248.051 432.974 250.361 430.32 cv
251.101 429.47 251.841 428.619 252.581 427.77 cv
254.728 425.308 256.871 422.849 259.005 420.391 cv
262.917 415.885 266.791 411.373 270.556 406.817 cv
287.229 386.648 302.89 364.783 312.542 340.379 cv
313.467 338.04 314.343 335.679 315.154 333.292 cv
316.884 328.195 318.343 322.989 319.485 317.665 cv
322.697 302.703 322.874 287.682 320.105 273.257 cv
316.439 274.94 312.863 276.696 309.393 278.496 cv
308.921 278.741 308.446 278.984 307.978 279.231 cv
cp
1 .478431 .466667 rgb
f
209.728 497.111 mo
208.57 495.311 207.335 493.599 206.065 491.927 cv
194.382 516.159 189.727 545.661 205.292 567.747 cv
207.483 564.917 209.544 561.992 211.375 558.912 cv
223.071 539.243 222.023 516.248 209.728 497.111 cv
cp
.984314 .960784 .92549 rgb
f
178.711 94.1123 mo
180.464 93.4609 182.224 92.8296 183.986 92.2095 cv
154.65 92.2095 li
151.478 92.2095 li
151.478 98.0762 li
151.478 106.162 li
152.064 105.802 152.645 105.432 153.233 105.077 cv
161.536 101.012 170.041 97.3345 178.711 94.1123 cv
cp
.478431 .729412 .890196 rgb
f
188.592 586.017 mo
191.592 583.046 194.587 580.025 197.479 576.909 cv
200.214 573.963 202.838 570.918 205.292 567.747 cv
189.727 545.661 194.382 516.159 206.065 491.927 cv
203.466 488.504 200.648 485.334 197.631 482.402 cv
186.687 471.762 173.246 464.129 159.036 457.942 cv
157.043 457.075 155.035 456.235 153.017 455.42 cv
152.644 455.269 152.268 455.123 151.894 454.974 cv
151.756 454.918 151.617 454.865 151.478 454.81 cv
151.478 535.803 li
151.478 542.533 li
151.478 561.245 li
151.478 583.936 li
151.478 622.594 li
156.308 617.834 li
167.07 607.229 177.858 596.65 188.592 586.017 cv
cp
0 .756863 .733333 rgb
f
264.984 1237.02 mo
286.189 1220.03 307.62 1203.27 329.311 1186.86 cv
280.943 1163.94 227.693 1153.8 174.51 1143.83 cv
168.91 1158.88 161.055 1173.14 151.478 1186.31 cv
151.478 1190.96 li
151.478 1196.87 li
151.478 1255.11 li
151.478 1262.14 li
151.478 1304.36 li
151.478 1307.79 li
154.582 1307.79 li
158.438 1307.79 li
163.063 1307.79 li
175.345 1307.79 li
179.962 1307.79 li
186.096 1307.79 li
210.439 1282.2 237.445 1259.09 264.984 1237.02 cv
cp
.478431 .729412 .890196 rgb
f
368.983 1209.59 mo
359.899 1203.34 350.558 1197.75 341.007 1192.71 cv
337.142 1190.67 333.243 1188.73 329.311 1186.86 cv
307.62 1203.27 286.189 1220.03 264.984 1237.02 cv
237.445 1259.09 210.439 1282.2 186.096 1307.79 cv
189.079 1307.79 li
196.309 1307.79 li
208.216 1307.79 li
213.386 1307.79 li
264.442 1307.79 li
270.383 1307.79 li
331.345 1307.79 li
343.911 1307.79 li
345.602 1307.79 li
345.772 1307.79 li
349.938 1307.79 li
350.119 1307.79 li
363.629 1307.79 li
369.925 1307.79 li
447.499 1307.79 li
459.332 1307.79 li
433.976 1270.84 406.755 1235.59 368.983 1209.59 cv
cp
.92549 .333333 .572549 rgb
f
799.646 1224.1 mo
769.277 1245.94 735.498 1267.75 697.66 1272.91 cv
661.527 1277.84 628.392 1263.26 601.93 1239.37 cv
555.514 1197.46 531.885 1136.03 486.853 1093.4 cv
483.875 1090.58 480.793 1087.85 477.615 1085.21 cv
451.475 1100.81 425.985 1117.46 401.134 1134.7 cv
376.832 1151.55 352.917 1169 329.311 1186.86 cv
333.243 1188.73 337.142 1190.67 341.007 1192.71 cv
350.558 1197.75 359.899 1203.34 368.983 1209.59 cv
406.755 1235.59 433.976 1270.84 459.332 1307.79 cv
466.407 1307.79 li
483.467 1307.79 li
497.369 1307.79 li
508.451 1307.79 li
514.904 1307.79 li
592.51 1307.79 li
598.135 1307.79 li
610.122 1307.79 li
616.502 1307.79 li
620.358 1307.79 li
624.984 1307.79 li
637.266 1307.79 li
641.883 1307.79 li
651 1307.79 li
658.229 1307.79 li
670.137 1307.79 li
675.307 1307.79 li
726.362 1307.79 li
732.303 1307.79 li
741.043 1307.79 li
745.763 1307.79 li
746.549 1307.79 li
754.272 1307.79 li
761.629 1307.79 li
793.265 1307.79 li
805.832 1307.79 li
825.55 1307.79 li
831.845 1307.79 li
909.419 1307.79 li
928.328 1307.79 li
932.923 1307.79 li
932.923 1306.33 li
932.923 1298.73 li
932.923 1283.78 li
932.923 1278.55 li
932.923 1211.23 li
932.923 1206.43 li
932.923 1198.78 li
932.923 1194.13 li
932.923 1184.75 li
932.923 1179.78 li
932.923 1161.38 li
932.923 1157.17 li
918.955 1158.53 905.227 1162.02 892.16 1167.17 cv
858.171 1180.55 829.058 1202.96 799.646 1224.1 cv
cp
1 .733333 .32549 rgb
f
816.805 1120.53 mo
816.451 1126.25 813.872 1132.27 810.959 1136.18 cv
807.943 1140.23 800.012 1139.65 797.735 1135.07 cv
793.596 1126.75 788.89 1109.63 801.419 1105.89 cv
806.853 1104.26 812.779 1107.16 815.427 1111.99 cv
816.967 1114.8 817.221 1117.68 816.805 1120.53 cv
cp
785.801 1072.68 mo
780.273 1076.2 773.004 1076.14 769.022 1070.36 cv
765.83 1065.73 764.472 1058.7 763.77 1053.25 cv
762.419 1042.77 766.56 1025.36 780.099 1025.57 cv
786.764 1025.68 789.851 1029.72 790.948 1035.1 cv
791.067 1035.33 791.184 1035.57 791.288 1035.82 cv
796.355 1048.08 798.958 1064.28 785.801 1072.68 cv
cp
747.297 1150.97 mo
747.176 1151.09 747.051 1151.2 746.927 1151.31 cv
744.637 1155.94 741.147 1159.67 736.344 1160.49 cv
723.602 1162.65 721.992 1143.94 724.197 1135.55 cv
725.497 1130.6 727.971 1125.5 732.131 1122.36 cv
736.887 1118.77 743.354 1118.44 747.896 1122.67 cv
754.905 1129.21 753.515 1144.53 747.297 1150.97 cv
cp
723.231 1080.57 mo
719.202 1087.17 709.572 1088.97 704.96 1081.84 cv
702.276 1077.69 702.136 1071.63 702.527 1066.84 cv
702.97 1061.4 704.689 1056.12 708.808 1052.34 cv
714.513 1047.1 723.884 1048.11 726.626 1056.01 cv
727.2 1057.67 727.628 1059.59 727.917 1061.6 cv
728.191 1062.48 728.365 1063.39 728.414 1064.29 cv
728.457 1065.09 728.403 1065.94 728.308 1066.8 cv
728.319 1069.33 728.075 1071.8 727.504 1073.9 cv
726.809 1076.45 725.268 1078.8 723.265 1080.51 cv
723.254 1080.53 723.242 1080.55 723.231 1080.57 cv
cp
705.774 1222.23 mo
704.863 1226.91 701.167 1228.78 697.506 1228.5 cv
694.844 1230.18 691.358 1230.52 688.69 1228.99 cv
684.731 1227.83 681.777 1224.38 680.926 1220.13 cv
680.088 1215.94 680.765 1210.36 681.964 1206.26 cv
682.328 1205.01 682.87 1203.84 683.547 1202.77 cv
683.908 1201.63 684.337 1200.51 684.837 1199.38 cv
686.851 1194.87 692.124 1194.34 696.135 1195.86 cv
699.323 1197.07 701.479 1199.37 702.838 1202.17 cv
706.937 1207.37 707.053 1215.67 705.774 1222.23 cv
cp
669.602 1145.69 mo
665.73 1149.92 660.432 1148.72 657.405 1145.47 cv
651.417 1141.1 651.708 1128.67 652.778 1122.1 cv
653.586 1117.14 656.792 1112.19 661.839 1110.78 cv
668.172 1109 673.954 1113.32 675.972 1119.16 cv
679.108 1128.24 675.9 1138.8 669.602 1145.69 cv
cp
904.115 1028.85 mo
890.98 1010.87 872.202 998.729 851.341 991.473 cv
804.928 975.326 753.089 981.872 706.059 991.523 cv
624.721 1008.22 548.74 1042.77 477.615 1085.21 cv
480.793 1087.85 483.875 1090.58 486.853 1093.4 cv
531.885 1136.03 555.514 1197.46 601.93 1239.37 cv
628.392 1263.26 661.527 1277.84 697.66 1272.91 cv
735.498 1267.75 769.277 1245.94 799.646 1224.1 cv
829.058 1202.96 858.171 1180.55 892.16 1167.17 cv
905.227 1162.02 918.955 1158.53 932.923 1157.17 cv
932.923 1155.13 li
932.923 1109.75 li
932.349 1108.02 931.806 1106.3 931.299 1104.58 cv
923.71 1078.87 920.344 1051.06 904.115 1028.85 cv
cp
1 .807843 .847059 rgb
f
894.333 229.278 mo
891.232 254.987 877.184 280.113 857.645 298.876 cv
845.502 310.537 831.243 319.746 816.158 325.092 cv
797.168 331.823 772.074 333.012 760.128 313.511 cv
750.013 297 754.034 277.72 762.769 261.537 cv
765.248 256.944 768.104 252.6 771.127 248.641 cv
798 213.438 835.96 186.909 878.053 171.036 cv
890.321 187.188 897.021 206.991 894.333 229.278 cv
cp
703.819 189.845 mo
703.659 198.19 702.738 206.593 700.985 214.98 cv
695.725 240.141 682.374 266.528 662.224 283.937 cv
651.891 292.864 639.775 299.436 626.037 302.258 cv
605.377 306.502 584.495 297.269 582.097 274.745 cv
582.063 274.438 582.021 274.138 581.995 273.826 cv
580.191 251.992 591.578 230.589 603.279 212.975 cv
620.892 186.461 645.438 164.655 673.386 149.3 cv
680.44 145.424 687.702 141.939 695.136 138.917 cv
701.124 155.183 704.156 172.386 703.819 189.845 cv
cp
766.634 112.254 mo
744.59 112.547 722.708 116.563 701.903 123.756 cv
696.703 112.573 690.172 102.021 682.616 92.2095 cv
667.584 92.2095 li
669.08 93.9668 670.545 95.7524 671.97 97.5728 cv
679.409 107.075 685.668 117.296 690.621 128.018 cv
681.955 131.563 673.514 135.665 665.369 140.281 cv
654.992 146.163 645.095 152.882 635.826 160.357 cv
617.702 174.976 601.973 192.447 589.697 212.259 cv
577.601 231.78 566.965 255.467 570.78 278.967 cv
571.018 280.429 571.321 281.853 571.684 283.238 cv
577.217 304.358 596.939 316.445 618.806 315.078 cv
638.545 313.845 656.611 304.335 671.229 291.344 cv
673.57 289.263 675.832 287.103 677.988 284.862 cv
698.777 263.268 710.946 234.685 714.543 205.072 cv
716.289 190.712 716.028 176.11 713.739 161.945 cv
712.221 152.558 709.746 143.46 706.471 134.691 cv
745.22 121.537 788.56 119.651 827.168 134.284 cv
843.332 140.41 858.352 149.817 870.121 161.849 cv
844.464 172.089 820.359 186.173 798.885 203.75 cv
782.124 217.468 764.819 233.894 753.762 253.109 cv
751.956 256.248 750.299 259.453 748.857 262.741 cv
739.502 284.072 739.334 311.711 757.362 328.77 cv
774.55 345.033 800.452 343.604 821.19 335.837 cv
842.41 327.892 861.319 313.367 875.9 296.062 cv
876.723 295.085 877.539 294.104 878.333 293.112 cv
907.104 257.147 917.979 206.308 890.146 166.804 cv
904.116 162.292 918.456 158.938 932.923 156.804 cv
932.923 145.039 li
915.758 147.52 898.87 151.605 882.526 157.236 cv
853.957 125.298 808.586 111.697 766.634 112.254 cv
cp
.121569 .0862745 .0862745 rgb
f
176.922 303.184 mo
192.363 300.92 207.324 294.479 219.946 283.824 cv
208.264 273.342 194.388 266.672 179.897 263.754 cv
184.911 268.353 188.056 274.957 188.056 282.296 cv
188.056 290.998 183.637 298.667 176.922 303.184 cv
cp
.984314 .960784 .92549 rgb
f
175.171 323.367 mo
176.175 328.88 177.408 334.329 178.871 339.716 cv
176.736 340.056 174.603 340.412 172.471 340.776 cv
171.452 335.067 170.432 329.357 169.413 323.648 cv
171.337 323.595 173.256 323.499 175.171 323.367 cv
cp
223.234 311.928 mo
229.769 322.542 li
227.254 323.563 224.724 324.549 222.195 325.54 cv
220.307 321.868 218.483 318.162 216.731 314.418 cv
218.913 313.629 221.084 312.807 223.234 311.928 cv
cp
215.612 253.713 mo
213.553 252.688 211.468 251.715 209.354 250.808 cv
212.626 246.171 215.695 241.4 218.518 236.45 cv
220.482 237.133 222.482 237.738 224.464 238.392 cv
221.232 243.33 218.292 248.441 215.612 253.713 cv
cp
180.845 242.509 mo
178.646 242.155 176.437 241.856 174.216 241.625 cv
175.838 234.861 177.46 228.096 179.082 221.332 cv
181.043 221.623 182.997 221.969 184.948 222.339 cv
183.58 229.063 182.213 235.786 180.845 242.509 cv
cp
153.017 455.42 mo
155.035 456.235 157.043 457.075 159.036 457.942 cv
173.246 464.129 186.687 471.762 197.631 482.402 cv
200.648 485.334 203.466 488.504 206.065 491.927 cv
206.246 491.554 206.42 491.176 206.604 490.805 cv
212.078 479.734 218.836 469.439 226.244 459.566 cv
224.535 455.26 223.078 450.858 221.843 446.39 cv
220.185 440.389 218.955 434.265 218.12 428.085 cv
217.794 425.679 217.546 423.263 217.342 420.842 cv
216.718 413.413 216.64 405.938 217.136 398.523 cv
217.579 391.913 218.506 385.482 219.867 379.236 cv
224.583 365.455 231.167 352.431 239.266 340.382 cv
242.047 336.244 245.007 332.22 248.135 328.322 cv
264.282 308.2 284.849 291.406 307.978 279.231 cv
308.446 278.984 308.921 278.741 309.393 278.496 cv
312.863 276.696 316.439 274.94 320.105 273.257 cv
319.552 270.374 318.88 267.514 318.092 264.683 cv
317.432 262.315 316.681 259.97 315.857 257.646 cv
312.422 247.953 307.573 238.665 301.308 230.013 cv
286.581 209.674 266.676 193.614 245.103 180.849 cv
240.772 178.287 236.381 175.845 231.944 173.542 cv
231.126 173.117 230.299 172.714 229.479 172.296 cv
204.935 159.794 178.931 150.129 152.167 143.384 cv
151.938 143.326 151.708 143.275 151.478 143.218 cv
151.478 162.292 li
151.478 166.677 li
151.478 253.467 li
157.123 252.87 162.825 252.694 168.536 253.009 cv
192.04 254.301 214.468 263.721 232.338 278.761 cv
236.762 282.883 li
238.466 284.458 li
231.376 289.968 li
226.848 294.226 221.928 298.022 216.712 301.333 cv
216.934 301.695 li
201.849 307.676 185.904 311.338 169.513 311.818 cv
163.49 311.994 157.456 311.718 151.478 311.01 cv
151.478 322.917 li
151.491 322.918 151.504 322.92 151.517 322.921 cv
151.504 322.972 151.491 323.021 151.478 323.072 cv
151.478 375.859 li
151.478 383.832 li
151.478 439.519 li
151.478 454.81 li
151.617 454.865 151.756 454.918 151.894 454.974 cv
152.268 455.123 152.644 455.269 153.017 455.42 cv
cp
.92549 .333333 .572549 rgb
f
246.97 858.131 mo
278.292 843.518 310.87 833.214 344.316 824.764 cv
371.772 817.826 401.735 809.849 421.846 788.534 cv
441.027 768.205 445.765 739.843 438.987 713.277 cv
431.824 685.208 413.703 661.372 390.075 645.034 cv
373.978 633.903 356.059 626.038 337.539 619.816 cv
336.409 620.971 335.271 622.116 334.129 623.247 cv
332.121 625.235 330.103 627.213 328.091 629.197 cv
322.3 634.91 316.503 640.618 310.709 646.327 cv
264.348 692.014 li
235.355 720.585 205.247 748.391 177.771 778.441 cv
168.505 788.575 159.417 799.365 151.478 810.885 cv
151.478 916.984 li
153.613 915.197 155.768 913.474 157.909 911.828 cv
185.404 890.694 215.561 872.783 246.97 858.131 cv
cp
1 .733333 .32549 rgb
f
162.694 1141.61 mo
158.952 1140.91 155.213 1140.2 151.478 1139.48 cv
151.478 1171.84 li
151.478 1179.55 li
151.478 1181.29 li
151.478 1185.85 li
151.478 1186.31 li
161.055 1173.14 168.91 1158.88 174.51 1143.83 cv
170.57 1143.09 166.631 1142.35 162.694 1141.61 cv
cp
0 .756863 .733333 rgb
f
151.478 322.917 mo
151.478 323.072 li
151.491 323.021 151.504 322.972 151.517 322.921 cv
151.504 322.92 151.491 322.918 151.478 322.917 cv
cp
.121569 .0862745 .0862745 rgb
f
229.769 322.542 mo
223.234 311.928 li
221.084 312.807 218.913 313.629 216.731 314.418 cv
218.483 318.162 220.307 321.868 222.195 325.54 cv
224.724 324.549 227.254 323.563 229.769 322.542 cv
cp
f
179.897 263.754 mo
194.388 266.672 208.264 273.342 219.946 283.824 cv
207.324 294.479 192.363 300.92 176.922 303.184 cv
183.637 298.667 188.056 290.998 188.056 282.296 cv
188.056 274.957 184.911 268.353 179.897 263.754 cv
cp
169.513 311.818 mo
185.904 311.338 201.849 307.676 216.934 301.695 cv
216.712 301.333 li
221.928 298.022 226.848 294.226 231.376 289.968 cv
238.466 284.458 li
236.762 282.883 li
232.338 278.761 li
214.468 263.721 192.04 254.301 168.536 253.009 cv
162.825 252.694 157.123 252.87 151.478 253.467 cv
151.478 311.01 li
157.456 311.718 163.49 311.994 169.513 311.818 cv
cp
f
174.216 241.625 mo
176.437 241.856 178.646 242.155 180.845 242.509 cv
182.213 235.786 183.58 229.063 184.948 222.339 cv
182.997 221.969 181.043 221.623 179.082 221.332 cv
177.46 228.096 175.838 234.861 174.216 241.625 cv
cp
f
178.871 339.716 mo
177.408 334.329 176.175 328.88 175.171 323.367 cv
173.256 323.499 171.337 323.595 169.413 323.648 cv
170.432 329.357 171.452 335.067 172.471 340.776 cv
174.603 340.412 176.736 340.056 178.871 339.716 cv
cp
f
209.354 250.808 mo
211.468 251.715 213.553 252.688 215.612 253.713 cv
218.292 248.441 221.232 243.33 224.464 238.392 cv
222.482 237.738 220.482 237.133 218.518 236.45 cv
215.695 241.4 212.626 246.171 209.354 250.808 cv
cp
f
791.288 1035.82 mo
791.184 1035.57 791.067 1035.33 790.948 1035.1 cv
789.851 1029.72 786.764 1025.68 780.099 1025.57 cv
766.56 1025.36 762.419 1042.77 763.77 1053.25 cv
764.472 1058.7 765.83 1065.73 769.022 1070.36 cv
773.004 1076.14 780.273 1076.2 785.801 1072.68 cv
798.958 1064.28 796.355 1048.08 791.288 1035.82 cv
cp
.984314 .960784 .92549 rgb
f
732.131 1122.36 mo
727.971 1125.5 725.497 1130.6 724.197 1135.55 cv
721.992 1143.94 723.602 1162.65 736.344 1160.49 cv
741.147 1159.67 744.637 1155.94 746.927 1151.31 cv
747.051 1151.2 747.176 1151.09 747.297 1150.97 cv
753.515 1144.53 754.905 1129.21 747.896 1122.67 cv
743.354 1118.44 736.887 1118.77 732.131 1122.36 cv
cp
f
727.504 1073.9 mo
728.075 1071.8 728.319 1069.33 728.308 1066.8 cv
728.403 1065.94 728.457 1065.09 728.414 1064.29 cv
728.365 1063.39 728.191 1062.48 727.917 1061.6 cv
727.628 1059.59 727.2 1057.67 726.626 1056.01 cv
723.884 1048.11 714.513 1047.1 708.808 1052.34 cv
704.689 1056.12 702.97 1061.4 702.527 1066.84 cv
702.136 1071.63 702.276 1077.69 704.96 1081.84 cv
709.572 1088.97 719.202 1087.17 723.231 1080.57 cv
723.242 1080.55 723.254 1080.53 723.265 1080.51 cv
725.268 1078.8 726.809 1076.45 727.504 1073.9 cv
cp
f
661.839 1110.78 mo
656.792 1112.19 653.586 1117.14 652.778 1122.1 cv
651.708 1128.67 651.417 1141.1 657.405 1145.47 cv
660.432 1148.72 665.73 1149.92 669.602 1145.69 cv
675.9 1138.8 679.108 1128.24 675.972 1119.16 cv
673.954 1113.32 668.172 1109 661.839 1110.78 cv
cp
f
696.135 1195.86 mo
692.124 1194.34 686.851 1194.87 684.837 1199.38 cv
684.337 1200.51 683.908 1201.63 683.547 1202.77 cv
682.87 1203.84 682.328 1205.01 681.964 1206.26 cv
680.765 1210.36 680.088 1215.94 680.926 1220.13 cv
681.777 1224.38 684.731 1227.83 688.69 1228.99 cv
691.358 1230.52 694.844 1230.18 697.506 1228.5 cv
701.167 1228.78 704.863 1226.91 705.774 1222.23 cv
707.053 1215.67 706.937 1207.37 702.838 1202.17 cv
701.479 1199.37 699.323 1197.07 696.135 1195.86 cv
cp
f
801.419 1105.89 mo
788.89 1109.63 793.596 1126.75 797.735 1135.07 cv
800.012 1139.65 807.943 1140.23 810.959 1136.18 cv
813.872 1132.27 816.451 1126.25 816.805 1120.53 cv
817.221 1117.68 816.967 1114.8 815.427 1111.99 cv
812.779 1107.16 806.853 1104.26 801.419 1105.89 cv
cp
f
359.047 453.581 mo
353.986 463.631 359.334 476.115 372.637 477.163 cv
374.136 477.281 375.671 477.232 377.193 477.042 cv
383.542 477.376 389.917 474.188 393.42 469.458 cv
398.04 463.221 396.282 455.314 390.81 450.044 cv
381.271 440.856 364.999 441.761 359.047 453.581 cv
cp
1 .733333 .32549 rgb
f
372.357 424.902 mo
373.857 425.021 375.392 424.972 376.914 424.782 cv
383.263 425.116 389.637 421.928 393.142 417.197 cv
397.761 410.96 396.003 403.054 390.531 397.784 cv
380.993 388.597 364.72 389.5 358.768 401.321 cv
353.708 411.371 359.056 423.854 372.357 424.902 cv
cp
f
372.077 372.359 mo
373.577 372.478 375.112 372.429 376.633 372.239 cv
382.982 372.573 389.357 369.385 392.861 364.654 cv
397.48 358.417 395.723 350.511 390.25 345.241 cv
380.712 336.053 364.439 336.958 358.487 348.778 cv
353.427 358.828 358.775 371.312 372.077 372.359 cv
cp
f
2508.23 293.844 mo
2507.53 309.33 2507.5 324.883 2509.5 340.157 cv
2542.75 337.804 2576.07 336.032 2609.44 334.846 cv
2610.84 331.702 2613.47 329.56 2617.99 329.487 cv
2622.24 329.418 2625.42 331.343 2627.71 334.254 cv
2643.94 333.781 2660.19 333.46 2676.45 333.261 cv
2676.45 328.404 li
2676.45 279.535 li
2655.8 281.199 2635.17 283.069 2614.52 284.822 cv
2579.09 287.83 2543.66 290.837 2508.23 293.844 cv
cp
f
2667.69 377.555 mo
2667.68 377.539 2667.67 377.52 2667.66 377.503 cv
2665.91 376.015 2664.57 373.954 2663.96 371.725 cv
2663.87 371.412 2663.81 371.079 2663.74 370.749 cv
2650.52 370.992 2637.31 371.333 2624.11 371.759 cv
2621.58 373.014 2618.6 373.02 2615.81 372.033 cv
2583.68 373.161 2551.59 374.832 2519.57 377.035 cv
2528.59 396.782 2543.17 413.099 2561.87 424.846 cv
2571 424.337 2580.14 423.882 2589.28 423.46 cv
2587.51 420.273 2586.14 416.307 2585.9 412.487 cv
2585.54 409.992 2585.76 407.479 2587.11 405.024 cv
2589.42 400.803 2594.6 398.27 2599.35 399.687 cv
2609.22 402.633 2606.85 415.081 2603.64 422.834 cv
2616.57 422.304 2629.5 421.861 2642.45 421.505 cv
2643.02 418.687 2644.22 416.146 2646.13 414.358 cv
2650.1 410.658 2655.76 410.948 2659.91 414.085 cv
2662.24 415.838 2663.95 418.294 2665.19 420.964 cv
2668.94 420.891 2672.69 420.846 2676.45 420.787 cv
2676.45 400.226 li
2676.45 395.479 li
2676.45 382.66 li
2673.08 382.642 2669.64 380.744 2667.69 377.555 cv
cp
f
2625.05 92.2095 mo
2620.63 92.2095 li
2593.85 92.2095 li
2476.29 92.2095 li
2470.03 92.2095 li
2464.9 92.2095 li
2465.79 93.1841 2466.67 94.1694 2467.54 95.1738 cv
2471.23 99.4395 2474.73 103.882 2478.02 108.471 cv
2490.29 125.584 2499.63 144.811 2505.2 165.128 cv
2505.76 167.207 2506.31 169.293 2506.8 171.395 cv
2509.16 181.564 2510.52 191.854 2511.22 202.2 cv
2512.42 220.052 2511.65 238.072 2510.55 255.947 cv
2565.81 250.852 2621.04 244.961 2676.45 240.92 cv
2676.45 231.531 li
2676.45 228.199 li
2676.45 221.048 li
2676.45 124.739 li
2676.45 92.2095 li
2625.05 92.2095 li
cp
f
2010.43 1071.44 mo
2007.6 1075.14 2000.41 1074.29 1998.41 1070.15 cv
1996.48 1066.15 1995.22 1060.32 1995.89 1055.14 cv
1996.01 1052.52 1996.73 1049.99 1998.59 1047.74 cv
2001.79 1043.88 2007.59 1042.31 2012.17 1044.7 cv
2022.73 1050.21 2015.57 1064.71 2010.43 1071.44 cv
cp
2155.32 1177.11 mo
2174.83 1168.84 2195.18 1164.19 2216.28 1162.44 cv
2239.89 1160.48 2263.63 1161.32 2287.26 1159.75 cv
2288.47 1159.67 2289.69 1159.56 2290.9 1159.47 cv
2301.62 1158.68 2312.31 1157.58 2322.96 1156.16 cv
2275.22 1138.07 2222.29 1143.49 2172.21 1136.51 cv
2158.69 1134.63 2144.6 1131.62 2131.04 1127.1 cv
2125.64 1125.3 2120.33 1123.26 2115.17 1120.95 cv
2087.89 1108.76 2064.96 1089.17 2056.81 1058.44 cv
2040.32 996.258 2084.14 942.349 2106.59 888.381 cv
2116.95 863.477 2123.45 832.819 2107.72 808.604 cv
2092.92 785.827 2064.53 776.755 2038.47 777.825 cv
2006.96 779.12 1975.68 790.931 1946.03 800.817 cv
1928.89 806.533 1911.88 812.646 1895 819.109 cv
1895 942.754 li
1909.65 953.955 1926.57 961.897 1941.13 973.278 cv
1944.33 975.786 1947.38 978.461 1950.28 981.261 cv
1951.18 977.605 1952.8 974.184 1955.43 971.911 cv
1957.13 969.643 1959.45 967.961 1962.51 967.429 cv
1966.36 966.759 1970.99 968.142 1972.01 972.53 cv
1972.26 973.619 1972.45 974.703 1972.58 975.78 cv
1973 976.852 1973.28 977.994 1973.39 979.173 cv
1973.76 983.05 1973.4 988.159 1971.93 991.759 cv
1970.61 994.978 1967.95 997.351 1964.78 998.116 cv
1978 1016.57 1986.32 1038.5 1989.68 1061.08 cv
1992.24 1078.29 1992.23 1095.66 1989.83 1112.71 cv
1989.88 1113.27 1989.9 1113.84 1989.88 1114.39 cv
1989.77 1118.21 1988.98 1124.05 1986.88 1128.58 cv
1984.11 1140.59 1980.17 1152.37 1975.07 1163.71 cv
1958.69 1200.1 1932.25 1231.18 1902.6 1257.51 cv
1900.1 1259.74 1897.56 1261.93 1895 1264.09 cv
1895 1304.36 li
1895 1307.79 li
1898.1 1307.79 li
1901.96 1307.79 li
1906.59 1307.79 li
1908.63 1307.79 li
1918.87 1307.79 li
1923.48 1307.79 li
1923.63 1307.79 li
1932.6 1307.79 li
1939.83 1307.79 li
1951.74 1307.79 li
1956.91 1307.79 li
2007.96 1307.79 li
2008.9 1307.79 li
2050.29 1255.83 2092.87 1203.6 2155.32 1177.11 cv
cp
.835294 .937255 .945098 rgb
f
2359.36 587.595 mo
2314.78 537.054 2330.25 466.828 2331.59 405.687 cv
2332.29 374.148 2328.44 343.224 2314.19 314.712 cv
2309.47 305.256 2303.85 296.255 2297.48 287.841 cv
2287.89 290.575 2278.3 293.31 2268.72 296.043 cv
2281.82 319.99 2294.93 343.937 2308.03 367.883 cv
2310.76 372.863 2305.01 379.682 2299.79 376.126 cv
2282.4 364.28 2265.01 352.434 2247.63 340.588 cv
2246.9 345.08 2246.17 349.571 2245.44 354.063 cv
2244.74 358.337 2244.74 364.39 2242.75 368.67 cv
2242.53 369.992 2242.31 371.314 2242.09 372.636 cv
2242.18 373.338 2242.19 374.061 2242.07 374.783 cv
2241.13 380.575 2240.19 386.367 2239.25 392.16 cv
2239.19 392.486 2239.11 392.787 2239.02 393.072 cv
2239.17 396.849 2237.73 401.516 2237.25 404.432 cv
2236.46 409.34 2235.66 414.248 2234.86 419.156 cv
2233.84 425.433 2224.9 424.317 2223.24 419.156 cv
2220.92 411.918 2218.59 404.68 2216.26 397.442 cv
2208.62 373.671 2200.99 349.898 2193.35 326.125 cv
2172.07 336.488 2150.8 346.851 2129.52 357.213 cv
2123.48 360.16 2117.32 352.842 2122.22 347.751 cv
2137.45 331.927 2152.68 316.104 2167.9 300.28 cv
2139 294.163 2110.1 288.047 2081.21 281.931 cv
2075.65 280.755 2075.27 271.166 2081.21 270.312 cv
2085.58 269.683 2089.96 269.053 2094.34 268.424 cv
2122.08 264.435 2149.83 260.445 2177.57 256.456 cv
2171.86 243.132 2166.19 229.792 2160.53 216.444 cv
2127.86 211.299 2094.29 209.373 2062.22 204.624 cv
2044.27 201.966 2026.01 198.263 2008.37 192.895 cv
2014.47 221.82 2020.57 250.746 2026.67 279.671 cv
2043.41 359.077 2060.15 438.481 2076.9 517.887 cv
2089.44 521.437 2101.22 527.448 2111.29 536.249 cv
2131.8 554.188 2141.21 583.037 2138.28 609.782 cv
2137.59 616.086 2136.18 622.115 2134.21 627.864 cv
2133.38 630.969 2132.37 634.016 2131.16 636.971 cv
2129.02 642.216 2126.38 647.116 2123.36 651.679 cv
2123.15 652.142 2122.9 652.606 2122.58 653.074 cv
2119.18 658.032 2115.31 662.449 2111.06 666.351 cv
2096.09 680.559 2076.38 688.887 2056.03 689.545 cv
2043.16 691.238 2029.88 690.39 2017.03 686.521 cv
2005.8 683.143 1995.17 677.67 1985.95 670.48 cv
1973.41 661.921 1963.02 650.566 1956.42 636.686 cv
1953.08 629.671 1950.66 622.272 1949.23 614.739 cv
1931.16 598.811 1913.08 582.883 1895 566.955 cv
1895 583.936 li
1895 658.33 li
1903.21 666.08 1910.91 674.332 1917.26 683.677 cv
1928.15 699.706 1932.74 718.413 1929.35 737.571 cv
1926.06 756.147 1915.9 772.928 1905.62 788.415 cv
1902.15 793.646 1898.55 798.824 1895 804.039 cv
1895 819.109 li
1911.88 812.646 1928.89 806.533 1946.03 800.817 cv
1975.68 790.931 2006.96 779.12 2038.47 777.825 cv
2064.53 776.755 2092.92 785.827 2107.72 808.604 cv
2123.45 832.819 2116.95 863.477 2106.59 888.381 cv
2084.14 942.349 2040.32 996.258 2056.81 1058.44 cv
2064.96 1089.17 2087.89 1108.76 2115.17 1120.95 cv
2120.33 1123.26 2125.64 1125.3 2131.04 1127.1 cv
2144.6 1131.62 2158.69 1134.63 2172.21 1136.51 cv
2222.29 1143.49 2275.22 1138.07 2322.96 1156.16 cv
2358.06 1151.47 2392.71 1143.5 2426.6 1133.28 cv
2428.25 1132.79 2429.89 1132.28 2431.54 1131.77 cv
2435.58 1130.52 2439.62 1129.24 2443.66 1127.93 cv
2471.64 1118.84 2499.81 1108.41 2528.26 1099.52 cv
2540.47 1095.7 2552.72 1092.17 2565.04 1089.16 cv
2570.11 1087.91 2575.19 1086.76 2580.28 1085.7 cv
2584.31 1084.87 2588.35 1084.1 2592.4 1083.4 cv
2620.03 1078.63 2648.01 1077.23 2676.45 1081.69 cv
2676.45 1072.01 li
2676.45 1031.74 li
2676.45 955.144 li
2676.45 949.403 li
2676.45 943.186 li
2676.45 937.36 li
2676.45 934.005 li
2676.45 929.966 li
2676.45 698.577 li
2676.45 638.471 li
2676.45 633.969 li
2676.45 587.61 li
2631.62 598.293 2587.93 616.438 2543.41 626.572 cv
2480.75 640.833 2405.22 639.595 2359.36 587.595 cv
cp
.984314 .960784 .92549 rgb
f
2030.22 515.218 mo
2041.39 513.565 2052.86 513.474 2064 515.127 cv
2068.36 515.774 2072.67 516.69 2076.9 517.887 cv
2060.15 438.481 2043.41 359.077 2026.67 279.671 cv
2020.57 250.746 2014.47 221.82 2008.37 192.895 cv
2003.91 191.538 1999.49 190.068 1995.12 188.487 cv
1960.65 176.012 1929.51 156.257 1908.98 124.165 cv
1903.33 115.332 1898.69 105.978 1895 96.2725 cv
1895 98.0762 li
1895 162.292 li
1895 166.677 li
1895 356.118 li
1928.14 413.069 1961.29 470.021 1994.43 526.972 cv
2005.59 521.037 2017.83 517.051 2030.22 515.218 cv
cp
.6 .882353 .898039 rgb
f
1995.12 188.487 mo
1999.49 190.068 2003.91 191.538 2008.37 192.895 cv
2007.45 188.531 2006.53 184.167 2005.61 179.804 cv
1999.45 150.605 1993.29 121.408 1987.14 92.2095 cv
1898.17 92.2095 li
1895 92.2095 li
1895 96.2725 li
1898.69 105.978 1903.33 115.332 1908.98 124.165 cv
1929.51 156.257 1960.65 176.012 1995.12 188.487 cv
cp
0 .756863 .733333 rgb
f
2656.23 447.414 mo
2655.41 447.274 2654.64 447.011 2653.91 446.688 cv
2623.92 447.959 2594.33 443.271 2567 427.906 cv
2565.26 426.925 2563.55 425.902 2561.87 424.846 cv
2543.17 413.099 2528.59 396.782 2519.57 377.035 cv
2517.01 371.445 2514.88 365.596 2513.25 359.48 cv
2511.55 353.109 2510.35 346.657 2509.5 340.157 cv
2507.5 324.883 2507.53 309.33 2508.23 293.844 cv
2508.65 284.383 2509.33 274.948 2509.93 265.62 cv
2510.14 262.402 2510.35 259.177 2510.55 255.947 cv
2511.65 238.072 2512.42 220.052 2511.22 202.2 cv
2510.52 191.854 2509.16 181.564 2506.8 171.395 cv
2506.31 169.293 2505.76 167.207 2505.2 165.128 cv
2499.63 144.811 2490.29 125.584 2478.02 108.471 cv
2474.73 103.882 2471.23 99.4395 2467.54 95.1738 cv
2466.67 94.1694 2465.79 93.1841 2464.9 92.2095 cv
2373.45 92.2095 li
2368.6 92.2095 li
2149.04 92.2095 li
2143.79 92.2095 li
1994.44 92.2095 li
1988.33 92.2095 li
1987.14 92.2095 li
1993.29 121.408 1999.45 150.605 2005.61 179.804 cv
2006.53 184.167 2007.45 188.531 2008.37 192.895 cv
2026.01 198.263 2044.27 201.966 2062.22 204.624 cv
2094.29 209.373 2127.86 211.299 2160.53 216.444 cv
2155.22 203.898 2149.93 191.345 2144.64 178.79 cv
2142.04 172.633 2150.69 169.575 2154.71 172.928 cv
2170.13 185.806 2185.56 198.683 2200.99 211.561 cv
2207.91 185.43 2214.89 159.317 2221.93 133.218 cv
2223.42 127.664 2232.26 127.296 2233.54 133.218 cv
2238.61 156.6 2243.68 179.981 2248.75 203.363 cv
2248.78 203.525 2248.8 203.688 2248.82 203.85 cv
2248.86 203.985 2248.91 204.106 2248.94 204.25 cv
2250.3 210.546 2251.67 216.843 2253.03 223.139 cv
2271.75 211.22 2290.48 199.301 2309.2 187.381 cv
2314.06 184.284 2321.05 190.681 2317.44 195.625 cv
2304.5 213.324 2291.57 231.023 2278.63 248.723 cv
2306.85 251.409 2335.07 254.095 2363.29 256.782 cv
2369.62 257.385 2371.59 266.059 2365.49 268.387 cv
2365.29 268.464 2365.11 268.554 2364.89 268.616 cv
2360.61 269.837 2356.33 271.057 2352.05 272.278 cv
2347.88 273.465 2343.72 274.652 2339.56 275.839 cv
2325.53 279.84 2311.5 283.841 2297.48 287.841 cv
2303.85 296.255 2309.47 305.256 2314.19 314.712 cv
2328.44 343.224 2332.29 374.148 2331.59 405.687 cv
2330.25 466.828 2314.78 537.054 2359.36 587.595 cv
2405.22 639.595 2480.75 640.833 2543.41 626.572 cv
2587.93 616.438 2631.62 598.293 2676.45 587.61 cv
2676.45 497.024 li
2676.45 492.091 li
2676.45 486.269 li
2676.45 475.165 li
2676.45 444.695 li
2671.76 445.311 2667.08 445.813 2662.4 446.179 cv
2660.8 447.321 2658.77 447.846 2656.23 447.414 cv
cp
.478431 .729412 .890196 rgb
f
1947.76 597.379 mo
1948.04 582.993 1952.14 568.791 1960.67 556.443 cv
1966.98 547.293 1975.03 539.54 1984.14 533.241 cv
1987.44 530.956 1990.88 528.862 1994.43 526.972 cv
1961.29 470.021 1928.14 413.069 1895 356.118 cv
1895 375.859 li
1895 383.832 li
1895 439.519 li
1895 535.803 li
1895 542.533 li
1895 561.245 li
1895 566.955 li
1913.08 582.883 1931.16 598.811 1949.23 614.739 cv
1948.15 608.995 1947.64 603.173 1947.76 597.379 cv
cp
.996078 .815686 .898039 rgb
f
2069.21 600.137 mo
2069.7 598.237 2070.15 596.324 2070.55 594.399 cv
2070.82 593.132 2071.83 592.593 2072.83 592.629 cv
2073.69 592.661 2074.55 593.115 2074.92 593.896 cv
2075.1 594.287 2075.17 594.76 2075.06 595.302 cv
2074.53 597.826 2073.92 600.334 2073.24 602.821 cv
2072.21 606.551 2071.01 610.233 2069.63 613.848 cv
2068.25 617.463 2066.7 621.011 2064.97 624.474 cv
2063.5 627.409 2061.81 630.203 2059.71 632.499 cv
2059.11 633.154 2058.47 633.77 2057.8 634.336 cv
2057.13 634.902 2056.42 635.419 2055.67 635.879 cv
2054.91 636.338 2054.12 636.741 2053.28 637.077 cv
2052.86 637.246 2052.43 637.397 2051.98 637.532 cv
2051.09 637.8 2050.15 637.999 2049.16 638.12 cv
2048.33 638.221 2047.5 638.259 2046.68 638.236 cv
2045.85 638.214 2045.04 638.132 2044.23 637.992 cv
2039.42 637.154 2035.08 634.256 2032.52 629.944 cv
2032.05 629.168 2031.65 628.371 2031.29 627.557 cv
2031.11 627.149 2030.94 626.738 2030.78 626.323 cv
2030.47 625.493 2030.21 624.646 2029.98 623.789 cv
2029.53 622.073 2029.24 620.311 2029.07 618.53 cv
2028.98 617.641 2028.93 616.746 2028.9 615.851 cv
2028.86 614.955 2028.86 614.059 2028.87 613.166 cv
2028.88 612.271 2028.9 611.381 2028.95 610.497 cv
2028.97 610.055 2028.99 609.615 2029.02 609.176 cv
2029.09 608.029 2029.18 606.885 2029.28 605.743 cv
2029.5 603.458 2029.78 601.184 2030.12 598.917 cv
2030.46 596.65 2030.85 594.392 2031.28 592.141 cv
2031.93 588.763 2032.67 585.4 2033.44 582.047 cv
2033.65 581.148 2034.23 580.617 2034.91 580.401 cv
2036.01 580.055 2037.35 580.513 2037.83 581.551 cv
2037.95 581.81 2038.02 582.105 2038.01 582.434 cv
2038.01 582.598 2037.99 582.771 2037.94 582.95 cv
2037.69 584.052 2037.44 585.154 2037.19 586.259 cv
2036.45 589.573 2035.76 592.903 2035.17 596.25 cv
2034.78 598.481 2034.44 600.721 2034.16 602.967 cv
2033.88 605.214 2033.67 607.468 2033.55 609.73 cv
2033.51 610.461 2033.47 611.204 2033.45 611.955 cv
2033.42 612.706 2033.41 613.465 2033.41 614.227 cv
2033.42 615.371 2033.46 616.521 2033.55 617.667 cv
2033.62 618.43 2033.7 619.189 2033.82 619.942 cv
2033.99 621.072 2034.23 622.185 2034.56 623.268 cv
2034.77 623.989 2035.03 624.697 2035.32 625.387 cv
2035.62 626.077 2035.95 626.749 2036.34 627.399 cv
2036.62 627.875 2036.93 628.328 2037.26 628.756 cv
2038.26 630.039 2039.47 631.098 2040.82 631.898 cv
2041.72 632.433 2042.68 632.852 2043.68 633.146 cv
2044.68 633.441 2045.72 633.612 2046.78 633.647 cv
2047.48 633.671 2048.19 633.635 2048.91 633.536 cv
2049.62 633.438 2050.33 633.276 2051.04 633.048 cv
2052.75 632.503 2054.21 631.591 2055.49 630.436 cv
2056.13 629.858 2056.73 629.22 2057.28 628.537 cv
2057.84 627.853 2058.35 627.124 2058.84 626.366 cv
2059.32 625.607 2059.77 624.819 2060.19 624.017 cv
2061.46 621.609 2062.49 619.074 2063.47 616.828 cv
2063.86 615.926 2064.24 615.019 2064.61 614.108 cv
2066.45 609.552 2067.97 604.887 2069.21 600.137 cv
cp
2016.54 597.56 mo
2016.22 598.122 2015.83 598.644 2015.39 599.11 cv
2015.17 599.343 2014.93 599.562 2014.69 599.766 cv
2014.24 600.135 2013.74 600.444 2013.22 600.699 cv
2012.9 600.852 2012.58 600.984 2012.25 601.091 cv
2011.91 601.197 2011.57 601.279 2011.22 601.33 cv
2010.9 601.377 2010.57 601.401 2010.24 601.4 cv
2009.57 601.397 2008.89 601.293 2008.21 601.074 cv
2007.22 600.757 2006.42 600.263 2005.79 599.646 cv
2004.73 598.617 2004.15 597.245 2003.98 595.78 cv
2003.91 595.194 2003.91 594.593 2003.97 593.993 cv
2004.16 592.192 2004.91 590.401 2006.11 589.049 cv
2006.3 588.783 2006.5 588.542 2006.71 588.325 cv
2007.14 587.892 2007.61 587.556 2008.12 587.31 cv
2009.62 586.573 2011.4 586.646 2013.01 587.323 cv
2013.54 587.548 2014.06 587.841 2014.54 588.192 cv
2014.78 588.368 2015.01 588.559 2015.22 588.764 cv
2015.66 589.173 2016.06 589.637 2016.39 590.149 cv
2016.72 590.661 2016.99 591.221 2017.18 591.821 cv
2017.29 592.155 2017.37 592.49 2017.42 592.825 cv
2017.44 592.924 2017.44 593.023 2017.45 593.123 cv
2017.64 594.693 2017.29 596.238 2016.54 597.56 cv
cp
2082.79 615.379 mo
2082.91 614.784 2083.09 614.198 2083.33 613.637 cv
2083.7 612.795 2084.18 612.009 2084.79 611.333 cv
2084.98 611.066 2085.18 610.825 2085.39 610.608 cv
2085.81 610.175 2086.29 609.839 2086.79 609.594 cv
2087.04 609.471 2087.3 609.37 2087.56 609.292 cv
2088.09 609.134 2088.64 609.063 2089.2 609.07 cv
2089.48 609.074 2089.76 609.097 2090.04 609.139 cv
2090.59 609.223 2091.15 609.381 2091.68 609.606 cv
2092.48 609.944 2093.24 610.434 2093.9 611.047 cv
2094.34 611.456 2094.73 611.92 2095.06 612.433 cv
2095.39 612.945 2095.66 613.504 2095.86 614.104 cv
2095.96 614.438 2096.04 614.773 2096.1 615.108 cv
2096.32 616.446 2096.13 617.774 2095.64 618.972 cv
2095.39 619.57 2095.07 620.136 2094.69 620.654 cv
2093.73 621.949 2092.38 622.945 2090.84 623.404 cv
2090.22 623.588 2089.58 623.686 2088.91 623.684 cv
2088.25 623.681 2087.57 623.577 2086.88 623.357 cv
2083.27 622.196 2082.11 618.652 2082.79 615.379 cv
cp
2030.22 515.218 mo
2017.83 517.051 2005.59 521.037 1994.43 526.972 cv
1990.88 528.862 1987.44 530.956 1984.14 533.241 cv
1975.03 539.54 1966.98 547.293 1960.67 556.443 cv
1952.14 568.791 1948.04 582.993 1947.76 597.379 cv
1947.64 603.173 1948.15 608.995 1949.23 614.739 cv
1950.66 622.272 1953.08 629.671 1956.42 636.686 cv
1963.02 650.566 1973.41 661.921 1985.95 670.48 cv
1995.17 677.67 2005.8 683.143 2017.03 686.521 cv
2029.88 690.39 2043.16 691.238 2056.03 689.545 cv
2076.38 688.887 2096.09 680.559 2111.06 666.351 cv
2115.31 662.449 2119.18 658.032 2122.58 653.074 cv
2122.9 652.606 2123.15 652.142 2123.36 651.679 cv
2126.38 647.116 2129.02 642.216 2131.16 636.971 cv
2132.37 634.016 2133.38 630.969 2134.21 627.864 cv
2136.18 622.115 2137.59 616.086 2138.28 609.782 cv
2141.21 583.037 2131.8 554.188 2111.29 536.249 cv
2101.22 527.448 2089.44 521.437 2076.9 517.887 cv
2072.67 516.69 2068.36 515.774 2064 515.127 cv
2052.86 513.474 2041.39 513.565 2030.22 515.218 cv
cp
1 .733333 .32549 rgb
f
1900.37 1123.89 mo
1895.92 1117.06 1897.32 1103.12 1904.72 1098.48 cv
1909.51 1095.48 1915.24 1096.89 1918.87 1100.92 cv
1922.05 1104.45 1923.38 1109.44 1923.69 1114.09 cv
1924.21 1121.98 1919.54 1138.43 1908.52 1134.3 cv
1904.37 1132.74 1901.89 1128.8 1900.64 1124.27 cv
1900.55 1124.14 1900.46 1124.02 1900.37 1123.89 cv
cp
1931.29 1177.36 mo
1932.99 1175.09 1935.32 1173.41 1938.38 1172.87 cv
1942.23 1172.2 1946.85 1173.59 1947.87 1177.97 cv
1948.13 1179.06 1948.31 1180.15 1948.44 1181.22 cv
1948.86 1182.3 1949.15 1183.44 1949.26 1184.62 cv
1949.62 1188.49 1949.26 1193.6 1947.79 1197.2 cv
1946.29 1200.86 1943.06 1203.43 1939.32 1203.79 cv
1936.67 1204.69 1933.61 1203.79 1931.52 1201.83 cv
1928.19 1201.45 1925.21 1199.14 1925.2 1194.79 cv
1925.19 1188.7 1926.73 1181.3 1931.29 1177.36 cv
cp
1931.88 1051.9 mo
1931.95 1051.11 1932.04 1050.34 1932.22 1049.64 cv
1932.42 1048.83 1932.73 1048.05 1933.13 1047.31 cv
1933.73 1045.57 1934.45 1043.92 1935.25 1042.54 cv
1939.07 1035.94 1947.62 1036.66 1951.82 1042.33 cv
1954.85 1046.42 1955.47 1051.44 1954.93 1056.38 cv
1954.45 1060.74 1953.28 1066.13 1950.17 1069.38 cv
1944.81 1074.96 1936.51 1071.69 1934.05 1065.08 cv
1934.04 1065.07 1934.03 1065.04 1934.03 1065.03 cv
1932.53 1063.16 1931.56 1060.78 1931.38 1058.38 cv
1931.23 1056.41 1931.43 1054.16 1931.88 1051.9 cv
cp
1975.07 1163.71 mo
1980.17 1152.37 1984.11 1140.59 1986.88 1128.58 cv
1985.65 1131.23 1983.97 1133.43 1981.71 1134.49 cv
1978.44 1136.88 1973.5 1137.04 1970.77 1132.58 cv
1966.32 1125.34 1965.28 1115.34 1969.65 1107.76 cv
1972.46 1102.88 1978.38 1100.02 1983.74 1102.7 cv
1987.49 1104.58 1989.49 1108.65 1989.83 1112.71 cv
1992.23 1095.66 1992.24 1078.29 1989.68 1061.08 cv
1986.32 1038.5 1978 1016.57 1964.78 998.116 cv
1964.34 998.221 1963.9 998.299 1963.45 998.342 cv
1960.8 999.248 1957.74 998.345 1955.65 996.384 cv
1952.33 996.002 1949.35 993.692 1949.34 989.35 cv
1949.33 986.767 1949.61 983.951 1950.28 981.261 cv
1947.38 978.461 1944.33 975.786 1941.13 973.278 cv
1926.57 961.897 1909.65 953.955 1895 942.754 cv
1895 1006.72 li
1904.9 1010.42 1905.32 1025.14 1902.5 1033.66 cv
1900.96 1038.34 1898.57 1044.29 1895 1047.9 cv
1895 1056.63 li
1895 1057.7 li
1895 1069.71 li
1895 1074.37 li
1895 1082.28 li
1895 1093.97 li
1895 1121.64 li
1895 1126.26 li
1895 1130.53 li
1895 1136.24 li
1895 1171.84 li
1895 1179.55 li
1895 1181.29 li
1895 1185.85 li
1895 1190.96 li
1895 1196.87 li
1895 1255.11 li
1895 1262.14 li
1895 1264.09 li
1897.56 1261.93 1900.1 1259.74 1902.6 1257.51 cv
1932.25 1231.18 1958.69 1200.1 1975.07 1163.71 cv
cp
.92549 .333333 .572549 rgb
f
1929.35 737.571 mo
1932.74 718.413 1928.15 699.706 1917.26 683.677 cv
1910.91 674.332 1903.21 666.08 1895 658.33 cv
1895 665.006 li
1895 671.931 li
1895 757.236 li
1895 779.13 li
1895 804.039 li
1898.55 798.824 1902.15 793.646 1905.62 788.415 cv
1915.9 772.928 1926.06 756.147 1929.35 737.571 cv
cp
1 .478431 .466667 rgb
f
2592.4 1083.4 mo
2592.36 1085.71 2592.32 1088.02 2592.28 1090.32 cv
2620.32 1091.47 2648.38 1092.47 2676.45 1093.37 cv
2676.45 1083.94 li
2676.45 1081.69 li
2648.01 1077.23 2620.03 1078.63 2592.4 1083.4 cv
cp
1 .807843 .847059 rgb
f
2578.08 1213.89 mo
2578.72 1176.54 2579.36 1139.2 2580 1101.85 cv
2562.75 1101.13 2545.5 1100.34 2528.26 1099.52 cv
2499.81 1108.41 2471.64 1118.84 2443.66 1127.93 cv
2443.43 1153.95 2443.3 1179.98 2443.27 1206.01 cv
2488.17 1208.84 2533.11 1211.47 2578.08 1213.89 cv
cp
f
2580.28 1085.7 mo
2575.19 1086.76 2570.11 1087.91 2565.04 1089.16 cv
2570.1 1089.38 2575.15 1089.61 2580.21 1089.82 cv
2580.23 1088.45 2580.25 1087.08 2580.28 1085.7 cv
cp
f
2392.81 1202.74 mo
2403.88 1203.49 2414.95 1204.22 2426.03 1204.93 cv
2427.74 1205.04 2429.46 1205.14 2431.17 1205.25 cv
2431.2 1180.76 2431.33 1156.26 2431.54 1131.77 cv
2429.89 1132.28 2428.25 1132.79 2426.6 1133.28 cv
2392.71 1143.5 2358.06 1151.47 2322.96 1156.16 cv
2328.68 1158.32 2334.33 1160.81 2339.89 1163.71 cv
2359.49 1173.96 2375.73 1188.92 2392.81 1202.74 cv
cp
f
2577.66 1237.91 mo
2577.73 1233.93 2577.8 1229.94 2577.87 1225.95 cv
2532.97 1223.53 2488.1 1220.91 2443.26 1218.08 cv
2443.26 1222.74 2443.28 1227.4 2443.29 1232.05 cv
2458.77 1237.13 2475.1 1239.51 2492.09 1240.02 cv
2520.64 1240.87 2549.12 1237.7 2577.66 1237.91 cv
cp
f
2591.99 1107.02 mo
2590.13 1214.54 li
2618.89 1216.06 2647.66 1217.49 2676.45 1218.85 cv
2676.45 1211.23 li
2676.45 1206.43 li
2676.45 1198.78 li
2676.45 1194.13 li
2676.45 1184.75 li
2676.45 1179.78 li
2676.45 1161.38 li
2676.45 1155.13 li
2676.45 1105.45 li
2648.31 1104.53 2620.18 1103.51 2592.07 1102.36 cv
2591.99 1107.02 li
cp
f
2431.16 1217.31 mo
2424.24 1216.87 2417.32 1216.42 2410.4 1215.98 cv
2417.11 1220.5 2424.04 1224.29 2431.17 1227.41 cv
2431.16 1224.04 2431.16 1220.67 2431.16 1217.31 cv
cp
f
2589.72 1238.23 mo
2616.04 1239.44 2642.25 1244.12 2667.35 1252.07 cv
2670.4 1253.03 2673.43 1254.05 2676.45 1255.11 cv
2676.45 1230.94 li
2647.59 1229.57 2618.75 1228.14 2589.92 1226.61 cv
2589.72 1238.23 li
cp
f
2589.72 1238.23 mo
2587.74 1238.14 2585.75 1238.06 2583.76 1238.01 cv
2581.73 1237.96 2579.7 1237.93 2577.66 1237.91 cv
2549.12 1237.7 2520.64 1240.87 2492.09 1240.02 cv
2475.1 1239.51 2458.77 1237.13 2443.29 1232.05 cv
2439.18 1230.71 2435.15 1229.15 2431.17 1227.41 cv
2424.04 1224.29 2417.11 1220.5 2410.4 1215.98 cv
2409.7 1215.5 2408.99 1215.05 2408.3 1214.57 cv
2402.99 1210.83 2397.86 1206.84 2392.81 1202.74 cv
2375.73 1188.92 2359.49 1173.96 2339.89 1163.71 cv
2334.33 1160.81 2328.68 1158.32 2322.96 1156.16 cv
2312.31 1157.58 2301.62 1158.68 2290.9 1159.47 cv
2289.69 1159.56 2288.47 1159.67 2287.26 1159.75 cv
2263.63 1161.32 2239.89 1160.48 2216.28 1162.44 cv
2195.18 1164.19 2174.83 1168.84 2155.32 1177.11 cv
2092.87 1203.6 2050.29 1255.83 2008.9 1307.79 cv
2013.9 1307.79 li
2074.87 1307.79 li
2087.43 1307.79 li
2089.12 1307.79 li
2089.29 1307.79 li
2093.46 1307.79 li
2093.64 1307.79 li
2107.15 1307.79 li
2113.45 1307.79 li
2191.02 1307.79 li
2209.93 1307.79 li
2226.99 1307.79 li
2240.89 1307.79 li
2251.97 1307.79 li
2258.43 1307.79 li
2336.03 1307.79 li
2341.66 1307.79 li
2353.64 1307.79 li
2360.02 1307.79 li
2363.88 1307.79 li
2368.51 1307.79 li
2380.79 1307.79 li
2385.4 1307.79 li
2394.52 1307.79 li
2401.75 1307.79 li
2413.66 1307.79 li
2418.83 1307.79 li
2469.88 1307.79 li
2475.83 1307.79 li
2484.56 1307.79 li
2489.29 1307.79 li
2490.07 1307.79 li
2497.79 1307.79 li
2505.15 1307.79 li
2536.79 1307.79 li
2549.35 1307.79 li
2569.07 1307.79 li
2575.37 1307.79 li
2652.94 1307.79 li
2671.85 1307.79 li
2676.45 1307.79 li
2676.45 1306.33 li
2676.45 1298.73 li
2676.45 1283.78 li
2676.45 1278.55 li
2676.45 1255.11 li
2673.43 1254.05 2670.4 1253.03 2667.35 1252.07 cv
2642.25 1244.12 2616.04 1239.44 2589.72 1238.23 cv
cp
0 .756863 .733333 rgb
f
2094.34 268.424 mo
2089.96 269.053 2085.58 269.683 2081.21 270.312 cv
2075.27 271.166 2075.65 280.755 2081.21 281.931 cv
2110.1 288.047 2139 294.163 2167.9 300.28 cv
2152.68 316.104 2137.45 331.927 2122.22 347.751 cv
2117.32 352.842 2123.48 360.16 2129.52 357.213 cv
2150.8 346.851 2172.07 336.488 2193.35 326.125 cv
2200.99 349.898 2208.62 373.671 2216.26 397.442 cv
2218.59 404.68 2220.92 411.918 2223.24 419.156 cv
2224.9 424.317 2233.84 425.433 2234.86 419.156 cv
2235.66 414.248 2236.46 409.34 2237.25 404.432 cv
2237.73 401.516 2239.17 396.849 2239.02 393.072 cv
2239.11 392.787 2239.19 392.486 2239.25 392.16 cv
2240.19 386.367 2241.13 380.575 2242.07 374.783 cv
2242.19 374.061 2242.18 373.338 2242.09 372.636 cv
2242.31 371.314 2242.53 369.992 2242.75 368.67 cv
2244.74 364.39 2244.74 358.337 2245.44 354.063 cv
2246.17 349.571 2246.9 345.08 2247.63 340.588 cv
2265.01 352.434 2282.4 364.28 2299.79 376.126 cv
2305.01 379.682 2310.76 372.863 2308.03 367.883 cv
2294.93 343.937 2281.82 319.99 2268.72 296.043 cv
2278.3 293.31 2287.89 290.575 2297.48 287.841 cv
2285.67 272.271 2271.21 258.746 2254.62 248.301 cv
2225.84 230.176 2193.65 221.657 2160.53 216.444 cv
2166.19 229.792 2171.86 243.132 2177.57 256.456 cv
2149.83 260.445 2122.08 264.435 2094.34 268.424 cv
cp
.996078 .815686 .898039 rgb
f
2297.48 287.841 mo
2311.5 283.841 2325.53 279.84 2339.56 275.839 cv
2343.72 274.652 2347.88 273.465 2352.05 272.278 cv
2356.33 271.057 2360.61 269.837 2364.89 268.616 cv
2365.11 268.554 2365.29 268.464 2365.49 268.387 cv
2371.59 266.059 2369.62 257.385 2363.29 256.782 cv
2335.07 254.095 2306.85 251.409 2278.63 248.723 cv
2291.57 231.023 2304.5 213.324 2317.44 195.625 cv
2321.05 190.681 2314.06 184.284 2309.2 187.381 cv
2290.48 199.301 2271.75 211.22 2253.03 223.139 cv
2251.67 216.843 2250.3 210.546 2248.94 204.25 cv
2248.91 204.106 2248.86 203.985 2248.82 203.85 cv
2248.8 203.688 2248.78 203.525 2248.75 203.363 cv
2243.68 179.981 2238.61 156.6 2233.54 133.218 cv
2232.26 127.296 2223.42 127.664 2221.93 133.218 cv
2214.89 159.317 2207.91 185.43 2200.99 211.561 cv
2185.56 198.683 2170.13 185.806 2154.71 172.928 cv
2150.69 169.575 2142.04 172.633 2144.64 178.79 cv
2149.93 191.345 2155.22 203.898 2160.53 216.444 cv
2193.65 221.657 2225.84 230.176 2254.62 248.301 cv
2271.21 258.746 2285.67 272.271 2297.48 287.841 cv
cp
1 .478431 .466667 rgb
f
2664.73 356.095 mo
2664.22 357.541 2663.85 359.222 2663.6 360.978 cv
2663.36 361.747 2663.21 362.539 2663.16 363.332 cv
2663.13 364.028 2663.17 364.768 2663.26 365.524 cv
2663.25 367.359 2663.4 369.145 2663.74 370.749 cv
2663.81 371.079 2663.87 371.412 2663.96 371.725 cv
2664.57 373.954 2665.91 376.015 2667.66 377.503 cv
2667.67 377.52 2667.68 377.539 2667.69 377.555 cv
2669.64 380.744 2673.08 382.642 2676.45 382.66 cv
2676.45 350.603 li
2671.84 349.042 2666.57 350.776 2664.73 356.095 cv
cp
.121569 .0862745 .0862745 rgb
f
2017.42 592.825 mo
2017.37 592.49 2017.29 592.155 2017.18 591.821 cv
2016.99 591.221 2016.72 590.661 2016.39 590.149 cv
2016.06 589.637 2015.66 589.173 2015.22 588.764 cv
2015.01 588.559 2014.78 588.368 2014.54 588.192 cv
2014.06 587.841 2013.54 587.548 2013.01 587.323 cv
2011.4 586.646 2009.62 586.573 2008.12 587.31 cv
2007.61 587.556 2007.14 587.892 2006.71 588.325 cv
2006.5 588.542 2006.3 588.783 2006.11 589.049 cv
2004.91 590.401 2004.16 592.192 2003.97 593.993 cv
2003.91 594.593 2003.91 595.194 2003.98 595.78 cv
2004.15 597.245 2004.73 598.617 2005.79 599.646 cv
2006.42 600.263 2007.22 600.757 2008.21 601.074 cv
2008.89 601.293 2009.57 601.397 2010.24 601.4 cv
2010.57 601.401 2010.9 601.377 2011.22 601.33 cv
2011.57 601.279 2011.91 601.197 2012.25 601.091 cv
2012.58 600.984 2012.9 600.852 2013.22 600.699 cv
2013.74 600.444 2014.24 600.135 2014.69 599.766 cv
2014.93 599.562 2015.17 599.343 2015.39 599.11 cv
2015.83 598.644 2016.22 598.122 2016.54 597.56 cv
2017.29 596.238 2017.64 594.693 2017.45 593.123 cv
2017.44 593.023 2017.44 592.924 2017.42 592.825 cv
cp
f
2086.88 623.357 mo
2087.57 623.577 2088.25 623.681 2088.91 623.684 cv
2089.58 623.686 2090.22 623.588 2090.84 623.404 cv
2092.38 622.945 2093.73 621.949 2094.69 620.654 cv
2095.07 620.136 2095.39 619.57 2095.64 618.972 cv
2096.13 617.774 2096.32 616.446 2096.1 615.108 cv
2096.04 614.773 2095.96 614.438 2095.86 614.104 cv
2095.66 613.504 2095.39 612.945 2095.06 612.433 cv
2094.73 611.92 2094.34 611.456 2093.9 611.047 cv
2093.24 610.434 2092.48 609.944 2091.68 609.606 cv
2091.15 609.381 2090.59 609.223 2090.04 609.139 cv
2089.76 609.097 2089.48 609.074 2089.2 609.07 cv
2088.64 609.063 2088.09 609.134 2087.56 609.292 cv
2087.3 609.37 2087.04 609.471 2086.79 609.594 cv
2086.29 609.839 2085.81 610.175 2085.39 610.608 cv
2085.18 610.825 2084.98 611.066 2084.79 611.333 cv
2084.18 612.009 2083.7 612.795 2083.33 613.637 cv
2083.09 614.198 2082.91 614.784 2082.79 615.379 cv
2082.11 618.652 2083.27 622.196 2086.88 623.357 cv
cp
f
2060.19 624.017 mo
2059.77 624.819 2059.32 625.607 2058.84 626.366 cv
2058.35 627.124 2057.84 627.853 2057.28 628.537 cv
2056.73 629.22 2056.13 629.858 2055.49 630.436 cv
2054.21 631.591 2052.75 632.503 2051.04 633.048 cv
2050.33 633.276 2049.62 633.438 2048.91 633.536 cv
2048.19 633.635 2047.48 633.671 2046.78 633.647 cv
2045.72 633.612 2044.68 633.441 2043.68 633.146 cv
2042.68 632.852 2041.72 632.433 2040.82 631.898 cv
2039.47 631.098 2038.26 630.039 2037.26 628.756 cv
2036.93 628.328 2036.62 627.875 2036.34 627.399 cv
2035.95 626.749 2035.62 626.077 2035.32 625.387 cv
2035.03 624.697 2034.77 623.989 2034.56 623.268 cv
2034.23 622.185 2033.99 621.072 2033.82 619.942 cv
2033.7 619.189 2033.62 618.43 2033.55 617.667 cv
2033.46 616.521 2033.42 615.371 2033.41 614.227 cv
2033.41 613.465 2033.42 612.706 2033.45 611.955 cv
2033.47 611.204 2033.51 610.461 2033.55 609.73 cv
2033.67 607.468 2033.88 605.214 2034.16 602.967 cv
2034.44 600.721 2034.78 598.481 2035.17 596.25 cv
2035.76 592.903 2036.45 589.573 2037.19 586.259 cv
2037.44 585.154 2037.69 584.052 2037.94 582.95 cv
2037.99 582.771 2038.01 582.598 2038.01 582.434 cv
2038.02 582.105 2037.95 581.81 2037.83 581.551 cv
2037.35 580.513 2036.01 580.055 2034.91 580.401 cv
2034.23 580.617 2033.65 581.148 2033.44 582.047 cv
2032.67 585.4 2031.93 588.763 2031.28 592.141 cv
2030.85 594.392 2030.46 596.65 2030.12 598.917 cv
2029.78 601.184 2029.5 603.458 2029.28 605.743 cv
2029.18 606.885 2029.09 608.029 2029.02 609.176 cv
2028.99 609.615 2028.97 610.055 2028.95 610.497 cv
2028.9 611.381 2028.88 612.271 2028.87 613.166 cv
2028.86 614.059 2028.86 614.955 2028.9 615.851 cv
2028.93 616.746 2028.98 617.641 2029.07 618.53 cv
2029.24 620.311 2029.53 622.073 2029.98 623.789 cv
2030.21 624.646 2030.47 625.493 2030.78 626.323 cv
2030.94 626.738 2031.11 627.149 2031.29 627.557 cv
2031.65 628.371 2032.05 629.168 2032.52 629.944 cv
2035.08 634.256 2039.42 637.154 2044.23 637.992 cv
2045.04 638.132 2045.85 638.214 2046.68 638.236 cv
2047.5 638.259 2048.33 638.221 2049.16 638.12 cv
2050.15 637.999 2051.09 637.8 2051.98 637.532 cv
2052.43 637.397 2052.86 637.246 2053.28 637.077 cv
2054.12 636.741 2054.91 636.338 2055.67 635.879 cv
2056.42 635.419 2057.13 634.902 2057.8 634.336 cv
2058.47 633.77 2059.11 633.154 2059.71 632.499 cv
2061.81 630.203 2063.5 627.409 2064.97 624.474 cv
2066.7 621.011 2068.25 617.463 2069.63 613.848 cv
2071.01 610.233 2072.21 606.551 2073.24 602.821 cv
2073.92 600.334 2074.53 597.826 2075.06 595.302 cv
2075.17 594.76 2075.1 594.287 2074.92 593.896 cv
2074.55 593.115 2073.69 592.661 2072.83 592.629 cv
2071.83 592.593 2070.82 593.132 2070.55 594.399 cv
2070.15 596.324 2069.7 598.237 2069.21 600.137 cv
2067.97 604.887 2066.45 609.552 2064.61 614.108 cv
2064.24 615.019 2063.86 615.926 2063.47 616.828 cv
2062.49 619.074 2061.46 621.609 2060.19 624.017 cv
cp
f
2592.4 1083.4 mo
2588.35 1084.1 2584.31 1084.87 2580.28 1085.7 cv
2580.25 1087.08 2580.23 1088.45 2580.21 1089.82 cv
2575.15 1089.61 2570.1 1089.38 2565.04 1089.16 cv
2552.72 1092.17 2540.47 1095.7 2528.26 1099.52 cv
2545.5 1100.34 2562.75 1101.13 2580 1101.85 cv
2579.36 1139.2 2578.72 1176.54 2578.08 1213.89 cv
2533.11 1211.47 2488.17 1208.84 2443.27 1206.01 cv
2443.3 1179.98 2443.43 1153.95 2443.66 1127.93 cv
2439.62 1129.24 2435.58 1130.52 2431.54 1131.77 cv
2431.33 1156.26 2431.2 1180.76 2431.17 1205.25 cv
2429.46 1205.14 2427.74 1205.04 2426.03 1204.93 cv
2414.95 1204.22 2403.88 1203.49 2392.81 1202.74 cv
2397.86 1206.84 2402.99 1210.83 2408.3 1214.57 cv
2408.99 1215.05 2409.7 1215.5 2410.4 1215.98 cv
2417.32 1216.42 2424.24 1216.87 2431.16 1217.31 cv
2431.16 1220.67 2431.16 1224.04 2431.17 1227.41 cv
2435.15 1229.15 2439.18 1230.71 2443.29 1232.05 cv
2443.28 1227.4 2443.26 1222.74 2443.26 1218.08 cv
2488.1 1220.91 2532.97 1223.53 2577.87 1225.95 cv
2577.8 1229.94 2577.73 1233.93 2577.66 1237.91 cv
2579.7 1237.93 2581.73 1237.96 2583.76 1238.01 cv
2585.75 1238.06 2587.74 1238.14 2589.72 1238.23 cv
2589.92 1226.61 li
2618.75 1228.14 2647.59 1229.57 2676.45 1230.94 cv
2676.45 1218.85 li
2647.66 1217.49 2618.89 1216.06 2590.13 1214.54 cv
2591.99 1107.02 li
2592.07 1102.36 li
2620.18 1103.51 2648.31 1104.53 2676.45 1105.45 cv
2676.45 1093.37 li
2648.38 1092.47 2620.32 1091.47 2592.28 1090.32 cv
2592.32 1088.02 2592.36 1085.71 2592.4 1083.4 cv
cp
1 .72549 .843137 rgb
f
2519.57 377.035 mo
2551.59 374.832 2583.68 373.161 2615.81 372.033 cv
2614.84 371.689 2613.9 371.228 2613 370.658 cv
2601.5 363.32 2603.78 349.161 2608.21 338.441 cv
2608.3 338.221 2608.4 338.014 2608.5 337.811 cv
2608.72 336.753 2609.03 335.759 2609.44 334.846 cv
2576.07 336.032 2542.75 337.804 2509.5 340.157 cv
2510.35 346.657 2511.55 353.109 2513.25 359.48 cv
2514.88 365.596 2517.01 371.445 2519.57 377.035 cv
cp
1 .478431 .466667 rgb
f
2632.26 353.679 mo
2631.65 358.44 2630.46 364.588 2627.67 368.637 cv
2626.68 370.07 2625.46 371.088 2624.11 371.759 cv
2637.31 371.333 2650.52 370.992 2663.74 370.749 cv
2663.4 369.145 2663.25 367.359 2663.26 365.524 cv
2663.17 364.768 2663.13 364.028 2663.16 363.332 cv
2663.21 362.539 2663.36 361.747 2663.6 360.978 cv
2663.85 359.222 2664.22 357.541 2664.73 356.095 cv
2666.57 350.776 2671.84 349.042 2676.45 350.603 cv
2676.45 333.751 li
2676.45 333.261 li
2660.19 333.46 2643.94 333.781 2627.71 334.254 cv
2631.8 339.453 2633.02 347.81 2632.26 353.679 cv
cp
f
2608.21 338.441 mo
2603.78 349.161 2601.5 363.32 2613 370.658 cv
2613.9 371.228 2614.84 371.689 2615.81 372.033 cv
2618.6 373.02 2621.58 373.014 2624.11 371.759 cv
2625.46 371.088 2626.68 370.07 2627.67 368.637 cv
2630.46 364.588 2631.65 358.44 2632.26 353.679 cv
2633.02 347.81 2631.8 339.453 2627.71 334.254 cv
2625.42 331.343 2622.24 329.418 2617.99 329.487 cv
2613.47 329.56 2610.84 331.702 2609.44 334.846 cv
2609.03 335.759 2608.72 336.753 2608.5 337.811 cv
2608.4 338.014 2608.3 338.221 2608.21 338.441 cv
cp
.121569 .0862745 .0862745 rgb
f
2666.85 425.612 mo
2668.34 431.276 2667.83 442.31 2662.4 446.179 cv
2667.08 445.813 2671.76 445.311 2676.45 444.695 cv
2676.45 439.519 li
2676.45 420.787 li
2672.69 420.846 2668.94 420.891 2665.19 420.964 cv
2665.89 422.474 2666.44 424.051 2666.85 425.612 cv
cp
1 .478431 .466667 rgb
f
2653.91 446.688 mo
2650.89 445.366 2648.59 442.645 2646.98 439.395 cv
2646.87 439.294 2646.76 439.201 2646.66 439.091 cv
2642.92 435.227 2641.18 427.694 2642.45 421.505 cv
2629.5 421.861 2616.57 422.304 2603.64 422.834 cv
2603.29 423.683 2602.93 424.478 2602.57 425.195 cv
2600.58 429.198 2593.65 429.709 2591.01 426.169 cv
2590.41 425.362 2589.83 424.445 2589.28 423.46 cv
2580.14 423.882 2571 424.337 2561.87 424.846 cv
2563.55 425.902 2565.26 426.925 2567 427.906 cv
2594.33 443.271 2623.92 447.959 2653.91 446.688 cv
cp
f
2646.66 439.091 mo
2646.76 439.201 2646.87 439.294 2646.98 439.395 cv
2648.59 442.645 2650.89 445.366 2653.91 446.688 cv
2654.64 447.011 2655.41 447.274 2656.23 447.414 cv
2658.77 447.846 2660.8 447.321 2662.4 446.179 cv
2667.83 442.31 2668.34 431.276 2666.85 425.612 cv
2666.44 424.051 2665.89 422.474 2665.19 420.964 cv
2663.95 418.294 2662.24 415.838 2659.91 414.085 cv
2655.76 410.948 2650.1 410.658 2646.13 414.358 cv
2644.22 416.146 2643.02 418.687 2642.45 421.505 cv
2641.18 427.694 2642.92 435.227 2646.66 439.091 cv
cp
.121569 .0862745 .0862745 rgb
f
2602.57 425.195 mo
2602.93 424.478 2603.29 423.683 2603.64 422.834 cv
2606.85 415.081 2609.22 402.633 2599.35 399.687 cv
2594.6 398.27 2589.42 400.803 2587.11 405.024 cv
2585.76 407.479 2585.54 409.992 2585.9 412.487 cv
2586.14 416.307 2587.51 420.273 2589.28 423.46 cv
2589.83 424.445 2590.41 425.362 2591.01 426.169 cv
2593.65 429.709 2600.58 429.198 2602.57 425.195 cv
cp
f
2509.93 265.62 mo
2509.33 274.948 2508.65 284.383 2508.23 293.844 cv
2543.66 290.837 2579.09 287.83 2614.52 284.822 cv
2635.17 283.069 2655.8 281.199 2676.45 279.535 cv
2676.45 240.92 li
2621.04 244.961 2565.81 250.852 2510.55 255.947 cv
2510.35 259.177 2510.14 262.402 2509.93 265.62 cv
cp
1 .478431 .466667 rgb
f
1895 1006.72 mo
1895 1013.63 li
1895 1013.79 li
1895 1016.05 li
1895 1029.22 li
1895 1037.04 li
1895 1042.06 li
1895 1046.67 li
1895 1047.9 li
1898.57 1044.29 1900.96 1038.34 1902.5 1033.66 cv
1905.32 1025.14 1904.9 1010.42 1895 1006.72 cv
cp
.121569 .0862745 .0862745 rgb
f
1908.52 1134.3 mo
1919.54 1138.43 1924.21 1121.98 1923.69 1114.09 cv
1923.38 1109.44 1922.05 1104.45 1918.87 1100.92 cv
1915.24 1096.89 1909.51 1095.48 1904.72 1098.48 cv
1897.32 1103.12 1895.92 1117.06 1900.37 1123.89 cv
1900.46 1124.02 1900.55 1124.14 1900.64 1124.27 cv
1901.89 1128.8 1904.37 1132.74 1908.52 1134.3 cv
cp
f
1934.03 1065.03 mo
1934.03 1065.04 1934.04 1065.07 1934.05 1065.08 cv
1936.51 1071.69 1944.81 1074.96 1950.17 1069.38 cv
1953.28 1066.13 1954.45 1060.74 1954.93 1056.38 cv
1955.47 1051.44 1954.85 1046.42 1951.82 1042.33 cv
1947.62 1036.66 1939.07 1035.94 1935.25 1042.54 cv
1934.45 1043.92 1933.73 1045.57 1933.13 1047.31 cv
1932.73 1048.05 1932.42 1048.83 1932.22 1049.64 cv
1932.04 1050.34 1931.95 1051.11 1931.88 1051.9 cv
1931.43 1054.16 1931.23 1056.41 1931.38 1058.38 cv
1931.56 1060.78 1932.53 1063.16 1934.03 1065.03 cv
cp
f
1983.74 1102.7 mo
1978.38 1100.02 1972.46 1102.88 1969.65 1107.76 cv
1965.28 1115.34 1966.32 1125.34 1970.77 1132.58 cv
1973.5 1137.04 1978.44 1136.88 1981.71 1134.49 cv
1983.97 1133.43 1985.65 1131.23 1986.88 1128.58 cv
1988.98 1124.05 1989.77 1118.21 1989.88 1114.39 cv
1989.9 1113.84 1989.88 1113.27 1989.83 1112.71 cv
1989.49 1108.65 1987.49 1104.58 1983.74 1102.7 cv
cp
f
1931.52 1201.83 mo
1933.61 1203.79 1936.67 1204.69 1939.32 1203.79 cv
1943.06 1203.43 1946.29 1200.86 1947.79 1197.2 cv
1949.26 1193.6 1949.62 1188.49 1949.26 1184.62 cv
1949.15 1183.44 1948.86 1182.3 1948.44 1181.22 cv
1948.31 1180.15 1948.13 1179.06 1947.87 1177.97 cv
1946.85 1173.59 1942.23 1172.2 1938.38 1172.87 cv
1935.32 1173.41 1932.99 1175.09 1931.29 1177.36 cv
1926.73 1181.3 1925.19 1188.7 1925.2 1194.79 cv
1925.21 1199.14 1928.19 1201.45 1931.52 1201.83 cv
cp
f
1955.65 996.384 mo
1957.74 998.345 1960.8 999.248 1963.45 998.342 cv
1963.9 998.299 1964.34 998.221 1964.78 998.116 cv
1967.95 997.351 1970.61 994.978 1971.93 991.759 cv
1973.4 988.159 1973.76 983.05 1973.39 979.173 cv
1973.28 977.994 1973 976.852 1972.58 975.78 cv
1972.45 974.703 1972.26 973.619 1972.01 972.53 cv
1970.99 968.142 1966.36 966.759 1962.51 967.429 cv
1959.45 967.961 1957.13 969.643 1955.43 971.911 cv
1952.8 974.184 1951.18 977.605 1950.28 981.261 cv
1949.61 983.951 1949.33 986.767 1949.34 989.35 cv
1949.35 993.692 1952.33 996.002 1955.65 996.384 cv
cp
f
2012.17 1044.7 mo
2007.59 1042.31 2001.79 1043.88 1998.59 1047.74 cv
1996.73 1049.99 1996.01 1052.52 1995.89 1055.14 cv
1995.22 1060.32 1996.48 1066.15 1998.41 1070.15 cv
2000.41 1074.29 2007.6 1075.14 2010.43 1071.44 cv
2015.57 1064.71 2022.73 1050.21 2012.17 1044.7 cv
cp
f
1765.76 92.2095 mo
1764.52 94.7871 1763.3 97.3789 1762.16 100.002 cv
1744.29 140.841 1738.15 185.935 1743.62 229.869 cv
1755.03 228.082 li
1804.68 220.304 li
1804.68 117.85 li
1804.68 109.267 li
1804.68 92.2095 li
1765.76 92.2095 li
cp
1 .478431 .466667 rgb
f
1743.62 229.869 mo
1744.86 239.75 1746.69 249.569 1749.09 259.271 cv
1750.03 263.063 1751.06 266.836 1752.17 270.587 cv
1752.36 271.207 1752.53 271.829 1752.72 272.447 cv
1761.47 300.967 1775.31 327.521 1793.43 351.191 cv
1797.06 355.935 1800.83 360.563 1804.68 365.111 cv
1804.68 303.757 li
1804.68 298.857 li
1804.68 241.989 li
1804.68 236.406 li
1804.68 220.304 li
1755.03 228.082 li
1743.62 229.869 li
cp
1 .807843 .847059 rgb
f
1782.49 818.021 mo
1761.48 825.838 1743.35 840.277 1729.19 857.711 cv
1706.81 885.255 1695.36 920.314 1696.59 955.055 cv
1707.39 919.463 1726.16 886.608 1749.6 856.527 cv
1759.99 843.189 1771.09 830.474 1782.49 818.021 cv
cp
.984314 .960784 .92549 rgb
f
1623.96 724.858 mo
1605.15 748.992 1588.39 774.809 1574.32 801.988 cv
1560.29 829.085 1548.26 857.792 1542.53 887.883 cv
1537.24 915.686 1537.53 946.323 1551.65 971.613 cv
1565.27 995.992 1589.7 1010.65 1616.22 1017.39 cv
1639.01 1023.19 1662.92 1023.87 1686.52 1020.66 cv
1686.53 1019.66 1686.51 1018.66 1686.53 1017.66 cv
1686.74 1007.2 1687.68 996.939 1689.27 986.879 cv
1688.19 982.696 1687.28 978.456 1686.58 974.15 cv
1677.26 916.688 1702.86 855.94 1750.19 822.133 cv
1764.12 812.179 1780.52 804.862 1797.55 801.847 cv
1799.93 799.336 1802.3 796.832 1804.68 794.329 cv
1804.68 718.659 li
1804.68 714.393 li
1804.68 598.694 li
1804.68 594.434 li
1804.68 563.258 li
1737.14 608.511 1674.31 660.253 1623.96 724.858 cv
cp
f
1783.14 470.3 mo
1782.95 475.638 1783.37 481.468 1778.78 485.11 cv
1775.47 487.734 1769.31 489.885 1765.1 489.011 cv
1759.35 487.821 1758.66 482.092 1758.52 477.176 cv
1758.22 466.062 1760.08 454.437 1766.93 445.374 cv
1766.98 445.303 1767.04 445.241 1767.1 445.176 cv
1768.05 442.596 1770.34 440.639 1773.49 440.534 cv
1779.48 440.332 1781.21 446.411 1782.1 451.135 cv
1783.29 457.456 1783.37 463.892 1783.14 470.3 cv
cp
1748.3 418.042 mo
1747.45 413.06 1748.39 407.627 1749.28 402.71 cv
1750.11 398.131 1750.84 392.722 1754.42 389.409 cv
1754.78 389.072 1755.17 388.837 1755.56 388.681 cv
1756.44 387.96 1757.6 387.502 1758.98 387.464 cv
1763.47 387.34 1766.06 392.27 1768 395.589 cv
1772.94 404.04 1774.17 414.058 1767.78 422.149 cv
1764.99 425.687 1760.67 428.854 1755.93 427.521 cv
1751.62 426.31 1749.02 422.239 1748.3 418.042 cv
cp
1729.46 475.244 mo
1729.48 480.203 1728.59 485.084 1723.96 487.786 cv
1720.31 489.919 1714.49 491.732 1710.5 489.734 cv
1706.5 487.734 1705.47 483.146 1705.05 479.075 cv
1704.46 473.31 1704.13 467.473 1704.02 461.68 cv
1703.82 450.412 1705.11 439.337 1709.52 428.899 cv
1710.07 427.607 1711.03 427.065 1712.04 427.054 cv
1713.88 425.248 1716.46 424.466 1719.57 425.513 cv
1724.98 427.328 1726.55 433.808 1727.54 438.732 cv
1729.92 450.6 1729.4 463.194 1729.46 475.244 cv
cp
1752.72 272.447 mo
1752.53 271.829 1752.36 271.207 1752.17 270.587 cv
1751.06 266.836 1750.03 263.063 1749.09 259.271 cv
1746.69 249.569 1744.86 239.75 1743.62 229.869 cv
1546.61 260.732 li
1535.01 262.551 li
1473.11 272.247 li
1457.33 274.719 li
1435.16 278.191 li
1382.1 286.504 li
1373.01 287.927 li
1361.22 289.775 li
1322.26 295.878 li
1287.73 301.288 li
1238.54 308.994 li
1231.38 310.115 li
1210.1 313.449 1188.81 316.784 1167.52 320.119 cv
1132.86 325.549 1098.2 330.979 1063.54 336.409 cv
1069.97 350.626 1071.72 366.679 1077.73 380.967 cv
1081.29 367.046 1090.21 354.646 1102.38 346.73 cv
1115.21 338.386 1133.54 334.924 1147.2 343.466 cv
1151.37 346.073 1154.55 349.712 1156.54 353.952 cv
1159.22 367.289 1151.48 380.134 1144.56 390.854 cv
1136.61 403.166 1127.57 414.728 1118.33 426.08 cv
1109.27 437.197 1100.3 448.409 1090.51 458.897 cv
1082.95 466.999 1073.85 473.644 1066.37 481.763 cv
1050.44 455.875 1034.56 429.643 1023.24 401.406 cv
1023.24 413.724 li
1023.24 454.809 li
1023.24 460.963 li
1023.24 514.243 li
1023.24 520.4 li
1023.24 587.314 li
1023.24 594.14 li
1023.24 709.453 li
1023.24 844.99 li
1023.24 847.705 li
1023.24 851.524 li
1023.24 857.178 li
1023.24 862.884 li
1023.24 870.823 li
1023.24 878.029 li
1023.24 900.069 li
1097.93 928.167 1172.9 955.513 1248.15 982.087 cv
1322.8 1008.45 1397.72 1034.06 1472.89 1058.91 cv
1477.13 1060.32 1481.38 1061.71 1485.63 1063.11 cv
1505.05 1069.5 1524.49 1075.87 1543.95 1082.17 cv
1600.6 1100.5 1657.41 1118.39 1714.34 1135.87 cv
1697.65 1103.96 1688.17 1068.48 1686.7 1032.3 cv
1654.6 1036.58 1621.89 1034.11 1592.48 1021.61 cv
1565.11 1009.97 1543.66 988.582 1534.01 960.205 cv
1524.11 931.089 1527.13 898.78 1534.81 869.531 cv
1543.02 838.287 1557.01 808.264 1572.91 780.247 cv
1589.17 751.622 1608.4 724.734 1629.6 699.577 cv
1673.75 647.195 1726.61 602.931 1782.79 564.006 cv
1790.03 558.99 1797.34 554.075 1804.68 549.223 cv
1804.68 516.603 li
1804.68 511.203 li
1804.68 491.586 li
1804.68 465.343 li
1804.68 420.599 li
1804.68 416.244 li
1804.68 369.123 li
1804.68 365.111 li
1800.83 360.563 1797.06 355.935 1793.43 351.191 cv
1775.31 327.521 1761.47 300.967 1752.72 272.447 cv
cp
f
1345.02 109.348 mo
1348.8 108.538 1352.58 107.728 1356.35 106.918 cv
1379.21 102.016 1402.07 97.1123 1424.92 92.2095 cv
1417.22 92.2095 li
1410.47 92.2095 li
1365.15 92.2095 li
1359.99 92.2095 li
1358.61 92.2095 li
1355.11 92.2095 li
1321.02 92.2095 li
1309.34 92.2095 li
1278.17 92.2095 li
1274.17 92.2095 li
1268.28 92.2095 li
1243.56 92.2095 li
1200.23 92.2095 li
1194.82 92.2095 li
1134.7 92.2095 li
1130.26 92.2095 li
1054.25 92.2095 li
1034 92.2095 li
1023.24 92.2095 li
1023.24 177.463 li
1023.24 178.371 li
1051.54 172.299 1079.85 166.228 1108.15 160.157 cv
1187.11 143.221 1266.07 126.284 1345.02 109.348 cv
cp
1 .733333 .32549 rgb
f
1714.34 1135.87 mo
1722.15 1150.8 1731.52 1164.96 1742.39 1178.03 cv
1760.63 1199.96 1782.04 1218.52 1804.68 1235.63 cv
1804.68 1234.69 li
1804.68 1197.02 li
1804.68 1189.52 li
1804.68 1175.62 li
1804.68 1163.21 li
1779.79 1155.79 1754.92 1148.29 1730.07 1140.7 cv
1724.82 1139.1 1719.58 1137.48 1714.34 1135.87 cv
cp
.478431 .729412 .890196 rgb
f
1302.14 1188 mo
1288.39 1182.92 1274.66 1177.81 1260.94 1172.67 cv
1257.29 1171.3 1253.64 1169.94 1249.99 1168.57 cv
1209.86 1153.49 1169.84 1138.14 1129.92 1122.51 cv
1126.33 1121.1 1122.74 1119.69 1119.15 1118.28 cv
1102.42 1111.71 1085.7 1105.09 1069.01 1098.42 cv
1053.73 1092.32 1038.48 1086.15 1023.24 1079.96 cv
1023.24 1084.27 li
1023.24 1084.27 li
1023.24 1131.49 li
1023.24 1133.46 li
1049.31 1144.23 1075.42 1154.88 1101.6 1165.38 cv
1104.2 1166.42 1106.79 1167.48 1109.39 1168.52 cv
1110.38 1168.91 1111.36 1169.3 1112.34 1169.69 cv
1153.85 1186.27 1195.5 1202.5 1237.27 1218.39 cv
1240.91 1219.77 1244.54 1221.16 1248.18 1222.54 cv
1278.15 1233.89 1308.18 1245.08 1338.28 1256.08 cv
1342.4 1257.58 1346.53 1259.07 1350.65 1260.57 cv
1354.3 1261.89 1357.94 1263.22 1361.59 1264.54 cv
1399.43 1278.23 1437.37 1291.65 1475.41 1304.79 cv
1478.31 1305.79 1481.21 1306.79 1484.1 1307.79 cv
1513 1307.79 li
1519.47 1307.79 li
1532.18 1307.79 li
1538.72 1307.79 li
1561.51 1307.79 li
1570.68 1307.79 li
1583.63 1307.79 li
1590.31 1307.79 li
1592.93 1307.79 li
1597.75 1307.79 li
1619.44 1307.79 li
1629.51 1307.79 li
1647.48 1307.79 li
1610.77 1295.86 1574.13 1283.71 1537.57 1271.32 cv
1458.73 1244.59 1380.24 1216.82 1302.14 1188 cv
cp
.835294 .937255 .945098 rgb
f
1742.39 1178.03 mo
1731.52 1164.96 1722.15 1150.8 1714.34 1135.87 cv
1657.41 1118.39 1600.6 1100.5 1543.95 1082.17 cv
1524.49 1075.87 1505.05 1069.5 1485.63 1063.11 cv
1481.38 1061.71 1477.13 1060.32 1472.89 1058.91 cv
1397.72 1034.06 1322.8 1008.45 1248.15 982.087 cv
1172.9 955.513 1097.93 928.167 1023.24 900.069 cv
1023.24 982.941 li
1023.24 989.217 li
1023.24 1015.67 li
1023.24 1030.97 li
1023.24 1067.52 li
1050.07 1078.43 1076.95 1089.21 1103.89 1099.86 cv
1110.32 1102.41 1116.75 1104.93 1123.18 1107.46 cv
1126.77 1108.87 1130.36 1110.28 1133.95 1111.69 cv
1173.44 1127.14 1213.03 1142.33 1252.72 1157.24 cv
1256.37 1158.62 1260.02 1159.98 1263.68 1161.35 cv
1287.84 1170.39 1312.03 1179.35 1336.27 1188.2 cv
1414.12 1216.61 1492.34 1243.99 1570.92 1270.32 cv
1608.94 1283.07 1647.04 1295.54 1685.23 1307.79 cv
1691.44 1307.79 li
1780.57 1307.79 li
1804.68 1307.79 li
1804.68 1305.44 li
1804.68 1299.26 li
1804.68 1268.92 li
1804.68 1259.14 li
1804.68 1248.39 li
1804.68 1235.63 li
1782.04 1218.52 1760.63 1199.96 1742.39 1178.03 cv
cp
f
1092.29 1223.49 mo
1081.82 1251.59 1071.35 1279.69 1060.88 1307.79 cv
1074.19 1307.79 li
1163.33 1307.79 li
1211.54 1307.79 li
1216.72 1291.03 1221.73 1274.22 1226.53 1257.35 cv
1181.73 1246.27 1136.99 1234.98 1092.29 1223.49 cv
cp
.478431 .729412 .890196 rgb
f
1023.24 1205.58 mo
1023.24 1307.79 li
1039.05 1307.79 li
1048.53 1307.79 li
1059.36 1278.72 1070.19 1249.66 1081.03 1220.59 cv
1061.75 1215.62 1042.49 1210.63 1023.24 1205.58 cv
cp
f
1294.15 1261.97 mo
1311.58 1266.19 1329.01 1270.38 1346.45 1274.55 cv
1346.52 1274.57 1346.59 1274.58 1346.66 1274.6 cv
1347.97 1269.92 1349.3 1265.24 1350.65 1260.57 cv
1346.53 1259.07 1342.4 1257.58 1338.28 1256.08 cv
1308.18 1245.08 1278.15 1233.89 1248.18 1222.54 cv
1245.83 1231.36 1243.42 1240.17 1240.96 1248.97 cv
1258.68 1253.34 1276.42 1257.66 1294.15 1261.97 cv
cp
f
1357.98 1277.32 mo
1375.77 1281.56 1393.57 1285.75 1411.38 1289.92 cv
1413.14 1290.34 1414.9 1290.76 1416.67 1291.17 cv
1436.24 1295.75 1455.82 1300.29 1475.41 1304.79 cv
1437.37 1291.65 1399.43 1278.23 1361.59 1264.54 cv
1360.36 1268.79 1359.15 1273.05 1357.96 1277.32 cv
1357.97 1277.32 1357.97 1277.32 1357.98 1277.32 cv
cp
f
1096.36 1212.56 mo
1140.49 1223.91 1184.67 1235.06 1228.89 1246 cv
1229.16 1246.07 1229.42 1246.13 1229.68 1246.19 cv
1232.27 1236.94 1234.8 1227.67 1237.27 1218.39 cv
1195.5 1202.5 1153.85 1186.27 1112.34 1169.69 cv
1112.12 1170.28 1111.89 1170.88 1111.67 1171.48 cv
1106.57 1185.17 1101.47 1198.87 1096.36 1212.56 cv
cp
f
1101.6 1165.38 mo
1075.42 1154.88 1049.31 1144.23 1023.24 1133.46 cv
1023.24 1137.64 li
1023.24 1151.6 li
1023.24 1181.39 li
1023.24 1193.57 li
1043.85 1198.97 1064.47 1204.34 1085.1 1209.66 cv
1090.6 1194.9 1096.1 1180.14 1101.6 1165.38 cv
cp
f
1354.87 1288.52 mo
1353.14 1294.93 1351.47 1301.36 1349.83 1307.79 cv
1369.02 1307.79 li
1377.93 1307.79 li
1420.89 1307.79 li
1428.42 1307.79 li
1436.85 1307.79 li
1419.83 1303.84 1402.82 1299.88 1385.81 1295.86 cv
1375.5 1293.43 1365.18 1290.98 1354.87 1288.52 cv
cp
f
1295.65 1274.28 mo
1292.51 1273.52 1289.37 1272.76 1286.23 1271.99 cv
1270.08 1268.07 1253.94 1264.12 1237.81 1260.15 cv
1233.28 1276.08 1228.55 1291.96 1223.68 1307.79 cv
1337.85 1307.79 li
1339.71 1300.46 1341.6 1293.13 1343.58 1285.83 cv
1327.59 1282.01 1311.62 1278.15 1295.65 1274.28 cv
cp
f
1686.52 1020.66 mo
1691.42 1020 1696.3 1019.18 1701.16 1018.18 cv
1696.09 1008.24 1692.07 997.774 1689.27 986.879 cv
1687.68 996.939 1686.74 1007.2 1686.53 1017.66 cv
1686.51 1018.66 1686.53 1019.66 1686.52 1020.66 cv
cp
1 .807843 .847059 rgb
f
1804.68 800.859 mo
1804.68 794.329 li
1802.3 796.832 1799.93 799.336 1797.55 801.847 cv
1799.92 801.428 1802.3 801.108 1804.68 800.859 cv
cp
f
1718.86 1025.77 mo
1738.99 1057.5 1769.95 1081.9 1804.68 1096.42 cv
1804.68 1049.74 li
1804.68 1043.54 li
1804.68 1041.92 li
1804.68 1035.55 li
1804.68 1004.05 li
1804.68 1003.95 li
1804.68 997.776 li
1804.68 985.151 li
1793.95 992.841 1782.65 999.722 1770.91 1005.69 cv
1754.75 1013.9 1737.14 1020.8 1718.86 1025.77 cv
cp
f
1782.49 818.021 mo
1771.09 830.474 1759.99 843.189 1749.6 856.527 cv
1726.16 886.608 1707.39 919.463 1696.59 955.055 cv
1697.26 974.059 1701.72 992.968 1710.29 1010.5 cv
1711.11 1012.18 1711.97 1013.84 1712.85 1015.49 cv
1738.34 1008.93 1762.8 998.178 1784.33 984.805 cv
1791.29 980.483 1798.1 975.79 1804.68 970.768 cv
1804.68 961.435 li
1804.68 955.133 li
1804.68 927.838 li
1804.68 812.563 li
1801.74 812.903 1798.82 813.388 1795.95 814.021 cv
1791.34 815.039 1786.86 816.397 1782.49 818.021 cv
cp
f
1707 1028.7 mo
1700.29 1030.18 1693.51 1031.39 1686.7 1032.3 cv
1688.17 1068.48 1697.65 1103.96 1714.34 1135.87 cv
1719.58 1137.48 1724.82 1139.1 1730.07 1140.7 cv
1754.92 1148.29 1779.79 1155.79 1804.68 1163.21 cv
1804.68 1108.85 li
1800.15 1107.08 1795.65 1105.18 1791.2 1103.08 cv
1757.23 1087.03 1726.59 1061.05 1707 1028.7 cv
cp
f
1629.6 699.577 mo
1608.4 724.734 1589.17 751.622 1572.91 780.247 cv
1557.01 808.264 1543.02 838.287 1534.81 869.531 cv
1527.13 898.78 1524.11 931.089 1534.01 960.205 cv
1543.66 988.582 1565.11 1009.97 1592.48 1021.61 cv
1621.89 1034.11 1654.6 1036.58 1686.7 1032.3 cv
1693.51 1031.39 1700.29 1030.18 1707 1028.7 cv
1726.59 1061.05 1757.23 1087.03 1791.2 1103.08 cv
1795.65 1105.18 1800.15 1107.08 1804.68 1108.85 cv
1804.68 1107.88 li
1804.68 1101.68 li
1804.68 1096.42 li
1769.95 1081.9 1738.99 1057.5 1718.86 1025.77 cv
1737.14 1020.8 1754.75 1013.9 1770.91 1005.69 cv
1782.65 999.722 1793.95 992.841 1804.68 985.151 cv
1804.68 970.768 li
1798.1 975.79 1791.29 980.483 1784.33 984.805 cv
1762.8 998.178 1738.34 1008.93 1712.85 1015.49 cv
1711.97 1013.84 1711.11 1012.18 1710.29 1010.5 cv
1701.72 992.968 1697.26 974.059 1696.59 955.055 cv
1695.36 920.314 1706.81 885.255 1729.19 857.711 cv
1743.35 840.277 1761.48 825.838 1782.49 818.021 cv
1786.86 816.397 1791.34 815.039 1795.95 814.021 cv
1798.82 813.388 1801.74 812.903 1804.68 812.563 cv
1804.68 800.859 li
1802.3 801.108 1799.92 801.428 1797.55 801.847 cv
1780.52 804.862 1764.12 812.179 1750.19 822.133 cv
1702.86 855.94 1677.26 916.688 1686.58 974.15 cv
1687.28 978.456 1688.19 982.696 1689.27 986.879 cv
1692.07 997.774 1696.09 1008.24 1701.16 1018.18 cv
1696.3 1019.18 1691.42 1020 1686.52 1020.66 cv
1662.92 1023.87 1639.01 1023.19 1616.22 1017.39 cv
1589.7 1010.65 1565.27 995.992 1551.65 971.613 cv
1537.53 946.323 1537.24 915.686 1542.53 887.883 cv
1548.26 857.792 1560.29 829.085 1574.32 801.988 cv
1588.39 774.809 1605.15 748.992 1623.96 724.858 cv
1674.31 660.253 1737.14 608.511 1804.68 563.258 cv
1804.68 549.223 li
1797.34 554.075 1790.03 558.99 1782.79 564.006 cv
1726.61 602.931 1673.75 647.195 1629.6 699.577 cv
cp
.121569 .0862745 .0862745 rgb
f
1336.27 1188.2 mo
1312.03 1179.35 1287.84 1170.39 1263.68 1161.35 cv
1260.02 1159.98 1256.37 1158.62 1252.72 1157.24 cv
1213.03 1142.33 1173.44 1127.14 1133.95 1111.69 cv
1130.36 1110.28 1126.77 1108.87 1123.18 1107.46 cv
1116.75 1104.93 1110.32 1102.41 1103.89 1099.86 cv
1076.95 1089.21 1050.07 1078.43 1023.24 1067.52 cv
1023.24 1072.05 li
1023.24 1076.56 li
1023.24 1078.21 li
1023.24 1079.96 li
1038.48 1086.15 1053.73 1092.32 1069.01 1098.42 cv
1085.7 1105.09 1102.42 1111.71 1119.15 1118.28 cv
1122.74 1119.69 1126.33 1121.1 1129.92 1122.51 cv
1169.84 1138.14 1209.86 1153.49 1249.99 1168.57 cv
1253.64 1169.94 1257.29 1171.3 1260.94 1172.67 cv
1274.66 1177.81 1288.39 1182.92 1302.14 1188 cv
1380.24 1216.82 1458.73 1244.59 1537.57 1271.32 cv
1574.13 1283.71 1610.77 1295.86 1647.48 1307.79 cv
1656.29 1307.79 li
1665.95 1307.79 li
1685.23 1307.79 li
1647.04 1295.54 1608.94 1283.07 1570.92 1270.32 cv
1492.34 1243.99 1414.12 1216.61 1336.27 1188.2 cv
cp
f
1727.54 438.732 mo
1726.55 433.808 1724.98 427.328 1719.57 425.513 cv
1716.46 424.466 1713.88 425.248 1712.04 427.054 cv
1711.03 427.065 1710.07 427.607 1709.52 428.899 cv
1705.11 439.337 1703.82 450.412 1704.02 461.68 cv
1704.13 467.473 1704.46 473.31 1705.05 479.075 cv
1705.47 483.146 1706.5 487.734 1710.5 489.734 cv
1714.49 491.732 1720.31 489.919 1723.96 487.786 cv
1728.59 485.084 1729.48 480.203 1729.46 475.244 cv
1729.4 463.194 1729.92 450.6 1727.54 438.732 cv
cp
0 0 0 rgb
f
1773.49 440.534 mo
1770.34 440.639 1768.05 442.596 1767.1 445.176 cv
1767.04 445.241 1766.98 445.303 1766.93 445.374 cv
1760.08 454.437 1758.22 466.062 1758.52 477.176 cv
1758.66 482.092 1759.35 487.821 1765.1 489.011 cv
1769.31 489.885 1775.47 487.734 1778.78 485.11 cv
1783.37 481.468 1782.95 475.638 1783.14 470.3 cv
1783.37 463.892 1783.29 457.456 1782.1 451.135 cv
1781.21 446.411 1779.48 440.332 1773.49 440.534 cv
cp
f
1767.78 422.149 mo
1774.17 414.058 1772.94 404.04 1768 395.589 cv
1766.06 392.27 1763.47 387.34 1758.98 387.464 cv
1757.6 387.502 1756.44 387.96 1755.56 388.681 cv
1755.17 388.837 1754.78 389.072 1754.42 389.409 cv
1750.84 392.722 1750.11 398.131 1749.28 402.71 cv
1748.39 407.627 1747.45 413.06 1748.3 418.042 cv
1749.02 422.239 1751.62 426.31 1755.93 427.521 cv
1760.67 428.854 1764.99 425.687 1767.78 422.149 cv
cp
f
1416.67 1291.17 mo
1414.9 1290.76 1413.14 1290.34 1411.38 1289.92 cv
1393.57 1285.75 1375.77 1281.56 1357.98 1277.32 cv
1357.97 1277.32 1357.97 1277.32 1357.96 1277.32 cv
1359.15 1273.05 1360.36 1268.79 1361.59 1264.54 cv
1357.94 1263.22 1354.3 1261.89 1350.65 1260.57 cv
1349.3 1265.24 1347.97 1269.92 1346.66 1274.6 cv
1346.59 1274.58 1346.52 1274.57 1346.45 1274.55 cv
1329.01 1270.38 1311.58 1266.19 1294.15 1261.97 cv
1276.42 1257.66 1258.68 1253.34 1240.96 1248.97 cv
1243.42 1240.17 1245.83 1231.36 1248.18 1222.54 cv
1244.54 1221.16 1240.91 1219.77 1237.27 1218.39 cv
1234.8 1227.67 1232.27 1236.94 1229.68 1246.19 cv
1229.42 1246.13 1229.16 1246.07 1228.89 1246 cv
1184.67 1235.06 1140.49 1223.91 1096.36 1212.56 cv
1101.47 1198.87 1106.57 1185.17 1111.67 1171.48 cv
1111.89 1170.88 1112.12 1170.28 1112.34 1169.69 cv
1111.36 1169.3 1110.38 1168.91 1109.39 1168.52 cv
1106.79 1167.48 1104.2 1166.42 1101.6 1165.38 cv
1096.1 1180.14 1090.6 1194.9 1085.1 1209.66 cv
1064.47 1204.34 1043.85 1198.97 1023.24 1193.57 cv
1023.24 1205.58 li
1042.49 1210.63 1061.75 1215.62 1081.03 1220.59 cv
1070.19 1249.66 1059.36 1278.72 1048.53 1307.79 cv
1048.71 1307.79 li
1060.88 1307.79 li
1071.35 1279.69 1081.82 1251.59 1092.29 1223.49 cv
1136.99 1234.98 1181.73 1246.27 1226.53 1257.35 cv
1221.73 1274.22 1216.72 1291.03 1211.54 1307.79 cv
1223.68 1307.79 li
1228.55 1291.96 1233.28 1276.08 1237.81 1260.15 cv
1253.94 1264.12 1270.08 1268.07 1286.23 1271.99 cv
1289.37 1272.76 1292.51 1273.52 1295.65 1274.28 cv
1311.62 1278.15 1327.59 1282.01 1343.58 1285.83 cv
1341.6 1293.13 1339.71 1300.46 1337.85 1307.79 cv
1349.83 1307.79 li
1351.47 1301.36 1353.14 1294.93 1354.87 1288.52 cv
1365.18 1290.98 1375.5 1293.43 1385.81 1295.86 cv
1402.82 1299.88 1419.83 1303.84 1436.85 1307.79 cv
1469.63 1307.79 li
1480.02 1307.79 li
1484.1 1307.79 li
1481.21 1306.79 1478.31 1305.79 1475.41 1304.79 cv
1455.82 1300.29 1436.24 1295.75 1416.67 1291.17 cv
cp
.4 .592157 .890196 rgb
f
1038.76 311.668 mo
1049.27 315.265 1057.64 324.152 1062.75 334.685 cv
1063.02 335.254 1063.28 335.833 1063.54 336.409 cv
1098.2 330.979 1132.86 325.549 1167.52 320.119 cv
1188.81 316.784 1210.1 313.449 1231.38 310.115 cv
1238.54 308.994 li
1287.73 301.288 li
1322.26 295.878 li
1361.22 289.775 li
1373.01 287.927 li
1382.1 286.504 li
1435.16 278.191 li
1457.33 274.719 li
1473.11 272.247 li
1535.01 262.551 li
1546.61 260.732 li
1743.62 229.869 li
1738.15 185.935 1744.29 140.841 1762.16 100.002 cv
1763.3 97.3789 1764.52 94.7871 1765.76 92.2095 cv
1738.74 92.2095 li
1732.56 92.2095 li
1671.49 92.2095 li
1651.24 92.2095 li
1640.48 92.2095 li
1640 92.2095 li
1633.72 92.2095 li
1630.25 92.2095 li
1624.98 92.2095 li
1587.88 92.2095 li
1578.65 92.2095 li
1568.98 92.2095 li
1560.17 92.2095 li
1530.07 92.2095 li
1526.48 92.2095 li
1521.25 92.2095 li
1520.19 92.2095 li
1461.87 92.2095 li
1454.96 92.2095 li
1424.92 92.2095 li
1402.07 97.1123 1379.21 102.016 1356.35 106.918 cv
1352.58 107.728 1348.8 108.538 1345.02 109.348 cv
1266.07 126.284 1187.11 143.221 1108.15 160.157 cv
1079.85 166.228 1051.54 172.299 1023.24 178.371 cv
1023.24 181.878 li
1023.24 227.747 li
1023.24 234.28 li
1023.24 239.934 li
1023.24 245.64 li
1023.24 250.788 li
1023.24 253.58 li
1023.24 256.033 li
1023.24 260.785 li
1023.24 312.887 li
1026.59 311.777 1030.14 311.24 1033.61 311.249 cv
1035.31 311.253 1037.05 311.383 1038.76 311.668 cv
cp
.92549 .333333 .572549 rgb
f
1090.51 458.897 mo
1100.3 448.409 1109.27 437.197 1118.33 426.08 cv
1127.57 414.728 1136.61 403.166 1144.56 390.854 cv
1151.48 380.134 1159.22 367.289 1156.54 353.952 cv
1154.55 349.712 1151.37 346.073 1147.2 343.466 cv
1133.54 334.924 1115.21 338.386 1102.38 346.73 cv
1090.21 354.646 1081.29 367.046 1077.73 380.967 cv
1071.72 366.679 1069.97 350.626 1063.54 336.409 cv
1050.1 338.513 1036.67 340.617 1023.24 342.722 cv
1023.24 365.698 li
1023.24 369.123 li
1023.24 371.973 li
1023.24 385.539 li
1023.24 391.429 li
1023.24 398.423 li
1023.24 401.406 li
1034.56 429.643 1050.44 455.875 1066.37 481.763 cv
1073.85 473.644 1082.95 466.999 1090.51 458.897 cv
cp
1 .478431 .466667 rgb
f
1062.75 334.685 mo
1057.64 324.152 1049.27 315.265 1038.76 311.668 cv
1037.05 311.383 1035.31 311.253 1033.61 311.249 cv
1030.14 311.24 1026.59 311.777 1023.24 312.887 cv
1023.24 342.722 li
1036.67 340.617 1050.1 338.513 1063.54 336.409 cv
1063.28 335.833 1063.02 335.254 1062.75 334.685 cv
cp
.760784 .266667 .494118 rgb
f
3372.62 244.067 mo
3341.67 248.324 3310.47 243.354 3282.6 229.156 cv
3229.64 202.179 3193.98 147.91 3176.75 92.2095 cv
3174.64 92.2095 li
3147.55 92.2095 li
3055.19 92.2095 li
3055.76 98.167 3056.29 104.132 3056.73 110.109 cv
3057.04 114.197 3057.32 118.29 3057.59 122.386 cv
3058.17 131.452 3058.66 140.532 3059.11 149.619 cv
3059.32 153.71 3059.52 157.802 3059.71 161.895 cv
3060.25 173.009 3060.78 184.125 3061.42 195.228 cv
3061.66 199.322 3061.91 203.414 3062.18 207.504 cv
3062.79 216.6 3063.49 225.682 3064.36 234.741 cv
3064.76 238.839 3065.19 242.933 3065.65 247.02 cv
3066.86 257.518 3068.33 267.977 3070.16 278.385 cv
3070.88 282.488 3071.65 286.584 3072.49 290.67 cv
3074.37 299.806 3076.57 308.896 3079.14 317.932 cv
3079.29 318.483 3079.44 319.037 3079.6 319.587 cv
3079.73 320.048 3079.88 320.509 3080.01 320.97 cv
3082.98 330.226 li
3083.92 333.141 li
3085.37 332.179 3086.83 331.217 3088.28 330.255 cv
3094.52 326.127 3100.74 322.031 3106.97 318.088 cv
3108.12 317.36 3109.27 316.622 3110.42 315.906 cv
3127.96 305.013 3146.32 294.902 3166.43 289.671 cv
3189.65 283.629 3212.79 286.416 3235.46 293.479 cv
3261.01 301.437 3285.22 313.376 3311.26 319.831 cv
3335.43 325.824 3360.48 326.611 3385.1 323.179 cv
3448.99 314.271 3501.78 280.888 3548.02 238.838 cv
3548.02 167.717 li
3548.02 154.005 li
3520.77 171.826 3494.37 191.299 3466.24 207.917 cv
3437.37 224.972 3406.12 239.461 3372.62 244.067 cv
cp
1 .478431 .466667 rgb
f
3311.26 319.831 mo
3285.22 313.376 3261.01 301.437 3235.46 293.479 cv
3212.79 286.416 3189.65 283.629 3166.43 289.671 cv
3146.32 294.902 3127.96 305.013 3110.42 315.906 cv
3109.27 316.622 3108.12 317.36 3106.97 318.088 cv
3100.74 322.031 3094.52 326.127 3088.28 330.255 cv
3086.83 331.217 3085.37 332.179 3083.92 333.141 cv
3102.07 385.715 3136.72 435.789 3186.9 461.353 cv
3214.77 475.551 3245.97 480.52 3276.92 476.264 cv
3310.42 471.657 3341.67 457.168 3370.54 440.113 cv
3429.3 405.403 3480.51 358.207 3547.7 339.716 cv
3547.8 339.687 3547.91 339.659 3548.02 339.629 cv
3548.02 238.838 li
3501.78 280.888 3448.99 314.271 3385.1 323.179 cv
3360.48 326.611 3335.43 325.824 3311.26 319.831 cv
cp
1 .733333 .32549 rgb
f
3544.67 92.2095 mo
3402.3 92.2095 li
3375.21 92.2095 li
3259.88 92.2095 li
3242.95 92.2095 li
3176.75 92.2095 li
3193.98 147.91 3229.64 202.179 3282.6 229.156 cv
3310.47 243.354 3341.67 248.324 3372.62 244.067 cv
3406.12 239.461 3437.37 224.972 3466.24 207.917 cv
3494.37 191.299 3520.77 171.826 3548.02 154.005 cv
3548.02 131.431 li
3548.02 96.0537 li
3548.02 92.2095 li
3544.67 92.2095 li
cp
1 .72549 .843137 rgb
f
2888.67 121.437 mo
2944.97 121.753 3001.28 122.069 3057.59 122.386 cv
3057.32 118.29 3057.04 114.197 3056.73 110.109 cv
3056.29 104.132 3055.76 98.167 3055.19 92.2095 cv
2999.31 92.2095 li
2985.11 92.2095 li
2943.31 92.2095 li
2922.81 92.2095 li
2879.03 92.2095 li
2880.99 97.8345 2882.9 103.479 2884.75 109.142 cv
2886.08 113.231 2887.39 117.328 2888.67 121.437 cv
cp
.92549 .333333 .572549 rgb
f
2915.57 233.904 mo
2965.17 234.184 3014.76 234.462 3064.36 234.741 cv
3063.49 225.682 3062.79 216.6 3062.18 207.504 cv
3011.62 207.22 2961.05 206.936 2910.48 206.651 cv
2912.32 215.708 2914.02 224.793 2915.57 233.904 cv
cp
.121569 .0862745 .0862745 rgb
f
2896.64 148.706 mo
2950.8 149.01 3004.95 149.314 3059.11 149.619 cv
3058.66 140.532 3058.17 131.452 3057.59 122.386 cv
3001.28 122.069 2944.97 121.753 2888.67 121.437 cv
2891.48 130.481 2894.13 139.575 2896.64 148.706 cv
cp
f
2923.67 317.059 mo
2975.5 317.35 3027.32 317.641 3079.14 317.932 cv
3076.57 308.896 3074.37 299.806 3072.49 290.67 cv
3022.62 290.39 2972.75 290.109 2922.88 289.829 cv
2923.55 298.867 2923.88 307.989 2923.67 317.059 cv
cp
f
3071.08 542.94 mo
3066.62 550.801 3058.17 555.533 3049.63 556.009 cv
3041.68 556.452 3034.74 552.666 3030.01 546.807 cv
3024.87 541.502 3021.9 533.749 3023.34 525.233 cv
3023.64 523.457 3024.15 521.746 3024.84 520.121 cv
3024.94 519.794 3025.04 519.467 3025.16 519.143 cv
3025.43 518.384 3025.82 517.764 3026.28 517.27 cv
3029.53 511.809 3034.87 507.727 3040.86 506.292 cv
3050.42 503.998 3061.33 509.069 3068.18 516.063 cv
3075.24 523.27 3076.08 534.143 3071.08 542.94 cv
cp
3015.61 433.986 mo
3015.91 432.21 3016.42 430.499 3017.11 428.874 cv
3017.21 428.548 3017.31 428.22 3017.43 427.896 cv
3017.7 427.137 3018.09 426.517 3018.55 426.023 cv
3021.79 420.562 3027.14 416.479 3033.13 415.045 cv
3042.69 412.751 3053.6 417.822 3060.45 424.816 cv
3067.51 432.023 3068.35 442.896 3063.35 451.693 cv
3058.89 459.554 3050.44 464.286 3041.89 464.762 cv
3033.94 465.205 3027 461.419 3022.28 455.561 cv
3017.14 450.256 3014.17 442.502 3015.61 433.986 cv
cp
2979.76 496.401 mo
2975.29 504.262 2966.85 508.994 2958.3 509.47 cv
2950.35 509.913 2943.41 506.127 2938.69 500.268 cv
2933.55 494.963 2930.58 487.21 2932.01 478.694 cv
2932.31 476.918 2932.82 475.207 2933.51 473.582 cv
2933.62 473.255 2933.72 472.928 2933.83 472.604 cv
2934.11 471.845 2934.5 471.225 2934.96 470.731 cv
2938.2 465.27 2943.55 461.188 2949.53 459.752 cv
2959.1 457.459 2970 462.53 2976.86 469.524 cv
2983.92 476.731 2984.76 487.604 2979.76 496.401 cv
cp
3370.54 440.113 mo
3341.67 457.168 3310.42 471.657 3276.92 476.264 cv
3245.97 480.52 3214.77 475.551 3186.9 461.353 cv
3136.72 435.789 3102.07 385.715 3083.92 333.141 cv
3058.25 350.076 3031.91 366.73 3001.66 372.77 cv
2971.91 378.71 2943.41 371.884 2918.33 357.714 cv
2914.35 372.72 2907.83 386.922 2897.74 399.575 cv
2868.12 436.725 2815.78 444.85 2771.68 434.35 cv
2769.96 433.942 2768.27 433.499 2766.58 433.039 cv
2766.58 436.178 li
2766.58 487.309 li
2766.58 495.448 li
2766.58 533.721 li
2817.21 537.246 2867.31 549.188 2914.07 568.751 cv
2981.45 596.937 3041.94 640.728 3088.05 697.529 cv
3133.89 753.99 3165.89 821.381 3181.16 892.47 cv
3187.48 921.927 3191 952.036 3191.46 982.174 cv
3219.63 976.454 3248.86 975.766 3277.3 979.479 cv
3355.63 989.706 3428.27 1029.92 3488.38 1079.82 cv
3509.71 1097.52 3529.65 1116.9 3548.02 1137.7 cv
3548.02 1127.12 li
3548.02 1110.78 li
3548.02 1106.88 li
3548.02 1042.84 li
3548.02 666.159 li
3548.02 651.916 li
3548.02 544.348 li
3548.02 532.406 li
3548.02 433.982 li
3548.02 415.476 li
3548.02 408.623 li
3548.02 375.924 li
3548.02 344.661 li
3548.02 342.543 li
3548.02 339.629 li
3547.91 339.659 3547.8 339.687 3547.7 339.716 cv
3480.51 358.207 3429.3 405.403 3370.54 440.113 cv
cp
.984314 .960784 .92549 rgb
f
3073.24 1091.59 mo
3073.02 1106.22 3078.72 1122.29 3091.32 1130.71 cv
3105.24 1140.01 3123 1137.19 3136.69 1128.92 cv
3168.02 1109.99 3173.52 1066.73 3176.96 1033.62 cv
3178.2 1021.67 3178.92 1009.69 3179.15 997.707 cv
3164.68 1001.66 3150.62 1007.06 3137.33 1014.08 cv
3108.54 1029.26 3073.8 1055.68 3073.24 1091.59 cv
cp
f
3453.84 1068.41 mo
3392.89 1024.22 3319.83 989.69 3243.25 989.42 cv
3225.91 989.358 3208.48 991.079 3191.48 994.709 cv
3191.46 996.57 3191.43 998.431 3191.38 1000.29 cv
3190.9 1018.66 3189.23 1036.98 3186.46 1055.15 cv
3183.64 1073.69 3179.58 1092.39 3170.73 1109.09 cv
3155.43 1137.98 3117.28 1161.66 3085.8 1141.76 cv
3055.97 1122.9 3055.77 1081.39 3072.7 1054.01 cv
3092.16 1022.53 3127.92 1001.9 3162.1 990.133 cv
3167.73 988.192 3173.45 986.506 3179.21 985.014 cv
3178.71 932.419 3168.72 880.009 3150.29 830.684 cv
3126.15 766.096 3087.12 706.903 3036.16 660.345 cv
2984.97 613.572 2922.26 579.936 2855.53 561.437 cv
2826.47 553.38 2796.62 548.201 2766.58 546.055 cv
2766.58 606.131 li
2766.58 648.668 li
2766.58 659.564 li
2768.31 660.067 2770.04 660.582 2771.76 661.119 cv
2790.17 666.866 2807.72 674.572 2824.21 684.004 cv
2857.48 703.026 2886.42 729.101 2909.24 760.515 cv
2910.14 761.758 2911.03 763.014 2911.91 764.272 cv
2923.47 753.116 2935.71 742.608 2947.55 731.782 cv
2959.27 721.069 2970.99 710.308 2982.45 699.321 cv
2987.08 694.885 2992.08 689.357 2997.91 685.917 cv
3001.45 683.834 3005.3 682.516 3009.56 682.674 cv
3010.78 682.719 3011.88 682.995 3012.84 683.44 cv
3001.88 709.083 2993.46 735.93 2981.63 761.195 cv
2979.05 765.696 2976.39 770.152 2973.62 774.53 cv
2970.49 779.473 2966.03 784.156 2963.13 789.423 cv
2984.36 796.708 3005.74 804.304 3027.27 810.39 cv
3046.24 815.752 3066.43 818.125 3083.92 827.645 cv
3062.91 831.081 3042.03 835.375 3021.43 840.68 cv
3020.05 841.303 3018.71 841.89 3017.41 842.366 cv
3007.92 845.842 2998.34 849.094 2988.73 852.202 cv
2981.22 854.629 2973.65 856.801 2966.25 859.521 cv
2969.3 862.734 2972.5 865.794 2974.88 868.772 cv
2982.33 878.093 2989.36 887.732 2996.84 897.03 cv
3010.37 913.854 3025.64 929.359 3034.18 949.521 cv
3034.84 951.087 3034.76 952.692 3034.2 954.138 cv
3028.95 950.934 3023.58 947.898 3018.17 944.937 cv
3008.33 939.55 2998.34 934.414 2988.55 929.02 cv
2979.57 924.067 2971.23 918.638 2962.97 912.787 cv
2963.06 914.857 2963.14 916.929 2963.18 919.001 cv
2963.33 925.691 2963.17 932.347 2962.79 938.977 cv
2961.05 969.52 2954.41 999.5 2948.46 1029.57 cv
2943.47 1054.81 2938.98 1080.12 2938.34 1105.88 cv
2937.69 1131.71 2941.9 1157.48 2954.1 1180.11 cv
2956.21 1184.02 2958.53 1187.85 2961.13 1191.56 cv
2976.58 1213.54 2999.87 1229.26 3024.63 1239.14 cv
3025.77 1239.59 3026.92 1240.06 3028.07 1240.49 cv
3067 1255.1 3107.83 1255.97 3148.73 1253.19 cv
3155.8 1248.6 3162.79 1243.96 3169.74 1239.35 cv
3214.88 1209.4 3262.3 1176.55 3317.3 1169.2 cv
3365.22 1162.8 3411.22 1180.6 3447.23 1211.82 cv
3468.62 1230.36 3485.04 1251.74 3497.73 1275.03 cv
3511.27 1279.85 3524.6 1285.27 3537.61 1291.38 cv
3541.11 1293.02 3544.57 1294.72 3548.02 1296.46 cv
3548.02 1270.2 li
3548.02 1267.29 li
3548.02 1218.18 li
3548.02 1185.79 li
3548.02 1156.89 li
3548.02 1156.49 li
3520.37 1123.42 3488.71 1093.69 3453.84 1068.41 cv
cp
f
3497.73 1275.03 mo
3503.48 1285.58 3508.44 1296.54 3512.77 1307.79 cv
3514.43 1307.79 li
3534.42 1307.79 li
3548.02 1307.79 li
3548.02 1302.27 li
3547.19 1301.85 3546.3 1301.54 3545.4 1301.36 cv
3546.3 1301.54 3547.19 1301.85 3548.02 1302.27 cv
3548.02 1296.46 li
3544.57 1294.72 3541.11 1293.02 3537.61 1291.38 cv
3524.6 1285.27 3511.27 1279.85 3497.73 1275.03 cv
cp
.478431 .729412 .890196 rgb
f
3148.73 1253.19 mo
3107.83 1255.97 3067 1255.1 3028.07 1240.49 cv
3026.92 1240.06 3025.77 1239.59 3024.63 1239.14 cv
2999.87 1229.26 2976.58 1213.54 2961.13 1191.56 cv
2958.53 1187.85 2956.21 1184.02 2954.1 1180.11 cv
2941.9 1157.48 2937.69 1131.71 2938.34 1105.88 cv
2938.98 1080.12 2943.47 1054.81 2948.46 1029.57 cv
2954.41 999.5 2961.05 969.52 2962.79 938.977 cv
2963.17 932.347 2963.33 925.691 2963.18 919.001 cv
2963.14 916.929 2963.06 914.857 2962.97 912.787 cv
2960.97 911.371 2958.98 909.938 2956.98 908.474 cv
2949.33 902.852 2941.16 897.094 2932.01 894.259 cv
2926.43 890.716 2920.67 887.54 2914.69 885.012 cv
2914.94 887.485 2915.08 889.966 2915.16 892.451 cv
2915.63 907.168 2913.49 922.061 2912.82 936.728 cv
2912.37 946.896 2912.24 957.206 2912.74 967.48 cv
2912.46 972.892 2912.19 978.304 2911.91 983.714 cv
2911.68 988.258 2911.71 992.77 2911.94 997.271 cv
2911.87 999.554 2911.81 1001.84 2911.81 1004.12 cv
2911.8 1009.85 2912.59 1016.65 2911.97 1022.88 cv
2910.66 1022.69 2909.37 1022.1 2908.24 1020.98 cv
2904.21 1016.98 2900.85 1012.5 2897.99 1007.71 cv
2894.12 1001.23 2891.16 994.175 2888.67 986.918 cv
2894.49 1036.35 2880.48 1086.46 2874.65 1135.43 cv
2869.05 1182.51 2870.8 1237.75 2905.44 1274.19 cv
2923.89 1293.6 2948.57 1304 2974.54 1307.79 cv
2990.63 1310.14 3007.2 1309.95 3023.11 1307.79 cv
3025.36 1307.48 3027.61 1307.15 3029.83 1306.76 cv
3073.38 1299.25 3111.98 1277.03 3148.73 1253.19 cv
cp
f
2867.26 898.691 mo
2866.53 896.712 2865.65 894.789 2864.7 892.889 cv
2864.06 893.15 2863.4 893.386 2862.73 893.6 cv
2862.26 893.417 2861.75 893.271 2861.2 893.172 cv
2856.21 892.29 2851.13 892.211 2846.02 892.529 cv
2858.16 906.37 2868.25 921.897 2875.64 938.671 cv
2874.28 932.178 2873.04 925.657 2871.8 919.144 cv
2870.5 912.354 2869.64 905.206 2867.26 898.691 cv
cp
f
2864.28 837.923 mo
2872.55 837.027 2871.17 824.17 2862.89 825.066 cv
2854.61 825.962 2855.99 838.82 2864.28 837.923 cv
cp
.121569 .0862745 .0862745 rgb
f
2899.02 860.582 mo
2912.87 861.282 2914.07 844.343 2913.23 834.634 cv
2913 831.993 2908.85 831.969 2909.08 834.634 cv
2909.68 841.652 2910.2 857.394 2899.02 856.432 cv
2889.7 855.63 2890.06 838.147 2889.73 831.791 cv
2889.59 829.134 2885.44 829.117 2885.58 831.791 cv
2886.05 840.895 2886.19 859.935 2899.02 860.582 cv
cp
f
2932.51 836.682 mo
2941.38 835.723 2939.9 821.941 2931.02 822.902 cv
2922.15 823.862 2923.63 837.643 2932.51 836.682 cv
cp
f
2816.42 813.349 mo
2818.11 813.313 2819.79 813.285 2821.48 813.272 cv
2824.96 813.246 2828.43 813.274 2831.91 813.38 cv
2832.98 813.412 2834.18 813.431 2835.46 813.456 cv
2827.7 797.989 2822.89 781.254 2816.12 765.319 cv
2808.79 748.071 2800.57 731.287 2793.82 713.823 cv
2792.68 710.876 2791.57 707.914 2790.52 704.921 cv
2789.85 703.004 2790.22 700.98 2791.19 699.264 cv
2820.07 724.483 2848.49 750.232 2876.56 776.354 cv
2878.21 778.038 2879.89 779.688 2881.58 781.329 cv
2884.11 783.794 2886.69 786.22 2889.36 788.55 cv
2896.32 779.934 2903.96 771.951 2911.91 764.272 cv
2911.03 763.014 2910.14 761.758 2909.24 760.515 cv
2886.42 729.101 2857.48 703.026 2824.21 684.004 cv
2807.72 674.572 2790.17 666.866 2771.76 661.119 cv
2770.04 660.582 2768.31 660.067 2766.58 659.564 cv
2766.58 766.499 li
2766.58 773.808 li
2766.58 785.787 li
2766.58 806.414 li
2766.58 815.018 li
2774.12 814.775 2781.68 814.853 2789.22 814.485 cv
2798.28 814.045 2807.35 813.544 2816.42 813.349 cv
cp
.478431 .729412 .890196 rgb
f
2897.74 399.575 mo
2907.83 386.922 2914.35 372.72 2918.33 357.714 cv
2904.76 350.04 2892.19 340.216 2880.97 329.091 cv
2878.4 326.541 2875.9 323.923 2873.48 321.247 cv
2873.05 320.77 2872.63 320.284 2872.2 319.805 cv
2854.78 300.264 2840.49 278.192 2826.44 256.18 cv
2809.7 229.963 2792.98 203.734 2776.25 177.511 cv
2773.03 172.454 2769.8 167.397 2766.58 162.341 cv
2766.58 269.972 li
2766.58 301.052 li
2766.58 344.661 li
2766.58 421.806 li
2766.58 428.702 li
2766.58 431.002 li
2766.58 433.039 li
2768.27 433.499 2769.96 433.942 2771.68 434.35 cv
2815.78 444.85 2868.12 436.725 2897.74 399.575 cv
cp
0 .756863 .733333 rgb
f
3176.96 1033.62 mo
3173.52 1066.73 3168.02 1109.99 3136.69 1128.92 cv
3123 1137.19 3105.24 1140.01 3091.32 1130.71 cv
3078.72 1122.29 3073.02 1106.22 3073.24 1091.59 cv
3073.8 1055.68 3108.54 1029.26 3137.33 1014.08 cv
3150.62 1007.06 3164.68 1001.66 3179.15 997.707 cv
3178.92 1009.69 3178.2 1021.67 3176.96 1033.62 cv
cp
3488.38 1079.82 mo
3428.27 1029.92 3355.63 989.706 3277.3 979.479 cv
3248.86 975.766 3219.63 976.454 3191.46 982.174 cv
3191 952.036 3187.48 921.927 3181.16 892.47 cv
3165.89 821.381 3133.89 753.99 3088.05 697.529 cv
3041.94 640.728 2981.45 596.937 2914.07 568.751 cv
2867.31 549.188 2817.21 537.246 2766.58 533.721 cv
2766.58 546.055 li
2796.62 548.201 2826.47 553.38 2855.53 561.437 cv
2922.26 579.936 2984.97 613.572 3036.16 660.345 cv
3087.12 706.903 3126.15 766.096 3150.29 830.684 cv
3168.72 880.009 3178.71 932.419 3179.21 985.014 cv
3173.45 986.506 3167.73 988.192 3162.1 990.133 cv
3127.92 1001.9 3092.16 1022.53 3072.7 1054.01 cv
3055.77 1081.39 3055.97 1122.9 3085.8 1141.76 cv
3117.28 1161.66 3155.43 1137.98 3170.73 1109.09 cv
3179.58 1092.39 3183.64 1073.69 3186.46 1055.15 cv
3189.23 1036.98 3190.9 1018.66 3191.38 1000.29 cv
3191.43 998.431 3191.46 996.57 3191.48 994.709 cv
3208.48 991.079 3225.91 989.358 3243.25 989.42 cv
3319.83 989.69 3392.89 1024.22 3453.84 1068.41 cv
3488.71 1093.69 3520.37 1123.42 3548.02 1156.49 cv
3548.02 1137.7 li
3529.65 1116.9 3509.71 1097.52 3488.38 1079.82 cv
cp
1 .807843 .847059 rgb
f
2826.44 256.18 mo
2840.49 278.192 2854.78 300.264 2872.2 319.805 cv
2872.63 320.284 2873.05 320.77 2873.48 321.247 cv
2875.9 323.923 2878.4 326.541 2880.97 329.091 cv
2892.19 340.216 2904.76 350.04 2918.33 357.714 cv
2919.41 353.658 2920.31 349.544 2921.04 345.385 cv
2921.97 340.094 2922.62 334.731 2923.06 329.327 cv
2923.38 325.257 2923.58 321.163 2923.67 317.059 cv
2923.88 307.989 2923.55 298.867 2922.88 289.829 cv
2922.57 285.713 2922.19 281.618 2921.75 277.551 cv
2921.02 270.632 2920.14 263.8 2919.2 257.124 cv
2918.68 253.475 2918.14 249.83 2917.57 246.188 cv
2916.94 242.088 2916.26 237.995 2915.57 233.904 cv
2914.02 224.793 2912.32 215.708 2910.48 206.651 cv
2909.65 202.55 2908.8 198.454 2907.91 194.365 cv
2905.47 183.191 2902.81 172.066 2899.93 160.997 cv
2898.87 156.891 2897.76 152.795 2896.64 148.706 cv
2894.13 139.575 2891.48 130.481 2888.67 121.437 cv
2887.39 117.328 2886.08 113.231 2884.75 109.142 cv
2882.9 103.479 2880.99 97.8345 2879.03 92.2095 cv
2796.72 92.2095 li
2772.35 92.2095 li
2766.58 92.2095 li
2766.58 162.341 li
2769.8 167.397 2773.03 172.454 2776.25 177.511 cv
2792.98 203.734 2809.7 229.963 2826.44 256.18 cv
cp
.478431 .729412 .890196 rgb
f
3174.03 1251.09 mo
3193.53 1249.25 3212.95 1247.05 3232.11 1245.58 cv
3236 1245.29 3239.89 1245.01 3243.8 1244.77 cv
3322.34 1239.82 3404.51 1245.43 3480.27 1269.19 cv
3486.13 1271.02 3491.95 1272.97 3497.73 1275.03 cv
3485.04 1251.74 3468.62 1230.36 3447.23 1211.82 cv
3411.22 1180.6 3365.22 1162.8 3317.3 1169.2 cv
3262.3 1176.55 3214.88 1209.4 3169.74 1239.35 cv
3162.79 1243.96 3155.8 1248.6 3148.73 1253.19 cv
3150.21 1253.09 3151.69 1252.98 3153.16 1252.87 cv
3160.12 1252.36 3167.08 1251.74 3174.03 1251.09 cv
cp
.835294 .937255 .945098 rgb
f
3480.27 1269.19 mo
3404.51 1245.43 3322.34 1239.82 3243.8 1244.77 cv
3239.89 1245.01 3236 1245.29 3232.11 1245.58 cv
3212.95 1247.05 3193.53 1249.25 3174.03 1251.09 cv
3167.08 1251.74 3160.12 1252.36 3153.16 1252.87 cv
3151.69 1252.98 3150.21 1253.09 3148.73 1253.19 cv
3111.98 1277.03 3073.38 1299.25 3029.83 1306.76 cv
3027.61 1307.15 3025.36 1307.48 3023.11 1307.79 cv
3084.26 1307.79 li
3104.09 1307.79 li
3108.01 1307.79 li
3129.26 1307.79 li
3146.35 1307.79 li
3166.13 1307.79 li
3171.39 1307.79 li
3192.41 1307.79 li
3197.49 1307.79 li
3211.8 1307.79 li
3228.53 1307.79 li
3276.47 1307.79 li
3282.46 1307.79 li
3331.4 1307.79 li
3339.22 1307.79 li
3339.22 1307.79 li
3346.75 1307.79 li
3387.65 1307.79 li
3409.67 1307.79 li
3455.35 1307.79 li
3460.46 1307.79 li
3487.89 1307.79 li
3512.77 1307.79 li
3508.44 1296.54 3503.48 1285.58 3497.73 1275.03 cv
3491.95 1272.97 3486.13 1271.02 3480.27 1269.19 cv
cp
.4 .592157 .890196 rgb
f
2905.44 1274.19 mo
2870.8 1237.75 2869.05 1182.51 2874.65 1135.43 cv
2880.48 1086.46 2894.49 1036.35 2888.67 986.918 cv
2885.51 977.711 2883.1 968.181 2880.55 959.096 cv
2878.66 952.349 2877.08 945.525 2875.64 938.671 cv
2868.25 921.897 2858.16 906.37 2846.02 892.529 cv
2845.27 892.576 2844.53 892.631 2843.78 892.693 cv
2836.25 893.322 2828.7 894.691 2821.38 895.514 cv
2803.93 897.479 2786.35 898.107 2768.8 898.684 cv
2768.06 898.708 2767.32 898.732 2766.58 898.756 cv
2766.58 943.529 li
2766.58 948.519 li
2766.58 976.443 li
2766.58 988.677 li
2766.58 1060.11 li
2766.58 1091.73 li
2766.58 1111.04 li
2766.58 1112.44 li
2766.58 1276.86 li
2766.58 1278.53 li
2766.58 1307.24 li
2766.58 1307.79 li
2781.22 1307.79 li
2781.22 1307.79 li
2849.63 1307.79 li
2854.65 1307.79 li
2883.73 1307.79 li
2903.35 1307.79 li
2950.63 1307.79 li
2965.74 1307.79 li
2974.54 1307.79 li
2948.57 1304 2923.89 1293.6 2905.44 1274.19 cv
cp
f
2809.13 860.397 mo
2802.23 858.071 2795.4 855.447 2788.56 852.98 cv
2782.74 850.884 2776.84 848.752 2770.88 846.865 cv
2769.45 846.273 2768.01 845.692 2766.58 845.11 cv
2766.58 855.422 li
2766.58 871.067 li
2768.79 870.204 2771.02 869.374 2773.27 868.6 cv
2784.92 864.58 2797.02 862.466 2809.13 860.397 cv
cp
f
2862.89 825.066 mo
2871.17 824.17 2872.55 837.027 2864.28 837.923 cv
2855.99 838.82 2854.61 825.962 2862.89 825.066 cv
cp
2889.73 831.791 mo
2890.06 838.147 2889.7 855.63 2899.02 856.432 cv
2910.2 857.394 2909.68 841.652 2909.08 834.634 cv
2908.85 831.969 2913 831.993 2913.23 834.634 cv
2914.07 844.343 2912.87 861.282 2899.02 860.582 cv
2886.19 859.935 2886.05 840.895 2885.58 831.791 cv
2885.44 829.117 2889.59 829.134 2889.73 831.791 cv
cp
2931.02 822.902 mo
2939.9 821.941 2941.38 835.723 2932.51 836.682 cv
2923.63 837.643 2922.15 823.862 2931.02 822.902 cv
cp
2821.38 895.514 mo
2828.7 894.691 2836.25 893.322 2843.78 892.693 cv
2844.53 892.631 2845.27 892.576 2846.02 892.529 cv
2851.13 892.211 2856.21 892.29 2861.2 893.172 cv
2861.75 893.271 2862.26 893.417 2862.73 893.6 cv
2863.4 893.386 2864.06 893.15 2864.7 892.889 cv
2865.65 894.789 2866.53 896.712 2867.26 898.691 cv
2869.64 905.206 2870.5 912.354 2871.8 919.144 cv
2873.04 925.657 2874.28 932.178 2875.64 938.671 cv
2879.07 946.444 2881.92 954.479 2884.12 962.742 cv
2886.26 970.777 2887.72 978.839 2888.67 986.918 cv
2891.16 994.175 2894.12 1001.23 2897.99 1007.71 cv
2900.85 1012.5 2904.21 1016.98 2908.24 1020.98 cv
2909.37 1022.1 2910.66 1022.69 2911.97 1022.88 cv
2912.59 1016.65 2911.8 1009.85 2911.81 1004.12 cv
2911.81 1001.84 2911.87 999.554 2911.94 997.271 cv
2911.71 992.77 2911.68 988.258 2911.91 983.714 cv
2912.19 978.304 2912.46 972.892 2912.74 967.48 cv
2912.24 957.206 2912.37 946.896 2912.82 936.728 cv
2913.49 922.061 2915.63 907.168 2915.16 892.451 cv
2915.08 889.966 2914.94 887.485 2914.69 885.012 cv
2920.67 887.54 2926.43 890.716 2932.01 894.259 cv
2941.16 897.094 2949.33 902.852 2956.98 908.474 cv
2958.98 909.938 2960.97 911.371 2962.97 912.787 cv
2971.23 918.638 2979.57 924.067 2988.55 929.02 cv
2998.34 934.414 3008.33 939.55 3018.17 944.937 cv
3023.58 947.898 3028.95 950.934 3034.2 954.138 cv
3034.76 952.692 3034.84 951.087 3034.18 949.521 cv
3025.64 929.359 3010.37 913.854 2996.84 897.03 cv
2989.36 887.732 2982.33 878.093 2974.88 868.772 cv
2972.5 865.794 2969.3 862.734 2966.25 859.521 cv
2973.65 856.801 2981.22 854.629 2988.73 852.202 cv
2998.34 849.094 3007.92 845.842 3017.41 842.366 cv
3018.71 841.89 3020.05 841.303 3021.43 840.68 cv
3042.03 835.375 3062.91 831.081 3083.92 827.645 cv
3066.43 818.125 3046.24 815.752 3027.27 810.39 cv
3005.74 804.304 2984.36 796.708 2963.13 789.423 cv
2966.03 784.156 2970.49 779.473 2973.62 774.53 cv
2976.39 770.152 2979.05 765.696 2981.63 761.195 cv
2993.46 735.93 3001.88 709.083 3012.84 683.44 cv
3011.88 682.995 3010.78 682.719 3009.56 682.674 cv
3005.3 682.516 3001.45 683.834 2997.91 685.917 cv
2992.08 689.357 2987.08 694.885 2982.45 699.321 cv
2970.99 710.308 2959.27 721.069 2947.55 731.782 cv
2935.71 742.608 2923.47 753.116 2911.91 764.272 cv
2903.96 771.951 2896.32 779.934 2889.36 788.55 cv
2886.69 786.22 2884.11 783.794 2881.58 781.329 cv
2879.89 779.688 2878.21 778.038 2876.56 776.354 cv
2848.49 750.232 2820.07 724.483 2791.19 699.264 cv
2790.22 700.98 2789.85 703.004 2790.52 704.921 cv
2791.57 707.914 2792.68 710.876 2793.82 713.823 cv
2800.57 731.287 2808.79 748.071 2816.12 765.319 cv
2822.89 781.254 2827.7 797.989 2835.46 813.456 cv
2834.18 813.431 2832.98 813.412 2831.91 813.38 cv
2828.43 813.274 2824.96 813.246 2821.48 813.272 cv
2819.79 813.285 2818.11 813.313 2816.42 813.349 cv
2807.35 813.544 2798.28 814.045 2789.22 814.485 cv
2781.68 814.853 2774.12 814.775 2766.58 815.018 cv
2766.58 845.11 li
2768.01 845.692 2769.45 846.273 2770.88 846.865 cv
2776.84 848.752 2782.74 850.884 2788.56 852.98 cv
2795.4 855.447 2802.23 858.071 2809.13 860.397 cv
2797.02 862.466 2784.92 864.58 2773.27 868.6 cv
2771.02 869.374 2768.79 870.204 2766.58 871.067 cv
2766.58 892.058 li
2766.58 898.756 li
2767.32 898.732 2768.06 898.708 2768.8 898.684 cv
2786.35 898.107 2803.93 897.479 2821.38 895.514 cv
cp
1 .733333 .32549 rgb
f
2875.64 938.671 mo
2877.08 945.525 2878.66 952.349 2880.55 959.096 cv
2883.1 968.181 2885.51 977.711 2888.67 986.918 cv
2887.72 978.839 2886.26 970.777 2884.12 962.742 cv
2881.92 954.479 2879.07 946.444 2875.64 938.671 cv
cp
.92549 .333333 .572549 rgb
f
2899.93 160.997 mo
2902.81 172.066 2905.47 183.191 2907.91 194.365 cv
2908.8 198.454 2909.65 202.55 2910.48 206.651 cv
2961.05 206.936 3011.62 207.22 3062.18 207.504 cv
3061.91 203.414 3061.66 199.322 3061.42 195.228 cv
3060.78 184.125 3060.25 173.009 3059.71 161.895 cv
3059.52 157.802 3059.32 153.71 3059.11 149.619 cv
3004.95 149.314 2950.8 149.01 2896.64 148.706 cv
2897.76 152.795 2898.87 156.891 2899.93 160.997 cv
cp
f
2917.57 246.188 mo
2918.14 249.83 2918.68 253.475 2919.2 257.124 cv
2920.14 263.8 2921.02 270.632 2921.75 277.551 cv
2922.19 281.618 2922.57 285.713 2922.88 289.829 cv
2972.75 290.109 3022.62 290.39 3072.49 290.67 cv
3071.65 286.584 3070.88 282.488 3070.16 278.385 cv
3068.33 267.977 3066.86 257.518 3065.65 247.02 cv
3065.19 242.933 3064.76 238.839 3064.36 234.741 cv
3014.76 234.462 2965.17 234.184 2915.57 233.904 cv
2916.26 237.995 2916.94 242.088 2917.57 246.188 cv
cp
f
2923.06 329.327 mo
2922.62 334.731 2921.97 340.094 2921.04 345.385 cv
2920.31 349.544 2919.41 353.658 2918.33 357.714 cv
2943.41 371.884 2971.91 378.71 3001.66 372.77 cv
3031.91 366.73 3058.25 350.076 3083.92 333.141 cv
3082.98 330.226 li
3080.01 320.97 li
3079.88 320.509 3079.73 320.048 3079.6 319.587 cv
3079.44 319.037 3079.29 318.483 3079.14 317.932 cv
3027.32 317.641 2975.5 317.35 2923.67 317.059 cv
2923.58 321.163 2923.38 325.257 2923.06 329.327 cv
cp
f
3041.89 464.762 mo
3050.44 464.286 3058.89 459.554 3063.35 451.693 cv
3068.35 442.896 3067.51 432.023 3060.45 424.816 cv
3053.6 417.822 3042.69 412.751 3033.13 415.045 cv
3027.14 416.479 3021.79 420.562 3018.55 426.023 cv
3018.09 426.517 3017.7 427.137 3017.43 427.896 cv
3017.31 428.22 3017.21 428.548 3017.11 428.874 cv
3016.42 430.499 3015.91 432.21 3015.61 433.986 cv
3014.17 442.502 3017.14 450.256 3022.28 455.561 cv
3027 461.419 3033.94 465.205 3041.89 464.762 cv
cp
.835294 .937255 .945098 rgb
f
2949.53 459.752 mo
2943.55 461.188 2938.2 465.27 2934.96 470.731 cv
2934.5 471.225 2934.11 471.845 2933.83 472.604 cv
2933.72 472.928 2933.62 473.255 2933.51 473.582 cv
2932.82 475.207 2932.31 476.918 2932.01 478.694 cv
2930.58 487.21 2933.55 494.963 2938.69 500.268 cv
2943.41 506.127 2950.35 509.913 2958.3 509.47 cv
2966.85 508.994 2975.29 504.262 2979.76 496.401 cv
2984.76 487.604 2983.92 476.731 2976.86 469.524 cv
2970 462.53 2959.1 457.459 2949.53 459.752 cv
cp
f
3040.86 506.292 mo
3034.87 507.727 3029.53 511.809 3026.28 517.27 cv
3025.82 517.764 3025.43 518.384 3025.16 519.143 cv
3025.04 519.467 3024.94 519.794 3024.84 520.121 cv
3024.15 521.746 3023.64 523.457 3023.34 525.233 cv
3021.9 533.749 3024.87 541.502 3030.01 546.807 cv
3034.74 552.666 3041.68 556.452 3049.63 556.009 cv
3058.17 555.533 3066.62 550.801 3071.08 542.94 cv
3076.08 534.143 3075.24 523.27 3068.18 516.063 cv
3061.33 509.069 3050.42 503.998 3040.86 506.292 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 22.1.0
%%Title: (bkstr55.eps)
%%CreationDate: 12/22/2021 1:27 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KB3-$RfCo)%CZRe%"WIl+l%NS&C)@?`"7?='dJu$hP#\#3+.hBh?@/<DW^@EVP)'t)cKnJQ0@L[PEfFtM;QX<g)Lno&Us,j?
%8Q&#8nL"56gVUi!lESq^"&ilt]/O'0F4=rh]llKpW&7cGoh>@_>L+;!Qe:>1hKuY6j,Zm:k*E3ua4]"h9%BA3C:%m6:<(@Igo-fa
%kLXSC_>s5!gWd(\)`4+1SIUs:Z$G3dSQpP7=rM79+-4+YC:hr844Qh!o+HU8]7q1!`+uqn#6nDYaOh951K3cqghs5=k0-4iptAln
%ck+Bg_^;du\X.l(ADSS]'>J'.C^@ILRJnG8rbqF7af$(Ob]@l*TK*\e?q;/0a)8lb+SSSq/W784U>W"pe#^)#O-q:u\s1`$X5F^V
%'#+KeE']"hMOg#S*NQSb1M`qdPu/5ob$*St8P3#NS)5gW\bDlarNVr>m^X(9jg3NPF\\rdJV>X#,VK(Vj)3+W]rkEuTVB8>[c#=p
%UZ0h.LhM<:c"0YjOQLa/im_gNH6!9(UXga"XCnVRQC$EsIJ9X067D_p*&bM,C#]XU(%SDp=;B2GZ3nZ^b>Q?cXak\1;9TkQK4/I&
%)BfsP,^(1o/e;1:bA)GG,8.I3Ii[\):9.QTACa^8Q?Zn%Z<$='#;:S;5eb_;lG<=.jXblmPC=s-E8o2`HI]\hYIddYSml7f.mkjk
%a?^!p"h3Nd=Z/q[r:r.4qq:MnfS^J:W_2`761;6Vn+h@XWiG]jWjGi-Bs4Oo]ql?c(YoLP^^PjE)$YX0#([X]W>#bUgB;$@"CpJQ
%]A#5pff"E/2gQjUI%J.EH0UjEe"1rY?qMa!>:LKpG;#3eTMuPp`1k56`JVU(@P;j5p8][Sdg(F9?M%!#KNE]+fLJK[42DJ+oZjrO
%j:Ijg07'O'KG;,K:kDeYBL7U5)0bpDc%HnX.VL;45[]6`]b=)=6u;skGk$C6JsM!foId]^lidH"q-nJUIU7E;WW5Hb&K'Itmkg8:
%Uqg7%o,1&*#`N^23%[ZG3YRPG:;7'#+U@Z-0:nWrS\PM$H5Fd>iZa1/<^:^1ZG;A/,Um,l=JDHOJI1<>Zk:pu"F0HGBjt[/G/-!:
%')W=M+W/9K+irICk$g:.8FH[.A=[ZRF:k).SR;^hF:Y00cm1n@0o(k_5b%qM$07*_018887A(n,D[#gQq?63)b^t)Ppjb("IU`*U
%(<eFd(B]Klim1uE:fJUkK(jj^@YbZs#uQ_i?h?YY5^O_=$]#P^JWTLh#9lb#mZB=0RNHN2TQS0^>#R[]mN.K9=DkA(?tM-tkUMep
%`ZKX*VGd-f'LhAG5/j.kM;Q^Ypd972(JW;TpbPY748KY@Q6gua<]I_Qs#H+l'n(tS>Yb3W5/eVT(CHlcq@nFuUA,aWME`QfoBe[1
%OPU.j`UD`Op`pgo/[+E86A_XEO?c<k5'-YDJ+Qr'9+6o[n$:U/:j;GnRM@Y^3D4EcN^YTO#?d1AQY<jM6W-NK8[mqQ(01*Qlc_RT
%0BXp9RJs+I=)sCV>Wu61RE68Vo@F$EYUGmE.QapObrYW2Bf%ZG7PL;`n-jKpR[pdm>_-3jp:QjGni=@Qi'lIST+2,2MDuB8:j5Md
%]QG-[2G6tB`Dh!9;0@R`V\BS32&tAkgglp,``Zl[iqO:PT)nBU4EJWe!H21cGh0MlHbn.S@dH%%RLW+,iEg'=m/TOU'H&<4>#&I"
%'4B!<p>IBAa&aE2[%P&YGYVA\q+Z+'"^Q+!-)?Aq,hsOIQ6n<3jTb=#fSa^p#<W7?^`1tH]2*Fn\);cV8Y2sdh.D=7J\*@U*XO9]
%&^;LF0$i0cM,u=f]./%H0Z6h=Wu\hSSeLN<rhLtco*WUP6/jQ)/$BEFnXr\?]3pP!^0qom]h#Jck7@`W1Tsun"5/TC_2nbe2^?%(
%rX.F4D\dDKOEWeG4DA+Sc@$dYVS/&(Y9kUT+7PdbD=G3Z<3UJ`b!G?ON&tVR9mhB@BNE,ie>Ik9L;4fT!-XC<Sp51p^cb2bM6tU6
%LnM,"LNss25;)Q#!##ks"9Qti9M*E9dnRs)45djhf6:4O#M>N%bgA`Gh[5=:_k4Nbet>F::D=r,$cE<+IkfgSni3?7QriAa0]d_0
%*.5WG&DqP`,YU#_bL(bo+*lD!I@Z-6T^GFJd=V,>&ViV&*HMt7.tgL,@bpQg$gc!(l&'C'*T7uchQu##*F/[\n/^?0!Z=G_&L&r_
%pCY]phuHWC^#ZdI-fVh$Hc%*iZ]IX0eLZer'm`Z^(R_0.Dnb'uY/8JH`A8gp@8rJYcbUs(:,J0m#gNN3E"6^_2<MPj,;SeZ^6o/E
%*G1[4@-CC7SM)=/--'H6(g2`8p\R7oI9h%`&:lK5,I6ioV6c>SJ\DpfIZoZiLqm'oGCYnm!9^mUCm"</^W#hM&;6U>/Z9^F8SFd7
%3"rX_46<sQ`Zu`X3YGOL!#OGrI`?A?4X]#rEZ)]p!Uc6hkW((IYqB*SA6UHuN7TPia&(KIkUp\&h"POZ\-IIgW$_n)^bh(Xrs>kN
%l99^lbloVV,+<h'g\2QoS$PZCICl*:#Oqn]]Qj6GPD*BP2NtPj'<bPI1smn61#ahur=l%/UM1!F%Q"ZCp4]j&q^JTus(:LCY94f3
%j5/[%d&4%6"^cPV5e&%eG9Yt$a8D+kQ;+%slke\u"q7@D--QO!<ZdD$GgB`E^gKN+M7_rgR7B"`jGIkVJVq6kA;<9/"^pb>)uS7g
%;o[XW?%T:;MW@IPU6]k2QA$NGXut-jU;(rF4[JfBH]p[PTt'6=$+4p7\en_=H$cW-`jK-4_t35i\iR-+RK^Y=6meNNXKh\n0/i>1
%4Zj883(&RF+^hV%pV`T1T1r^E4dLeI:>-l8FD,MhnTok^*n&#/'nJ.p-"BZ+;B3hl>X,E?MbYnI#[$C<=-F#(pUNnF4Yi(4oJ!-t
%]p)7_)9f8\ZeE-Z=\5i+$tU4mRlRojc6/!Y(@UjZ9L'-nUgk`_aohE!maE]mi=W%ccM&YPc`AC*5<FR_Nm'p#@htHkpgnN\8[CdE
%H)*,.(o+YnM0__(']@s(aBXKMis9]LgEde>L0dG'6h6?F^r?%-UVkd&&1F?m#eS!A><tgHk9`*N7(\H4%^<;p:`bMS32(P8SV3r@
%"&[P1Hb9`AUPpXu@[>S`,a.^XH?Kn>q["Wd/-dGQ'Xh?h_FPo2^5H[AdW3$:^a9`7rA-t?*eaU-f_&DgBB\]1Mg'Po&53NQ[N0#K
%0Fp7l/GCob4fkg]^j[opQX,J93[R%#FrgZEQZiYm4_tR<D;b2;YuSY[PH[a>F[NE*UUC2=6O+Y.3/8^2[$ol2]9Ui^9!A/)ZM%eX
%2OZeeY](4P+DQWSfhg[bmO:geQ!?YI'7WtRfST1Mps'Im@:MuO=[N!G1lD&jN5%PtQ/6mT7$Zg1Bj?`4T:sKLGF=2A+[b?'0pUHW
%J0.pR1CGD5E3NS>=_ZPu4i8!mr[Cqgj;8L&.3bgTClN.6&2j2CiIE/Ii0YKnq!92;ZT4V;,t"s8c5GG$a/1)ue0YJnb5SW,3-<!3
%'ppL!KX7=k52h),jgJ9!*Xr]N(VQej8Q^3f.AS.B,-*\4nY)BEeWt[qA7+-4V,^ct$e:8H[LS;415150\H(i_'G;@9T+b(K$nK6J
%-EYK&osb+84)uUZB&8ZF>#rR6nOfpf!A!Q#@lRB-:-5iS.2M@tOmo2"XdKU?SV&fFGI]9?]UORUKW/Bmg[RL\!Chc4M,-drF/l4.
%KXj\WF+2kV.f4I]([:HtXW+8qajeq!Yq0YY;&Q(=rcc7EO<PkYLQ<8H*01eXnE`p-m'\AEEs"`sj]rnLC_'S!;VuCWEu:gZiFh3k
%U39FIV\H0eYkE)2T_:t0$bUm$XlTmn?;u[bX7?Oq@nmuCBbp:ueQ\dLH77\:MIS2p8OUGY'dPl<YY!+ePqmC/_@Db`lO(@W%q2T'
%bM":Si/''r5,2"'3(pdHN`e's^*.f0V7<r'FkMW9<AKn7<lt0H'-,R@W02Qr#odY8m]sh7L&15Y[Us<#NQ=&7M8N"FV1CNrZ^qhc
%n)=`CQb?M*'UCqQkicO3*ThEp]DSXb@h`Hho`-^DUJC[5Ud#SMjrGq\"Ul_7F/JHE4Z09;C7A%*8K\u)q&Xtp)(I>k^.39m+6Ncs
%NH7'N4L2dKZG-;ml,;QX8;Db-TWH((3YFEn\jrAI9,l.@iu#'X?EHkJ%^7jOJ)5`&b!*WBA>^9adpaLKOSKG\hmVZ6&SBc:@GJ'5
%>^Qg+7\^UaL7KiF&u".m1*7\XYsY*$!QHh5K+tc/He\YNEB(*?kZlmnqUJbB`)hd_>N'R(>-RHOl'T(+LI[kO>liO9>Qh09SbZqA
%f-gdP2,X72K8?NY'p]:RWi$"R;=Y&<(H0MMYN'@9B5V78"R3u6(PB:1+1P0XJZ-]2U):l%Z$Mrfndcqn;(t2BCpOF##(5i?Aifo?
%<b0j[']V9r-3XVaJsRWXnU^<_l"SiNL]aW/<-1AJmb;6h5722S!EPBp-74b`&U5q%]XFGipuI,tbQX7X_)QG1$()C00rJ:a*O=d2
%cTE51pQHa]H:D\4*BpFObKYJodW1Q%Bji=c_g,"UA&?7n-CV1Af0/B%'8_\^/*b'_)QsAR-"9Rs#4*XUk1LE:m)tfQUdtl@2VNdI
%7AVgG+]HAE,/Q$fr\bQm.7lISR@oC(reOl[29P.nmD@:\OVF)Zll<6ij552cd0c&!7(L@YhFuLSGnhZ%V>DH3M\fP;=Yl['XPo-6
%5chpPi>uo8"n#jfaA`DUaDI*T&"fqC6'InH[,CR18*N)u`o4ffPXCAT@W5.81c\EZc0AaCPkH-,/RH:T#si'TANOf*9g8")e&p(C
%@Gb/rp`u8g2/-eJg&A(X)2$i::C^-_9u3fLia$"W!c4Q4YL"0ArmuPXL/+tNo<lQjgdeJ9X`<UoNILB2'<fl%r[prEkD$=0%<SQ"
%l&>/iIsWX<=_C74/p?Zi)VsOnrM&iZDi7AeEUIDpGi_\q<W1+AA.Hr#iQ"i.OY=8dS@73.`k_$S-L4^%94J/We_HIW&UVolIg2NZ
%qA6f&7dDB>5dV<m5J10p)&l\nV&Ag%k18?hL3J:QmT4mGNse!;6P?'DH'`8>YLRNB/3F9WoSc!9+LWfF<;Y3lh[nT*[Q8mp>1^]s
%>-5u7]einqmn[lWLaUe\VgR#VVVh6Z7m1lS=.*=<X&n!u'u\FS_F/OoQ3Qrn>H:aW>Aj&4>0c24h=ak2[*bh+UCZ!!c4o0V];TA2
%8PaflS2Y35p.[M@]]BF[WKq>Vaj5.N9.,.04\)Q%=;UVoa2/)F7DNV[7%[\crdR"6fPAi-fJuU2S<TEsKB>_m$KprKVf7rPai-je
%audO,NJ'=f_hBhtYF^eP<$Lp&[9g\\:V,):([5PlVF_R7AkoMaVT5,=5b:A2l=]U"EK@N=3nfq"R9VlbZ.!_D<B/1pb[Ra+-.DQ$
%,=gWI;F\dh._l#Wnb:q:XCYQn*B9DLLMWHWDYcR3eQ-3J^du%Jd5P:72-KbR2_D@TQ>7e$i6/XK!;oi=cNLp;6"`lo9,UlqBF)1g
%lg4)$ODFmPq>]^G@W"Afen8,Np*$NiC"+W#!h9Mc,5QkA["'$`^]0%]ddg`Z?3XVo?Xh4Ump[g:Wur2lhhp&YfSUNN,ebcA]u!M+
%Q`MV7]:u7V[.$MRmV`<E`4Q$GDuAE*g[Dm?j`N(BV1aY*;,pUpFcLAlPnJ`O[ZVtO1'Z5b>r+=$_JX18Xe6E:OtQ(aT^01_RhVVB
%0?EH][naK*@d&PT=GCZP7c#O1,uZR1;`-G]0J1c9e*d[c<[CDD<()oS>oI26XFaHZ-'1s224H42EbmGP/ijWN)pQbNZ#5tr0)`tC
%[iA95gQ^P(,HB-,OM%N%!sOT42UK4[>VA]<A<GN%fYh,<)kE/T@'d+@]MV*&'J8P$1tmEYNHeH"Y`Tns[.1+'7;Of:priK`*LdR"
%Mka<b*o+kiDgZ_NGb4'd^Ti_iH/pop;Qt%n;Y_#"C+o.7Ydp9fZZ?nSRBG_[S=3A!jUu4."\b8(*'+8[0c^A_di9*]PT@jufanl@
%Q+(gBZXoV6[go9&GJSaM.To1_RtjNoQ4;e,/^?j0/;b`XP$'Pu+@I:HV?:hD9G<!]&Vkn9OD`a9%'a\!13k-#2K'(D3GaADTNI>c
%&oHV`.;UJP:]X_^c/?k-c(_O;"^qfSnh05SE$PrGYb;LQoKn1R.(Z4>_!AY!KD(\Z,7XJpCD(l!T[W+))u=/5O]:P;/?THo'$d?o
%\4`jHZe.^YjA>Y=!>.m>%#8R:2I/EK65QRs#a?%-5Q`P#@K?k<EPS;2T@@0KZ8.uc%Q<Ugg>`6lX\XWKX^B_5X[e):-L(I^s7M@"
%PR_:tdNo!b.9TQi(L_n][j#Ms-fPWS%4#G71KiWm(-!IXUgGBd((2+=S-EsH!`q4@6UTX"fLXe>(,Z`3,'54<94u*#l%U,:+4fB%
%-]7oC)U:iJntd=E<5u.f_ZEGll]Qf._Gl-FPZ2I@V$&d[Lh75cNFD%3lpSPn[MH](6Et2=Z,e,T;[g3PWk:XeY[/>"@Yj@AHlMDP
%T=hDHfLiBf&8S_q)X$l"!%j#"c*fWN_%oBi9<:N:kXJTVLZ4a&Z'i%Gd(("9f''m-1,["K@`1R<R?V):+bLcsOJB)n)e@&>Bm_L[
%<g$J)<q+)XCl(@7r=C8oLkR7n[aAJ3Yup$.$mL9DaYm*mVbk?q@I8Zik?5W8#ZK,.46UDs=dU-Y2ZM\"m`u:pD.-FIeM8t^\#1D(
%L1E"sZ>&N3!+!o#Z5fM9Di__M+;e+a0S1kDJ<8<'agT-6mApfbNCS0V^i(+3]tHa+^ERRP6*X\SG<E<o6s"!j$Hrks(Npl\FrTd%
%6<BkcK4)aX#C7*0PrN$$kgC3S*1B_1Agt1J-oneR&Uqi1!+p6OAg7F'B3\8kIL)g*6(!WC/>p<$;$__,9S/I*iG@M)=90S"#fBV/
%j&!t\:b9Z'=HP-C#@n/\#G'*@dKDH83Aq.sclaaN5p14k%"dR["?$Q#ZB7uiblSae1(>oIE*@XR&4Rkr%,OZ9)2#@PIi*1thr%@a
%bmZPKhd@pDX4%8iIHF5sjW]eFUhg1^;%V]>/B*3t5Xt\@_+t[60j.q!iBU^FaGQ(FUqDf-Lk&cam#VO:QnW@FP8QT(QOq=C1.)[a
%qn[V%23H[E3\3?:OH8HMP+Y'p!XBAuQae:IpJN9oB#-!PDMI4E\/LM_+^]sWA\i!SnjX8D^QAre0Oh2'$QoN%#;4innb"T%m#<>P
%Sn(R"Hq/*qCah8*fQq'p:0<BE*h49U+o.h.R]mT/-jMG<OG$M>2291<?H@\i\0Y'4Z5ks6*.I_g3t[e^bEmp38MGNpLa58Ya?h9[
%OGQ8H6ldZX^%OkZiB6]P*&J9J[mQ2MF*?%Knf/lX0qJVtn)\r4qZ45q&Dg825nX^0$^<1CpDiK#D0C;")>;k^DrN#8#%MDlp5u.<
%eiC,F;Q<&3l[`CW?I9)HS<.TNCQ`FqBX2DoB[Is?Y[r+;q]YCtM[t*8aSnq:/g78aaJf4IV/cZ@Vuda1pk8o%1DIZ:.P[<P#obWd
%"U5^MhP0!2;CX.IQq3qY=M,"'g.7Tg0Zbf3D'N[G,,\J(CKnlso8'tNaOROLL]jqOf^0da#7s5mP/n\i;oBHm"K)5'%f.1Uoh>qe
%2%K(d$LBdKcZ;'!6@"3a"=i".,d%Lh\/moC!6iYe!3-$tSG,[HmhbP?s4Fm$\c"*8G,.b[EcsZWGLGR=TQdE;4eAuIdgE0d%OY4&
%Vc9*UYj&Y^ntMkNAikI9D1nmslmLNk::D6G3_Hpl::aFim4O*L[mR,RUl:?&lB")&^f@rt7hPGP&#jXnRhdP.(!rnh7O:!MbAmb=
%juH]91LVPO83*u"83H-;M+Td-4FotP/7_)?.2o,9ZC`DgAR[8*F.&E=`&O/U'Jad+gSW*G0\m_-^;uJ>e$0CE<t^9TJf6oF5g?FC
%qIt<C#(jOD?O#m;PEOho!#aTK:_GichX$K,[1;#^E@q*[=i[^i#Q$.n'p$*GWb&c"U>,N)B%KLan^!\.*BR?Y:8_)TmrlA;;J$)_
%:93LM_N_7([7\WC1PCoogT>[oSb1M/8]M">EtPc`=N[_9@*na]''P*TlhXFZ?M3lh1BalKh?Yg:+95Z7&3:7aO!]&9eFC%S0Q6a[
%QmiS?5Yha11b9T#GoW5:V]1>^.8]e"3>Bo@c6(S/k:-WZ52;rqEH]Zu>4]m"PK0FtXe`afJ6(+#GhQtCVqX9$f"?=^)c$jhCFh?[
%_'c!o=\0]rb.6:#8hKLY(RV*t]cQr?+\1<+O'KkDGACnT=9(<0FHl=*e@RYpjc95U9B389^luX7hDjb!469m_0SWc#iTU!fBlH^1
%V_g<L0T\e50Kt<^:<+63fYU/M@>_Ik=s#)_$.D[HPEIdaEGlg8NMaaoeu$5/!hC#l-]N#Em-TVXC"':7'o+-=078plRnm6^Te=)n
%'cbGY?bfj]]?"g4;n70'2c&Q7*X_L<D??f-2G`Ee=tYEag<2snI<Ujb'Iil@Q^`_7/qjAPF1HQK2p^UJ\_K<6S*+h^J5j-Z\_O3*
%#P+C,85+B-P=i&k-e$1_5J5^lQ!7u#0gBap3#GEjra#7RXmpJE;^lrUWr1Mr<)I6IHr>3[f=Jj^eNZ`K-5d!R\D;>?lIL$oZ((0k
%3JFtCd[9dO"RUOS*7FW8aoi`%3q\kdld`MTBR?9^g+^FUI`T%DUm@o<';F<"?+=J7V!Q[\e,tomP7k>CL%obU@[Wk3rQ!IXHn=5@
%J#:+\^s,Tj5=1"j4a#BtVDkh`i_0r*'@P^*gWDJ?m>bCHK2mDfM;]hY8$Mc$ZVgI7Kj`DA7MCe^IOsr4)Z>qQ."=rF\(=Pe1$o\_
%3?9p(f-hs`@iRA+p!/#t$J3G(>K2N'Wr'M[S]RPfQ?@cSOb'Kk%0#!9cKlP4Qo5>6_C]"'$g-Hm+J;;_<Z2s4'gNBkBN#p*?`Rm[
%:o>7f1bRj8Jf`tg#']@GU"cSjY&:mIRUaJrjV<:(na[":BKCOula_*78&V#Xhg1ban#W&.ET"5W4eh"27Q]iLm;DLTQ`aeHQI#I[
%T7LVD5B4Z^Wh+fTdp=Fr-$[mf.[,7h:1_R,)RWhnoDV@%f^>o7a!>:r>R*t^C[%_$)ZelmQs6Q@gb]7GB.u9V/#Si4^gUi8aen%;
%^MH,`=hNF$26Z5;>:FsI'W*$p1H+o<ln0-Y]6);&ROa`e`p8,<,i!tB@8gG;2son$icrZ5kk>4_deHfL5/V$LVIIHM/&n-m\j&X%
%329RLT;N!MB>on-3/r<7D82-9n$W*m.t+b`G\6jX"iJW(M$mG>CG.#]d7#OYRf3skmR/mNSjKMj`kA06ju1e*1'][7*+R,u\b3O8
%47R(`V#*!(SGKfj$GYU8#6Jh)?[nCKH^d@0h5n.un&DDP%c$2?\t%^Ps&(2mpJjt9*R@[`RO7G/!2nP,9Y4HBEA:^U;[I%[]fT"e
%;k"dL21Z\Tr[JkRVi,-t7Z#i@gUC.pR!)J*F"uoQhX;[XZ!_a^4p<]crUc=X[I1RS:A.+s>!?Vq3G1,P3[r(W4HB!PA*$`@eP>d-
%)QY.08R[n$@)PnM-@a-.N5mRX5:Ij2;P#di;6ABsSS))p*&>sHcoPJ6Vh])bWI,)`8YMlV5c'Y+DFjnE;J<SJ5MVk[:k<EI\?1uj
%9L)@31FWro7[eFn0f^6=NHuLY>qU>>\g,MU8_C?dn.\BD(Tk\O)EYrH'?r)`HM&U"kuW>a$LY]hfiG6NR4)!rTU"uoR4)d2R?d?^
%%%iB>M@J%;(jGOEPWSfi_"(bl'd_*fb3%l]ppa&;\L;11DcU,hN1Z#k,.*l&F&>gAeb#JlE[Tjtnm+9m,n2X$F&D)_UAQ[Wc(-s5
%7K*gfMiu5=9Y4HB;s0m>n'\`pBonaJLjIXu77kIVBiju>H7hhc/tIo`#+8WAqLA)bbq,GbPDY^9YSr_dj_Wg:0@^qHF&'s9bpd7[
%&\iE&P?bqp\ppE[HWK'O_OUSJ'r"k'?YM!=o/lnEr.\d,mbu?u]Z\OSY2.+#)0<EUJcp/,2RdIC]/C=GXk5t`4C#L&iL381SQiM4
%<Vp]=[<]!"Vh2=e<L[4#s0Pda*t^Q'_"$f+,=r4Tr6n$=1N`\:Y"#m%,BL"W.7c-oUU_9hA4Dn@HA]$@"k(Gj:.U>[:+@1ZD`k62
%-Ldu1VcPs[\NeCeE6[FMa`=dqnLgj7iQnMtS-da<geK$C/K/*&P@A[H8U%$LO4O6C1_[VWbrAW^q_t?cGrL_Vba@:PAn%^[BlKKt
%Q"GJ8Q[_fj1@g/DARlhM;?j<6I)kCSG%?'H2(k*95]1Y`QY?hemaa2mrWe;JABrLqoq:iC3Jfs@3rd1Jph/Uu`RJ6l51EERl;=@A
%)DgdS\_O]/2VQ6i&%faGe3C<QP;EF<!5"Z+!\'"Tf>D>pEFod/`,`:#3".mGPe]SS@-F*^LLI)9-#c\Y)i$7FjEcDAjHbqueGDYC
%<UF&IGb$ZDI\qMQm@;<mq8cobo>NfM,\QX4`%?6r1FE:LYOn;+s.(83S^-91'=dSj[)qkZ55mWn0$4%dn,2tLY<Z]Kr-&]!oAdUW
%j1f<'7lg^Q8/j!&an[[K.BRD\H+da;b]eN[GCId1[d<eReS:(.`\XDk]tEV1@'r\;W(b$th@:3WH.)!'8]lCn-_R@SX%N'EU>,D4
%NB0CqH5b8Zf4/8e6OHcKD-\8A9ZsdgplsOIC%o!KSD59cPT$<BKkt'=Rod[[4f_H`)tPgf@pUMZ28Ri@iP"h<f`\UbNQ[XNeMe$c
%H5ghAe]YtPO(tHPFZ*E0AY[XnlU-_Kcg,5-\E-JCC8P(MYE\^W)!o17T9TI*pTNjV[kmCHHjSU9+=CEk.9&=&h5@blU?ABf7&$sT
%#<4Lgp+Ss[\R%*G5"p+hU##@`nCF^KG3-MmNm+A^3Zmrt<:p%!9XS("X"F>(7$r0K"J[U@_TTU]1,$;a$SV+gbIm="0>,L:04Wfj
%Q!$N6`NR-trFK;[RGnWs??j"TiFR%l`8*H"B5.cE-[rogdhS[jG"M(l]?S9rMCe@^d3L<mCu9%Qbmaa:2k-0E*2`[H'5;EQp7"dP
%57qc/^#GTrdDR\cPfJGdp!/\(*EmBR43&d.BQN>r*C7iT43+sP-`1*[-$';Or=3CNI,k,79R#e49XisGr9d5L].ZlN9`HpC.6>"[
%.ucdU&#m*T=66?ildYj4r2Bu/B)ZiE'G$)&Uj,cd"&2Cpdblh'%jZ,hF5#/SlE+.JihGg_8/k`=-)F2)24ZsB*<1pW^u+,=h+S$M
%NAGeO@G15\mET9VZ77GbQd@69h3gVRi5@b7Ij3iVQ1Yhb9+ti10ZH_?7%.e5K#+UkV,<jLWg-P]4o0,]Y@Gdp[X?-\(rj4K0gdtG
%bh"SN4&EsgK>Y?^0t!G;XQfYqN\R_I9H.X,Fc:Sd@n,`#s,Fsh1:3(2lAVdUStD;Jj\oM5o.6/m>OK#/Q]5aKPNG<KYm?'$:ZdVh
%Cl2GnS@`XAeFL=t]m;\5*mb!R.GW&pl6:H;Siuc7bom5^8#kmlj1pjFWno`"<'02M`O81FKA]M*[8aX^TVkrjm^h)Dhe6\PUS5fe
%BIJl?RbqbV5D#KbI>6nYjr#4q9_R=*;DuM#O#i7WO`+`mOiO$*_bd@Prh@rQ8Rh`;/7mc0CPj1B\S]]s.f>f[>Naf\4NAuh"m:(o
%)1p&m04.A;-Ho#[p3%6tbmU@^df0%K?SbdX9uF7c5M[h!$IaI0=";agSWga]5icb6p&G&cb#2kW=>kMkGj4X^ie^l`W#2/dA>=E%
%hT)b-(-fq9FIp\KH%:/mpHLTXo5&<9c-<T*Gr@Te.*T$.8S)rl_Z%0=c/$JtX&@_V@@kb=6TUQc;=emIT$GU0\Tp4pO>HKMmQ[/c
%l19"7k0ge?q$nZll&_;+PV/6tbYCe)[aD$Y[bN]Wn?1qqGO;(-.5HSP%2gLbaJHP"IRY@\2tQd/R,9!,IU@pL]W]6VOh3]plef6=
%`ajtS2$@sZU#bP&27ItHOV(<IVH^3HI]fRumC#)@CMBfu52;sp0'0FkB1@q[i\N*"<$K/J8M0dcpPG:S3N#kck0_!JX]h34oU*Bt
%[V`IFQhSO#WiOihrhHf$8*O0H0teSS-$#uW6$6(K;[#2gkUFNoIk#3I;<Oj]Voe=PHV=dY'PET9]<)IMm%n8s&q$:drZa6t5AtaX
%r)3A=#iG0([uo\D4C/K3;O3)JYS/gXC'o%Ar`-YrVE-mS6;@k0G,u@e-dSt'T*eTl2Z)a!0!G2qKs20ApB-b-1cL-9gcR?ZlH%ma
%%i_+.kTE<u*?]fhBY2%&`:-FYoRk[0s(jUYhQ7?J]$,f$Gu4,@K;*WboWKq/`7Nt9%Z9Br-r5-Ur`3IF4:%Al]7467G<H?]c3scC
%P^'#17]qLef2(=t9fER"D@VlG6(Mm5d^YJ+$$qd,FjK=HMJfKK\[q</4f2Va]]39Z$+X+(*4aUn.HK8E:9d*S43-Rk;Pr81VSQ]p
%S`;<.P.?48IYT]QNO/'mB<d%NJ(W\d#!K`@G0CF\Id&=o;BkP[,Im4#*Js4T%;*Z;$>(WGT?j/*2SUuo,igR&q:hQ\@EWm*o%,_B
%$NOhUHq_6>\oBH0MOV*!K[\X@n+MQ9dUkPHX#4&cUR3ppB&[\3I!>6!+2@f4\4Pu4bhjXT2+:2&of'up]aK&+piTT6M4eqb5IqnZ
%P1i.<2jsG&m$WE7-$Sbk]3E4G;f<<4:]a5DkqBYso:7j;1'>1WH;TmT4G\/-j68Ou;HupUCK`Rd!VK_Sf^CH*<iOfA@/XTh336Xg
%eAXN;H-L]"[f2YESeSYZ&c[=5DN`SHe?,'uB@;`Lc&@mTMqRHQg!4DkR63E?ZQs+mM4P^(.1TVrI+iW,m>Ees;OBe=^\)mJo;]iQ
%#G*^`7gl;cCa;.sI15*FTCV-oC@_ksn&jto'['j)MWHKp_(?a\[,C;ndTNh]#p4o?D)sPF]kl2Z0FH]IB[q%IH'd'-I*_8r]km7'
%9C+a?Fn'q%chkP1S4_hsbN)j_p/U7jXh0p+.s'@C@#a2iB#NQ=>H:aWKgYT#:E,;I)W&*fWr]iaQ82Tm5sQX)S6pg#OS'1i_cF;.
%T*M3+)-N-t7@PJrIerf*Di9$=X)gTd"E-XJ?dp$EeG0pFjPi[cK+"aR)3XS(;Sjo1;S?eq]F[WV*7A&1aqej_>\Z:=>?83YeO3`5
%eTBP"<;Ie3[Vk#]XkAl5q&S?Qe0R*7lePA5[>/\Xd.R]8OZCL1r%)D/^LQF]B`htH?nm$q3([pkFDW3k%'B'l3HAnAVrJ(ONm;RL
%o#6[1(noc"EKM*&+uJ0T7FXuuq#.[snfUOV^?$;bq7G*SbiJrJDYZ=5=XFtQ2T'V!)!6&jQT=ahi<5=?aLY.DZaQhNVSAK8oR!cB
%C]"cfY[u?cm;UDTkYB<RJI3PH7CIJP)=*CN&CV1Ss3ltC/Od&Q5&2X*/?,lfs$HK#RBQZt2Jg84\0^D'&M>C7IK3SLn$l4*<<=`i
%]rWJ^P!W\9Fi.\*b.;%tZqE:dbm]?[P&3(_ZNZ;/>FHTXXt46UI2(rlfbSQP.r-mE#^S#$M;F,DhPq/B4_rb$a;>>[l0+*[C:JrX
%+DBN_ZDHDD1u5J)E$[b:+\C)#nhCCp&e./XOn"H/Ut@)q+tH=ebLTZ^'n]YX.MF^p/V/3BU8YA4Wo7>HXb`:1gX>I[QulK+&[IR9
%aI3mGbQ;R&qP)C[X\;PC*)%LoWD"Qp*))JOh,&>Mh#dPo@$XS<bG6HXO!QTq@5JX-ks3-c"/4!):`UJ-$qLQ]8@fhI>a#FTRhfN;
%K?.J>73OilpOMFaTT\2<B0ofXHCJ*f)^NpTeX&J=e0L`1&7-oCG%1iE'b%r0d"oD*6sn]QF[@=R6;qG>WMQ$B$e?TH@XX\5[%TCG
%A32N?7"it\(eto82.]3-7LhBlU*`:W+%"LEb[`^l#criZnW^U1/$c@j=T\`)dGg,aKc$U^Z>RYdO_)c]!LCMtbnB=s#T"CF&-n+>
%.G'3G1a.U\+@S"oA*G\2-;0+H0rlTK]V5`/BI(cSU^GiAM.L,_=I*Me,e%l$AP'o<,Z>N#g+8UHN3gc9ClmA0Ql3!N^lTHZWYpqi
%ZY\);L-scjeh,Q1%:VS'-2t1^+`)GWJXEKIMEoBgb/kbK/dOs*FHG#cCW/>JBF3nOaBE-+YY&=R!bmulrP0daAn^/]B-7pU>+pGA
%c"o42h+lUi^gcP[;kXD`J^K^iQqEj*@Bq4m2+-JZ_'08D1S@$si4=f^V,1DN42rILD)Gp><)#5q,[IlZhp5EA8B&[tee_Kp-(p_Z
%,oi`_'J6`5U^R'V[6fc4Ud\@Qp50jc((1n7'bQ+,Nt(t=C$_1lAfrL0O$q8L)drtK+;)%a*?kVdbq]]Z"<N_:0V4`81Wc;R/;W*H
%>7Z\r-DJ7M:.nVFel4HF<6,sk%Bc+9Z2m:t6&"F-Ccg-kX<94OC;LiSn];X\CTZ7)\n&p!!)-*e=^tI^?l!F=!JtGZ',Wd&3Jt&Y
%rkK:$R8qprU_#k+akRaXaG.to'oV8p2r=fkOMtI]Z\g:nW1Y*2-]o:#_\$Cp>o>CZ'ke*30sV`6P=6$K'BY%_Ui&RA_B@Bpg!*Vk
%1b`ANSbW\>dVN99CtgdU:.Gb@X7&Ok:5=7X*mk](D+cE6Q>$\O=%li)[#!i)IXJ,XHT4HWb!%in)o,0H@EWOt+IcJF6h5)k*bc@)
%:$<CAV1_1Sk\:e%JuTD[28rDEjM4Z/@`\hK'=Ne,Xg#WAJecI[N_.)'qZAWS<Aq[EB'%=;<["3sQ&LN<@mP0XAOu6PF?,Zq6KeD/
%1!ECf<ll&emEX?=,07\&'S0jkY()K!*s)Z=0eJeV&P!dpWVWL;-G.AH_NtT[jt$$kjTF/LpLLX;Cdk3BC2`qMY?5W2'\cH<!RkWN
%CFjJ>'UphdKJ@%s$#fck.lernDOKTOKuA"hJM>B8HsI+>Ad$M8.I;[OW'UlGnFR3:WrtmO@5=si!Gmb_+DdXOZUu.?#UWc&6R[O[
%d?cuR945%sX;$h!-.2l?:*<i-$s$,"Q'7N8'#&srN^=2Gb`a["(8i[aH+JU_7?.nX)K6!&Ws+FHrSe?(ZBeBjDFSrU)\<TnYRMDL
%0it'G*'?Tf[(rSt=2L0M45%6e/A]+0,HAT@n8^Aqk+D;WOg4!QDIRV!?\5Nt[\]M9i&qttfb[.^W[`jf<4E"gg*MFn1R$N`3'H5l
%FLB0R.2H_<gRUSD'aeQ$#n.U#q^!*/'V:PA%b$HK&6ief-EE$B5o$7R'VU"Wp^1P#dPsW;bDu<Fi./=YkQ?3Ded]OF2%`[=_1I!J
%KHYud#n@9M''3G&8Mtlf.:bU+$[ec/LEXCD8:H<8*!\5;E>n<FLe#"S\e3LIDHHPbYI6NL;GVcK7=b<\.[)E?SL6X?c5SVZlMnih
%M`n2[B(-UBBU$+faRBRT#@pss>72@J&k,"ueT*Lb9'HG$%kgTY3%Rf(YD2k>Af4W8?8rmL"CU2)nPQuJp;:aT2o_0`!DGSpSf/0C
%VOdWFo;&BFlJiD<!3Xm$?[H;OABZP15Zafa_=METJd%4MiYJb[R1ldqP-IT0BH6s-'T.B8P`Z2R(=(?jU.V>WUsb2YS=[55gtjH\
%s%%&D#^/63T("9UqJY._Jbf2>,.cWSkm.dp;!;>68c<#[c,o`rX8^`:\Qc)h^A)1FjEh(^H+R*/h]4L*CQaob48.I`#aDO*1_2>!
%<<Ssn@CsQi2YKIF1&I3nZ^QbUA$=8A(&XR7S5_9J8q0ejj.BbsMsqmf!]AW!>ba"\YOb3gEQ,Y9d5c#C0?9\G`Ja!L1c6EZgI?1k
%=K^&R=/I3sJ8:X3Fkh3^[t<Q'?W`9cNu.D\i`AZKa]o68Bj#L7c`<-Y^53:O"bQ40b&SimR^oRGPAPD'REJX+g[nn`>uu.j)e[dJ
%\?4&%_eiC/r04dOS7tF&Dm'A#o=22C+R5C[(:psV'13Oi)_90J2J=oK'Uip9d_"uf[sd)5`U.94'2c^$brFNS,BN4[4'nuaf,3;D
%m7,@fGSu0pS3Q`R<BoV/-ADL]FJaK8D:.b<5f7=_diLKPSS>Z0YD'YKh-+oWlGAslBSn[;ed>Fono--e@^'@_^#ZMN;@XZO*]nBf
%*HHc$7kLq3[=3@g;t&%-VHBg@h",9_g'QQ+CoEX<%NJFUo5=M^gHLImW^b9jVEaEjRZQEWk=jXSYm9-/@q:nu7&L-jI5S1Nil;/)
%;XN>Zp3_lL-DM9@1m*-,S!amkg[XRe1ZR32`!RkiLfo5BICF[YFYCGP;55"D@8`_Y.>Ea2Zl\SjWAVuWg9K8rf%SO:PJ'a2c$8,3
%IQ&h0@b2M]>HYrskW!G;d=1'Q*5GH$EtKU$Y#UsQ!(p;lKEPOhoK`B"8@0"8>"ntH+'uJ[\H*0mhdC<^1sJ:?)F(l8PNpH\!D77J
%HFWWC2$7@L#(VVhP*NBDbGq_9h,:^_$RkMaCCq_pG8Rl:I.rJ!HgZ((ID8X&CW,g&!t=nq+Z*ll[<;oaf_GGEU-D@8L*eV3[;+O@
%ZobD0[F]298_ea),\18)>uJ5W^A#OG%2daAS915gj`Z@he7K0m63hODKq`\m68cTml47e<VXKIT[.n9HQqtkEP`ua=iId6plQ%L;
%,3A.oL0r^YX\fsHjp0;3"1&Z()7,VJXbp0t^uESlb=3ki5HmfXOBKU_Ge8Y1oM[O76APQ!-OGgS0a&>n=+o\F^Sj(8):):JXBYZm
%*!>8m>TX9`6\:p!A]^5!8PSfjRN<j+FM,<I&OtG53H!l77jfNYoKiK(MSp'9b\ka[!HV!\EJRgI!@3'1g)FIiEXCJW:0%EGX@4lD
%>59KaR'-#)cg.EiO>i:q.t]!1;6S]O)+,`eFKW9lPket)e+pJF(1l7/4tX`%g,D:WU0<I0=(l=gW`<c@Z[o-agERIZ+M7=;3#I=Z
%Y^;WI"Sf<kD>Qe[+3`MRVA#>g1$\__\HekVXE;KKPT/X*g1+_<&*<NLm3'JjUCN"C#X^f\'P]LO>(<cD<K)P#*mdr'?p$:PoWeua
%<3@:`Ur+92>dKuT2Nr7%A8<k\=`W;D]eN,,0HO@oP+--1Z#I!mmOPd+[CjR!`NHE^W%j98c""p.ZTj(.gRVNVfrU:0fBW>.ZPTtm
%->#mhWq(t."^F48.`>a0X<ls@R[$_QDRTHD"939)=bY.%)FS!6a%JdPAgS@Ek2(og(T_q8!'4=Oe;t0G'3Yi<PNfG]CD_GnI``Le
%*k<!fkHRO0MqV#NA<8N*Vb6+LB;X$B/CYR^Ct([`_#!4BpQBb\<!()PK/NR2lAZac(TuX[&K#0,,CmKccGBL'os,W7R0U8*Jn2,N
%pM4"Ya(.`MI9u<r\BU-c6I96?6o\T0=Umj1ed<ug_UhYC,g`#KA31>J$kUb(R?tgB>8;DIC@eIQqCA553=N.>WmZS]nKPp`8.J/q
%jIH/n?=n\_!P02%6bD-TQ,?RCYiQX>DTrPZ)[eWSD'3rFD.Z;k.PY2=hB"->!:!O!Of'9_jc:"K2(rmNZY_bjCSVLt(rWd[m>M`U
%L.d8.,6ej:4tcG073?4.#T?a6U@'(<1jB>g<b#+q_D(/;:lYWm_S0(:(S`02L24a\rYrI/au[l)<dPM_UF!bgNd")%kY@nV!]1lV
%mV<#R=TZ?X>M&86Q)&rEjl"P'#H>a4]p#SJ`Y^Q7C3RuoWfS'rft(ibBr*jMg8cNX*.pN%X-CYa%N=ZiV+Yrfd82]gJkL<(!")4n
%+.6%b77NOpk"UM5_q^GpFFB9s$Md9s-RiRK!C)\,M;c'`YL"\=E@?!6JmU+,_M8fsbesisnT:=;&u2aTBio@%QN-\\,mIFiOu4&-
%)cUns=!&:!V&#l7eb0o/p&&K"8i>DLBWKI!$!iV\eh>'2#$(R\oW[$'f@;2lNr#\07MKIb7VQ6M/6Kbs8_@gKn%t=0jWJOg^h;Fd
%EQr3?12acL%Q',.(>sDkBt4t9HFTG(3mcV53?*n)XXE.8.H\57_1GL8:[2ihm1l/^#pPi>Ktq[-6/r2nT>=o@obHY9J_Js,/YEXB
%gA?.>%VU,e5^/YkcYX-B4[k7t33)uBeW.;nKid[Ncn%=3jGEcO4$[O_D:UhI7sP#n&m">M[<;eteZF%AA8o#,SY7js1Warj=CL[W
%;:DY&NlNf`*>M1qH'1M!7^F<HS]U^XKKO<(G/]B,VJ4)Oh[-O>Og1!$]sVtAB0_eg25#eIP2G*'oE+5SiS-dPB[7/1I9bWV]CgEd
%ICHM[4uurnD7=\+Y1>8lp\%5R<Yce?X)>BEd!5N%BKTDSI_G@F5^TrRs69'iG,nh*91@sX>*(W/JL%W2h[5]#d_kI30A.`-Rk)bW
%G5I!!L2"(Tp@#BjW4bsoo(f?bm7khea]GsCQ4)C4j3,0Ip+,SdTiicqXIC;T3e_LEF4uE"($DI!hhECuY*P[u&%\Thp@)qe>OCrb
%9N/H_p<Eo'p<^0"bVu^hIWA3Tff-f]NPhlJhVPmtIGS:KB5a(D.gt1]i_JS:dkJI-?dB4oKo=8qc!5+tp29gQGLafBR31Jm7D:r8
%Pi_l4gRHM1^D-iZdI$jub:a<PHh>"U>M6]V>ID1.FA>jYeAWWg\WneEZ+hkCQ]#GReRJMM458D0(=Yjt\X+gRQacRI?^L=ipW:lC
%HOm8;b%:=9^/^MX(].9CC0=_]buXMrfCeEq]h5H9nEf[[C\^o\ffscSSIeoWhUoG<0o`I.k4?#[00d0RhE':k1N,Ho<D@P:IA&^(
%nufWQ]e5(-Q4&',2kZ]:fJDEb;J!P1?ZX%oq-[uXFiDPSbbH,._u'CdmJQD7K=Af7>Go)\'Qu\Z&"]6c`g>f32jKHib5$\94RU\p
%!`42X4F'2.q.RDu?Iam3:NP,\`i:\bD^tXIr;"/p@EmVU<4]R:TgdEI[,VOT_B>483krG1nW2e0V+q!Ek1el'!M<^JIMJV,n!.0L
%n2k@[l-nXL;L!AqjU_!,CNH9AmH#/HB"2</GF6j3B`OFQ$^^?C>(XDsF\GW'`bkRc>iCX`?1?Ro1uj5YXmDPn^+C-Rem<_W]'eU6
%3TL&1X3Kg]Z_u+5<Oq-04Y.[7Vi"(ji0^.o5<u-hLZ5qLcak9bK^^=aouhJ7RT7P>Sd.r9h^Da"'IujTN9`)J5CKd+<cEmb`\bXj
%H2100Had)1DRHWRC[24DT.uZ`^"P6W_'^bV\VC'ZQ^ULqj.m2V-(%=m@@E2;XmTYt:m5tKT"^5o*N:LmH>8s/[PprCpRTdH::Hja
%4ku!Y52cFPeidb0-(FTk>BP6`eNL@Sdc.%a;Z=fur_P_D2P1\r<bk.pNj^j_PmE8#jOi@0cLte7\]r[.,uWD4fu!/9e+Khni2Uqj
%rT8fTpa(,\b$XL<P5O=P;T`'YhQnLK^k\Icc.I=]%;p:][m&lET0Com=TkV<3kWAIcLldE\R'-9Yu.?Uos]q[p%H7fnSP,/e%C0J
%gWLPib9!*gllpu+=5-`-:$:f^,A$,Umdg^f%<)3m%<VGkM1k5'H#)ld?81^,-eL6jHPcCJlu^N&2pTOs]u!rqCU#,h\9Rr,E)$o^
%QeQFRGMQ0EHM%csCbAB":E`/q`KeG9V=_i2Ig<u;m:,nfqkIO'<g9%'bk.ZkO8!'5[iRWO[H<Z4gai+Z9]9L+4MH-)F^D^FWFMBa
%71TCD[SP.<L\^o;VfKY.4F'o9E#sL#\:im?l"oV@'dEb^>kampqK^ED5QhAN3oP?nh4MKbmPKeOVr]KAo$psCpq)=):U^atpGsZP
%g\#s%qPlm'h'8$1_M]5V=%f#OI>R\R2O@5)!rhh"HQcJFPHr-1O--0*f!FWTD>VTRRX+Q'i)i2Co%Hq_h0W7'Q6(Lsb<,OuD>Nr?
%OtLZEhYI"(H"A`1/8TZjBp,"i.(@UM**L?FpZ.sdahI>'p24mEE/$K_jht!@k%`#f<t!'kfnX1%5W6_N'0NZ:_RX[ioeIFV9LBI?
%a4Llgs"s)I_'$+T,@2$:K!<'VN`Z]u.WD7r&V3]VD1b?:VVs7UWC2Xc1b8S7Ldjb',RMVa2J=`gngpN4!2e9Q6ImeK?A1d,@?QAo
%CrW`:3;@S@IoA.uLD-&PLDcg"d46-*&ReQ`.C-p;76c'rE9a!-&XXoed&2L!D^8Q*UA8#LQ^BZ,ktB_qnOOfB"M>i9(!0+PjSIL;
%V:V$KPr0t_aB!sO!?VfGCQHVIRZNJ44d^t7=\k(J/@h9ue<fq'bSost;S\[T,Zsq#&mbbh@Q4HhAg:R?;.rFPW;>/2R$KjP>&qY!
%0iD\Pl6HF!bAcsKK<-4@([C5OKTUQ>'5]OqJQI,5=Rsl`IhO@=EA`_7faF2=DlW73D5ZeA?X1<1_"j_Xj$0'_2_XHmD-=Tm1cl(,
%B-<,HBZ)*\m]2&ddTPc*anCI2FDn_bk2#XE\#hiQ`>GjNTf7sg_i[2_hB7CgGie$hng<*^BO9bYa+t%g4q:;rb`*/1,tGXt\Aq`=
%&uB/7+#&])fTXP=lH4f]Gk(.4(7uptjuLKTPLn)OBD8:5]YCnBgfl:GgC)7Kk;Ze*dPEVqm`3fFc=&n\`0$$$Fkn<VK/AjfZQu]Y
%#fPLH^HQhb:OC-9^"/CNK*H;ekFZsh(N3YX%.17cotpAsqp9-S1#]j/K.Htd%9&2OkgX'`?GRdTOBU"EVYU(ppS)WsWdV0R4o0tr
%](eEAJoOf$s)E.h1c/4L2">B2&l_1m,i\9__c#IJgTu;#S$BDAEO0V@d.`A*Z98)#R`CZtX_p!'S,<QdV"QeeM?MWTm;=3k`fmWG
%n?d/F](A\?n4J-*'`m+Kj8@HuqtsXjl.3GlY9^([WQI)o5?j#NA[6#i4rc^u(1:29!EC$2L$\[l)I(=fSE&!q+mtI6*'LK&iXr!l
%akS#I<;YBrOU"LDjjMbeVflM3]m511]r4KENcrc2m]1\-T6bMp?dahJ`*Zjd/m^4"^hT2Cb#5&a<0>X4EXB0.@UD#8>n>C;Zh3AN
%P6[pn^&(f4Y]$U."?'=&Y'm\$o);t`e^6:ZH%5G60*HCS00$.AT"HKeQ7B_28ELkP,kJToIO+<q3,_9SFDl.cq/B'@a^9J-\%_c^
%kNja]YKp@U1&E/=IB\[Gs6(Y)hK>j@I*#YE>PFj4@DP34YM@VQngQ5Ki#e])#UP0,B)f?<p&h7[E@#L7?S+Khj*hMN3&S0(?G+%6
%'_CTrEpuHZA>eu-]\.$KgTU)!bQhasem__N8FS6V#MHIs=7%V]g3s2=MeTo8(uqu/4DW+&gDd=<B4F@f7BbP)\EFu^F&$)SmkM_+
%9e(SF<jA1XX.cZ`/TjlQX]B1A%$MVj"?d4D3'LM<2-(AZaO-G-.>IGmE3=I6A(<QI&lRa_''Rcl;/N(-cp&r%:Z$YNdQ_9"C-ZUj
%rKnMdp<Tn/Ur8b#`a6-94g(l(YJ:!Y*Vuj9j*mu!pT',^_:@]B7^]JoDIYaNl!nZ!b5:ap8D<c=[o:rMc0<t7SNOZM]/b72DClH\
%][UtW?1e<@IG?G-5;=d"/hE/L&h)f!KC@CbqV1JhNJlu_QeUip9(AU.r>$irI84ouo&?,hmu?KmGg)fWT[G%4q+_eir30&fRYUb[
%@i,aM[0P3Y'OI:NglLSVhph?qiVB'./=oH+c\7;+!YpNL.uf1aUMi49Mrg_f;GS"g=#2KGY$kW'qdt3BjW!B)J"-)X?L;,!k2LQ"
%ea>Iga(q=!X'_q9E;f/;i_:uh&cQK[%<AfT"C]KOf;5g5X0peeQ)EMX_!0$hgY\Wg]k@Z@X6WmNc-*3dr6:,V"u]DMG5C_*C2'q]
%0D4[qchDXKBT1="d\:*Ok%Zj'"bc%7KCO'^nGW&Me!BlnoAQ&q!&^l[N@.)e(hC<X3WIqHnmSpKfcM9%nt'jgS/,?i=0irMP-XYl
%]"NRfWl@_j)k0#oihIGsj`_f?4G<n#piQC[^OSF[kGqelmHsSpJnmJ)hX0B2k2/9/_aYm?2s+_[r3<J15!I,'Dj='>pV/i##A56o
%.P:'OgUEf).WtXhfk4h2iqC7AGk'.k-sSt2XI8D!C`Yl?ogq!)#R>(N$a2k%pMk9=iPHH=q.B/Em6`ZIQA`.RViMmjPg1=43WXuY
%T8I!iFimstlmM$mVg+e[ZA<5G&!kb,cKXSgHO5g[[Mt7=mh`BZg"7)f3V`DaLm1#O:s(kl&Nan!;K]3C=?4pL18@sTII._E*Rd3d
%['d*J)k`U_L4YLoE%.,W>-4uuL1)%l[*pt[Y.$?^2X)nmY#^l1%2d"+>sIcDjg=dV?U*HEUchJ,Wuq?f7Tmraib>Q>?QqW^2W>'W
%CcBF"mSSNL#j^aXA.TjLBT.)e](`M;o_tfL]Qc)2@^BscGZcIpDX<Y,&J(s[&OufiqD,@r_B_(S?Kj20%?GoCo=Oq+nZ?b=n'qd.
%:T=frrn#_5af3hZEt,NIBLi9iJDg:Ir7\'cM\hju,)0$&SZJ-7o#5'Ph)W1kE:rTB*5Um.YuPh9k)>"k?J'C9$[nnNG-hD;Hp/mp
%ROu2)]ha?b*_k?nkoRMkD+gEU0YW!B](]`(7\9LG3nXis8GrmDHtL@;<M(fpM$2<j2899L^U=r)%cR5*fI/?>hDk5ZVj@odKqj9a
%dR$lbSU'O,DQC;Y>,7C3FG+R0gr0L"*V8>XhSJORp?$+5C%*q^ok9,<bb"l8<;VsJ_6p$ik$Ai?gZP3NVT?ICP1hE.QjM-teb?tZ
%3SD_-9,FK.a,hD3<@G,$iA@\IT>X[/;(Bc;+!u[d'd0U4J)hg[`%RtFT'UjY=kNOd6"mF51#U?+kqb_8q]X!-I&N6=BOgq4O?L81
%N!\rOA#3%KZF"'`3mne*Bl)DrR,s'8Qf%SYnVk05EEqP3MJ#OqA*&0(kP%VQgm'fK(T#(e4*I.C/@)HC4eNfQkN':$+VIDd\:9pY
%\SlnS"]3t"S)6U+N;O,\o2a[hc&Ge[8'X^#[F4MOoN#DpVV6bHbM?Q_25Bg:@)3m*'caAp;P>Uj:t^=PR--c.@G-XJEq-g4I!#kQ
%l(b_[Msf3Qqmi3X7kpVV8m3bmH1peLfNjK-#LG819EG$0,mSL2#"Ce+nf?]am`WsKZSDF0HMjr<W8$rb=uV49#RPc-F_?f*71867
%>HHr#I66.8lrIG8$@@\h,s%X/.ul_P2>;hMVIJ`9m_*#n4Z^5:+KjNB'\rNsDX0TBUi44tp#HNFZ[="<NUpJc,OKs8g$DRo!#pSC
%jjWmh?d?9[Y@!M5Ou,$Y2ZFpQ:g76YjpalA"XOq[l]:NMmhQ9IO.$T<cATtKl)^1V928FaZ>p83[%E`O?^=LOLsg;sDq(VpMBG3+
%*UWCWL+U/gZ0#.Mm1,\BJ3\&)ICJ$=H?[-n@dip_K"(R;I`+(*&U`-e[P+)R,bNYHp%-'kBtI;N)qij7kG>N1kLJ#SA+)7"7*f7h
%nVp8)2]TY<Dm*JMQuHVLkC[pRWH`mW]IdCRO/b@//2Uger<aRS0NgSDMTcPkqgf5gk-$sdIP3]OgWfDDG.3U8-5smJffh$QoBpb[
%8Th.ODQ6./pu,\k(mZurj93&D;BfK03nA'>5#k=#fRaF(*ITV;^HQ!T'tOkshL(#2jRHuY<-Ji1;,<O!f,L3[Ib<()j<]c@8b]S)
%SI?\nUHdtCq`0)(7-E5;/*ho4R-F5D:*97qp<!'_3H"2524f8(\rJ/h7-<:bc2HYEkM/5m<GnOo0%13bpf!H6p@S6G]u'S,mhfg6
%o_Hf0ZfY=IR%YE-Tmk'*^Tt?QF1th(@'j6'ItiL;)%?4sml=]Q=Ai.*/Ts[b2N?<YPr5N,l]onM]SPqNeaZ7?n(ra4a$B\aA`M&0
%$\pl5Bjon(mhn4j-:o^NqJ]Rj>VnVtF.m;UiS1j>3K'o[V`W^No8E5"_ibak!1d$W\6/1Us'd!4=&3[UAT+>c[dn%D(RoB:dpf)m
%PpZh5R_QKb4f2`Q<asJ8!)6tDBmaj&d4$;qL!S<D%haZ3,?(h\kIrs48<?BN?Qh<k-p?Ei-p><Oo-S!ED]`R!Hclrlpsc^s_d`Fh
%V8B,V]N(R!br>A=&bjU"OP<IYa?Q0K)dcXXc=u,t6Y9Lf,/1MN3Xs+[7B7)sW/Js@p;Z:I3O?GH.Mk9UITEC"E)PFs$V#d533#4U
%X.-mb&Z$79O*:5ddA]moH]RMPL9Xgn1eq-0Io)$s<c`%XonrXn^3n\P@\;-BkrCb2^%_%Ol-8d_o(Rb.E4*tD?b_qW+sU[/\W::Z
%p%])_>8LiCs.2\-#UW?h/+=!Z;OrQPpi3cDlghFgNE531>[TPdU.m[_nYf8F4)!+_jf;GB`[`nFW/I,Op7J*@GQ<F%&@^8a>8>XL
%8)ei&Rf'*]X+hGM%(sIKFuOabMEl.0O;ODLc68iThJJ/ILK(raQVmthS[POW#BZD\$J6Ttdb@K$2q!34HN5#??R%FE/q/]UW)Xga
%Qgk6?U/Kj_XOV$E][.q/NoSdB*K-gs+EPP>H'usCQgl`>bd>%n;7`=oj3"E8g+Jp)S8mj4@`B&T$RD)",3-+GB6:_#E2T7Ck&m-u
%`d:q^9+:a)dEOKk&=H!NisFl=1;oiPDRH(8ej[>I9Fb)YQoH(Y%[8`>"q=Q*10)&$Jt&aMU>JbXa-#+m6>FL,?J>$V2_93_?Jl2"
%UVXmmrd:AH(TVFY6jp$'1Yqmb4a\hC6r*p@_8t_=[5mBLU4=[=BZOEHr(Y`=,6c-,9qJ@0cbU-"HZ.jtC))+pNEkK6VP1HWZiu>5
%UTPR@UrJYg0ChXcSGU]f8u&K:8]QN&DhU+X:ki)H#dq_^maBXpc?UYIY%Q\S/KkT!K%:Pc.<Op;7dKnmjOI#=k0#3_)Wu!Nhu2fI
%HLK39g2?)K/(S',lfg+ZBt6Gu+?J5>J4Qq*rVOS3/J?#Sb\0]_?7+R.=87*ih$U5QoqE@2#;]o0.;qI.pgs\^M:Lc/NEZrE`h6Pk
%MBXkWiE^cJFTV(PX6;oM-Jbf*`\KZn5DFbJP&)D;,@kWC`Lsp4poX:7Kd;@tJ,tB\@A5"KQEb$`kV`''%RD3:nW?%G*H%c*.1Mk%
%EHDe<],.N1&WO:H"B#(REAQ034\"9lCQq#E.LfF6;%gB+'=f.PoW!7Z??`HX1a/<k/>ocMn"oMULdROBVt!Ea'n%&sVfY(%loLVu
%+nnS&S64OEGE,7LdL[O0JRVRtFBNBAjMUc746V[RfH*c%Q'E2N8&Q3)p^6n&gn-75<;dJkP_d"Co:;l2_tYD)*HSQl'[CL`/_if5
%!^@LUXd9V1hp/qF8a2s"h>ef`:d.Q4dp,%Zn(tau-[OtT6MB:5Vbbj[g>R+"UZ=&7[W3`3#7pMeSWeEp2V!S4D6G%!GP(<LmdREs
%?G!`B(]NjY>P_O5GONZ6qtKM1mbPp&4ORTa+,7P>]\RnA/*"g*2Z5aXbg2V5I!Ksq\,5;_DVNnX.p8e`JA2!EoCjPYH*kXWMdN**
%Vf.VSl/u5F\N4ZVc[Gf'I;7t)o^`ar/:K2>ma9?!pW]\g`\YJOR=EX>lI-:*F_Z3A/Z&BakH2LX%n?/jG^_-uVisuhC<f`Ope^g-
%m`DLE^hh0:cGSh;$5]TV(13ltXOKuk`e8>2\D0d.NYh/!gP3!1;,ME.UV4Egrr@Xp-8(GLon?2U-eBG.,Q>.+9:$D)HiMsc`trZ'
%^PP]K:&I'inBjlOqV^?O4/Da>j8Em3p3arVnZWlh5'qh;YJ,T$mc.h\,eB.;#[4l!U)SrI)Z)d0MRP=5F:rqLFO-_:(?f0qF<0N4
%Ym2=ikUiAq*IfU[4n)@S1($6W=f9jLoA>%%AE\ubPhE7Hgr"RL\kW+gh#_[a5bA'\TIl]8r,m725[*@h4aN-\S,Mac>(k?EnMK[`
%O4NG4Fc/>Ch[la]\h?P/p\.28_VH"qE>mT9\6Jt6q\t#YNa#dr#A]EY?.Q[]omEM<P=AEhqRR;-_de$6dsZSI6hF<('?,ND*4q$2
%gCa'pB2NP(96sk&'_o:UPQ03MnuXU/roVq1T(&N\Gdh"U)qr,(e(k-fIgZi;Ee45WUjHM6#u#hJ_cuHGn&!raqL%5'Xa5L;qR@:1
%!`JWR"c%3h.->sp:s0ii`4*"`if"oHIH7>@s*jWrGB2dXd>m"JHP>8=0%%4blEO+1h0Pp[[?;+e![_X$\noKWr/eqV=cp!8X8HKn
%acoLu4M+AsSg,1<S'm1c_eiOs<`b7(Wi]eH$ps+"1/3(NZP#.4;OOPJ2%A#.2C\nqE&#aR=:,gS,eG!R5GT&.@Gn5?k)<^f=]83!
%-d,+_2mGhNP-_T1;H.u'HmVXQ?tRM)0[+.-),o#J8``6.bu?Hq@:TgIo:$G"dkbPX,$A'>Sm%1U3G[9ER^$rl$W?4GK:Z(Zd)a(M
%5ltfLc)dZ!)eQKo.r1Q97]kl)kuu)mFf^Ej+DW=n[dB"_Wn<3G9mTi<+Yi1"[DjWA7qlE2<R&[$RSE+QZaQhF"&pi"U1Zf%<.$J9
%3MYjT4eIla_Dg9R+'$4S#L=#k9R:S)<X>3q_ZkB<l>+ft,U9(Q1-HVKaC#'^"8l%k'n(p/&/0MW1&&Y)<AAbe40+"?!&QuDiil,B
%Vamki(-TZ?VA;%i8m!'U"hEj=UM.(.X@3Y=f+aW45np]VXJ(.lRRYU\AN![P5EqH0C5,((d]>o=dP2k4(/o0Rh9N%m5Z8,%k_;c*
%RLD*Qgf4T7/UCqjaJWSaH:5*"0,@3a/E*(O;'7'9,OrYO;ZTX!D)nZEo70nnQtDaU`_aKYH=SjY@T^b#15;LOe&GD]fNH1VRD/s)
%#?"AK\ekXK0JJ;W@YZ;WM4PY],&\kBM].C=c`X.Z(A2&RbMXJlciC1*alWbr+<hY6J7CK#UO:TMl!`g'/_DcAZ)JX!OrPqO,@6it
%i<?3Xk?qe18A#k)4IVEYM]U37:e6C,5O(DgW(B#nVY;pqe%54J1ogsH-8jHZWRi\l3!;+i-,[ql,I<7VPH;hDe3f#@p<%`MeUU2j
%=ut=A%3-`I0J%1m,R-P2ZS5KB8;^8P+G;#pQDMK05XT&t4Nl#:Aq\D/lXaAr[6TEQZ#,&RcrtN3dKS,0&/#s..+QJo1'kr@1*HjZ
%&2]jtq.s1*-s4S&>-?8JCjXd'B.Q`?jreYCJ>T#3XNm[DBpORTM@S*+O#Js?=,M`o(JRBMehh+c"&!)'%F+1<+V6BD=m-!r_G&?5
%_l9iXQ:/Pa>o5e[*jpt3%9<PB5ZAENBpps4Tg6D("8mp05RsasZEMu>S[$7ddkb"OKQ"dOZC<>nKK6"sXl1hX'e0?X'5"Z^*$C^d
%XJJ4D]4NI?idK[-*\;jLfa/NC(R$9t8K+Z2Qj0-di1m<Pe.klSckGAP=pR46$.2<G;/DX#l&ju$\["Za;IA&\M<kUP/(:h5=X>XJ
%U2<G;Q-`U<$mZN`'h)00)EmG9!,I8Kd<PXoTLCV!%G^]/3Z(Pm)KF*A`:-ic6A+!f4.qj-;Fh=2B(AN(SnK_B:mgf3nUi5#fp(^2
%c=eDIPR'.&&ns'+AS6]k_R^n:#-ET4+0ZVe+XG0L.OL9JMtn=rqMtg78Y:V]6<c"!F>D^1EAX'M7&pa\ZQrPdb*MN@lsae]_W7L^
%19!I:+J_J<Nkc#6PX0^8@iM;h2JlT9:8LI'gTY6ERo]c6!f*af##JL-^a/`\1r9jYCm#M\(+Ag:A>.Z\Jd5D*W-9"ulU%^"O:[&m
%A($5&cl*;cLH,>;<*_Hk(^110\jBhZ,@`)(-+"@;bco`YC\1G7=m-=mX!+2F835hdK[Rcc&eu,39G>Fa5[5VgU8pT+DeH*Q7V_9i
%0q5$B&!OjBKe4Eh?e;7\.)I0b(#*7,Bi`/1E8-h#Jr%,`^M$LrG57fA8R[nk/#mA7'+,ohBbUR\<7`De6qk$@La^IoR9R&6Yj(4R
%i)X5lLenGmahDOE%F)ARM@)F[PBh`OapKXQ\4TO/cOA`m?l[.-(-c],TCcqm[Wj2V[#sEVJeXWCci['mhD^4[rCTH4"u/*u;*c9@
%5M-c3%uiWP+umBla;b1E&-E;;U$o3@I[EXa&#cX_l38d@Pb%#+*)ejKK1/2dL1*[0<9T*O#TSXqYc0BP.hdnR-Clb<^()oX9iqhV
%H:o)`e!C^gDUE(l[V:%!?)JN)pPh5XbV5dc1M6[m#I@TG;A+%AmcXuK^]\i;0SMSb&5Br#RH,>fJHD@60&d,lO"(mMV%QrlO:h*$
%#,/d;4VZduJKpU5Hm/lnC1tKXYlp.e1^p\@.a]?$RN[`O8=c]928`K&d=tLs.6Uh1#Q]='0r>f4@QqYbW0T*/_QKgq4VQWcIGsKC
%M^V@uL]RM\q4u'F;`"m@J=VtId_c^FK>^hK#`k^<OOPIC,NF\_8n_W$//@6P,R/oP;IhO3@:*1c@KZ$+;G&G'[t_-'!7Ak2-miL3
%.KthnW(2kBAUfT-$Z`3c_M47HW?eo!M6om3K11YcZ3Mg;@HCugS:Z/(7OMog@4+>jf\;(i-IL?FF5?9hW3tMgo_Xk=Y%NiO)W8X?
%3]r;W?l0U:!FYF/f<J4PN3-#"$?67$aI)3+("aLZOLbDo1sm,f#Df.O#VtZ\Vhp?<S.KZ%(.7b!i7)VkA@#C4$$Mc(UEd]Hi^:&h
%9>Grn)4b>2'=:(ILsZJSSHBd`B:A<Y"u/_[0YkRiB+0bt;^RF]7o9K$6A=$B&Be+,W"Dub=fW!hWF4X5]S*)E_J/'fAI:aq!&Z[;
%'FRL0ck(n9Jg0!JDNjpLSd#Hi`h.8p(n/:'mXUCD:uL+NXr8"sW[@TdQkIJ'P*N,fGmO>MAl+BAcW*2ClAln+LA/ZR"+nlCd;"/-
%4!=#5(a840=YS;InYQ@?PA-=n&ZJVMM'U8$-qkaT,laU^,2kC.MD3`]6f0.uONfK\)_8i?UgFBL+@N<EPV_"0R_k6)`)EGT:*53Y
%-bhqV&hVBM(*F-DU^+im!sA-&/gs*`,SDVa.&O#1.%he#UI#K>6"GSXaOcS;8I"]j"&!HfIrD8#9;!G03NIlIAeZ_[E7UdMC/p-U
%'T-Lq=4BY3;eEZWL%LOAX&FD?@6^!-l:h9.iRpI121p\ig-DV&'MJ:r*fUGt#3j_goKg?ZTquE<%gQh,'TDr1C_.&2Ct>EQ:0t">
%F3o^Wa]jQ*'q$RZ$8k,4-j1ZpP"9W@KRl]$BO6rK<KLGj-5pHC$C+:9;E6!3Y`FShM>!f@H>SbcjS48#!gS'M:]SQpEa&5jQo+(W
%l_N`F7TCm?YdoV-9u1L8I`\ac&KZM_?59PsY3IhG-t,HA<Lqn``=/PX\fZQ6Ks2?rW'f*Dc;cIsWRM$;.9,WMZqt>4W@<WCPXJL?
%J6gAK8507GNL-_>PfuCSO9HbU:s%B>'FXsD$:4l:D2S;5-Kl/!O?=pj'-b1!I[aj]d0/UJ+O^`5#*]"^^;*-L9Fr4@;$9e4Po=\Y
%'N7ZO-&Pl67S(bET7Xn25?'B]hJ+Cfg42./0a>6`%@4gQ;,S*k2hhBZFJ8X?/2l"5iBRkARk0h8ZJ.=[\Y0+>JK]#/S+K*MKf!9/
%>b<1q5hN1nTYfY&2<d.2f<7L9:_>uZOp(>-.b%P`+X15n:9(llek$<^MFV5Le3V0r_8&;HWIP2f_9EN2Uph3s]p?t:&QfrBYY8mJ
%2!A22!\pXn9C&JoSZKuh9N":,N%>9]`RR2k_%8>_Rdr:0'5c)qlt)otD\.%kE#"Q\G,KEnmXe)/Ug++HLRZl)?3LR+ZOm,@7[\"<
%#3V8n<X<,@/(OA>]r.,f!(pTKF:'SbD1t_V^oFjYr&#5$VcBX`E:3d;P::!5[R,/!QhA4ICT?'CKV\sHQu&T+S>iI/<lu3feWP8`
%+_=Ur9X[iPV"P:kP!DWfTFc5rTGSuQ.bD0Zb-5;?3IfZ&JoVe]Nh.D;)`HAURHdsl2d$KD8=[cDTIl==a;Yj470SXG<MECg+:/g0
%5[Kt^d4.77H[dMQ6[4\$@fZd9UJdYL$A;BnkJYEfaE#2DW!\e)CpLT^)9<[nN/K.,,!mto>D/oS8d@:'g'-GcYX2BWN0R(;QV.(L
%J;=ib7$\.I*XHBa,HfJ$D^^i,k_XpkcVQo/NJ^-)'_K2fRDY!Y!,LK\'*c"-5osWg*uaLM#'dQWrbmUf<+$<kfOG(U4YSNhE+SaT
%A025i,+04^JJk1d,!658@S*,s/W.t&b1pR6K2g\mP=ht[dRD0Gic[-r<7_n;K]QE!F[`rPk`?KHHW1Y$Q=9.f*KqWCU2khkmUMMc
%_NkaW@"jcT8JQJA16c;oe]5L]7&)2khBXu"A0WNL]3?C2"j5V4PEQ3Yi*3N;ffk(=&5t?n>REggT-<8hP?\9%!W;FS+el_@R5Yid
%<&/ZZ6KeuKDZlf--+U-arQ,$;dKroHJUo<9?ZbdfU,eJG&R6\M,Kq"#8u5uE`Rs5_&:M[UA97*+9tD[!#YCh,EIF+P!u.h7Y(F0N
%qc[.d3TN[TYG72AYfO"N6:f4?R$:_DnJsZ,!,*KL_bm@F^eQ+=VL"ma1-e7[9KBK,@1>Sg5i?7IIaBB8+fRe%8_/e6NK,9PROB>r
%P)-iV,#jfd\r09QkZ"Q\WLV8^OX)VNQ-"c"WIo419,p3j<f>0K>3Yh<s(C`TPpOP7,].uuqAkaSrC+$1E<k]4ZIk:F5"1>jjLkMR
%:CS?m_I;ZaRdM%?bPFV[?N>^a<7U,[-$V(3IlKBFni&TKJIk-3kksOMIXk*i5MOb-W8Vj?6FJZl8t(c'.73"J<8$5C(!;JM.:hD=
%,e(:XMPD`2RE:VAABRF]&$DA]Wn_$gS8qq"m?<J,-kdKI>fH:Nk@KBJ!)cBR+XE'oFj"?CS$*r7RNfn+M&0g'nKX0#>66r0n]7#T
%buBo_CGTb#i':/:=ZSH88f;=<[B)3SE&Cb]3jW'PEgEK"@6D;h>AJDg1RQ9K1=^[c8kBDo\YA`DGp?V,9\$(*?$i.dmWIJVk8n4A
%KHI`9F&E)ePO$[Vkd0mfeSNaIVoMA5Z*J%UPXZ7$)WjC\='LO:]J&..4='&@iX%%il@!=%?;_eZDRfM!1eh]W`-HRV$2IHrhba/?
%GAql;+#D($]N+reS"-O24NY6"-WVhmN!m%tlWRG&kPZ-%Us;KuChC7CAir6F8u_!MA'-u=\NKPKBLG\F/(D\((2`4_Rb,J4;*1I0
%AW"Rr:`EiFlHl'IGQ-saO%&Hp[Q6=7PF[o4Ffgnm"%KEYG82.h^<9b'e+%Ei<S[fGV,:A?@@<%e=ik'S$p?&"^j2+'\;4lUXi`nu
%:#Tk4.4EbtSV]"L<N5rOa[2]\dL2t+hYV].Pt'3+@fB'H3RA8,g:a>ppO3#6YgZ(uS'?C`g1t'a4`8"N^,O<-f"0ajG?XZG6f7A1
%mgoL)8Dk^&*,'p+?uYtV?@1==,!T8U^F[tVWZf(KT-NbkXe7Tt%qop:I2Z,%1Y><\K,!WTNMZI#VjEh!9>a3XB^,Q!F,SeE8P)`c
%5-Y9D<MJ(;cL[$KM=$T[0-_2@(?OJhoO>"5`tbJPk%^bgZ1^=,RHlo`cX\Qtmb001Qn(6OlWiFOB(WG]o.8&\Kc,WqA\oDM/nj^Q
%,t1[i*-Z9JeUpu-1Q\0)/^gloPF%1WPP*AT4hLBnLj<NnRjd6g@mW0s?Sp(R,pjUIKJ)i8+mACi6/">hc1<Om0b/]UGqgCORbOpI
%D^:NZ_Z9a.Q3!t!B5r6XAX-fj8C!Pd?X_M!k9aiiMqaVs(qV<N_X+('6.'jV#K=ItEi>X9.[sb6rL/eYdO!%9X`";ebX@%>N?>(1
%@!hSk5f84p>YUQ%2W:.rN5.tUoJE_d[Fq%>8'ZM09(X_>>&uF'\?i2q"2?U0/1B]C_h3$F>.:'@;.\9lV*GU!E:):"Wi;lc]cIDS
%Z'NFV]IO%eO&"rT.kr$D&ROG5.rb9k&-^S821odHA)b;Q'3ELb/h=(GP[bD/=6cUZ6Zj<alFe",hSn&$E;Bos"pBWsS^5bnekRB:
%^*laBH&u*C0@h!V?1a9pg<@&oX0GR9CW21KR@L_2Vqm,'CqLK+h4Xr0ZmrM5L>2Eh:[e>\0>Ps7Mt6Mk&#6H!1sYggRbrnl)Knk[
%cgUloNP`B"kk?+2#,Tego_Y3/Ne2ZpW60LPKQBIe.I>:PE9F's"b<66fjJA+ck*B<YgTjH8MSkecGXe%fZXZ]S5@Om$2<*"#r)<K
%F:VNF^t'$HSNtj7V[meA1H]kJGX'c'Ood"Rn8f!c);-b\5I9lX+=C%W1FadFEY:2nPB0Vc-Sb6,a=Y_[P0lYJlD1n9%XcEa]=M_W
%%;#kWp!NT9h-SdIntac^7XBBiNUrn%3Vj-l"o=%^1We&/Nhp1On*/0#1(]=:o<on2A:9b9$RZi-^Y62.i*Wl\>MCt!Y:;@CojrBP
%WJso?Lqob8U7]_aNYE;5G59H@[mT8qdfWK$@!_?<!HZdWg>Le!FhJ'Z.M57;#u='JYcqfkEs(#NCafH#ksR.lB/[)Q+(4/1f55Dk
%FEL:KMHSBVeC`MVIH"MY,0dc!_CJ==Z9P-B2#iY.3E?%.FQ"Yclid[M4Ao`j?T4q'UCuQ^2GR!=Gm%TN8=C2^6+"s9-e71>_*uW,
%=1+koeFbVaBWo<lei6AEVtK*EM"Y/<dr=k>;bd^9Dfkdq0s>`^1t__$SC=e8)LH?,ctO6_rC"D2?-"^2<J]$2mQJHnlE5uP3g\&>
%$eG*No':C!Dn)R@\gqQAmd[AB3'J2CEo^V?3R":V_C+M/)33MC>X;AtcNHETK(m:bn9<@[bUd60'L!&R^5AuccVbqLnESW0qB?5[
%@l8E:`H"o+3R3%Kq3II35`jmSC$=h^F?BSsCe>I?`BQ&+"l+7E"K+Xu+9Ou7Ru`H@hHHgrg(V<o%%/d"*]V2$ZOTFMo5,-C#G+=Z
%GP&Q3&@e+9_WNDu!CVK(Nr'h\:EMJSnDD.H=%oacfnmE:!8S+F[t*@/$P"&-QY^n<aXM`0;B7D:o!>6WFjS.Yfk[89.W<oMPOjk`
%E6<c:?LgL:IK\k&K#@E./ceuW^GAYc+e7`Wn:Xd;R%Kq3cTDq]ML7<80Kj>:MW2KU*s#f/42b,#ds8KYJ$lY,3eb9lbCKoE.c"A$
%gFr,d!F[:Uk5\8&!"^#o$ri=#VI8mI[Ze91J35:9#D'^gGGqfii"[?XOs!lk'-T:6P1Y8C#GUqodh:YP`^f4]0FsiG`4V^Cg_ilH
%e!`Nu?CNg9-C%@WTYpm[n^BPt`cUh:Br*17*m!D)%)2EhP&?!:T6C(1,<i2M!<f-S:FkYSd%B2gK5@.+&%!?2\b>sU(LHQb9L"&U
%48dFF$$q-=*HgS?'88XF?`Wb;>5Lm6XV!mK=fe#C2O[C=bRBJO+_<Z:/l"aGs#`NH!G'_h<eLig/TOFQX`NUM56RURYeP;GPU30"
%S:=,G0a!+Uc8/m>.3'\]nO1EMEp\5gUo&.1/2Q1-1t.CWXan<i$4=ln?(bn+E[#WW;koU'Yh&ZG<6"6_<PE9FS!XmcWnnQlg[s+f
%L\%&&.40,2d2mOaQ*q`A'@;c/.Mp?<W_l%3VMQ:lg&YC@62op_Xm@]lMS,,/f6ioI)uZs$ATCW?@>:GjhfHjhFhXoM<6h0er8`qZ
%*&NN=&GWD[_%<Ufi1S%J/W*J6%kst/Mfgik^_4nup!Ls-?p$A(d;4m.`YqR$,V't1(Io'4[7-!eK>ETi:MN$Z$DrQP!J!OtnR_H(
%"klX6UbKN`m?fK,9,&kS=9hIl=QTY2mX(o9*Z"a+h,[:IZsBPXFko\bp&cH2<aW*;c7LOpH<UhZs35V+<@'6PE)t=kOp0De6Q<%7
%'=9UI2nLqFao"`4^(\HUd]G$]_&2<WL^oOCHMf&O6AZ/J)oI+`o":J?[;%ApBkX608CuB,R!rP=M-fPnR75SFTjC1beA=4DgR)g1
%$L9:NWB)$JbL$0W\M0N:,'+ZU!Q72K=>H^t=2?agG&<?*k>^H%+Dk'[9u<PK!qW[Q@*5!c9K.2H=Getgs-[HBcOr&J:/,'qdWdh3
%8:XlD!7N6\G,)O(YfVaKKguF5TKidG>F\@B9L7RUW=kEn/8a<%<'i(a^$#&_;o?)Fr04$)0L%VYk%n1%^T47'-Of)O[D/a@XqC&8
%[oD-Ef+t%$._iQ@=YV/J)VuX%&aGpL**CIWXJaJqSeL1JE+Il[Um6=,0Ze3*Vc3'5F/$[PFVE_lpj&'e?TD8VT<<Hbh4FT@Bqgqi
%3a&AQSiV/`T'X$[Z'.=43OYE8mlA"DfcNfd?EM#B./9VDVafWE1>J%J;]G6V-uQ#<)IjZn'0k+[gg!oh/TTL(8nq"`St`W61]9k0
%4?Aa41H%Q"/32=om0hspEAdc:\_R9%$^C!#O<'js#KHtW1qe#h:iZOp%n=9%@@8m0gZ_P\^u>fS]]56)5dQ)jG4<m3OSZ/1NOZat
%-e3t+g6bX9o@X^U:.cdU4kc^87+JWkPcde!V=cD>[!(W`gN5KLDQD:OWU>aIY<P[4;NEI'%.@Qg/a*K(5Q5>Qs0KbTK@kEt%bf1F
%`&ZI1#@lp@n[p13XArn%qb&##h@'kQ>o64?E'LnIBdu6IX@lU`1JP+=m-(='3Zh))igYa=o\lMG-n<em;HgpR9oF;lW1]]`r^"K"
%5aQs,,ZgohWQt\F/`i]#HNj(fJ;g.gnG@*Wlg3W`,PAqgL$HMh39,Yf?7H&/p1Tc`X6j27G%7)$=arD4>qo9]l?KHX.1=sfpUU`t
%]RE#:[Y=-PH=2Q^rfPXOLJ`>@q-<fhfYo5\&Yju5g`_k6[.7Sr'N(\GiFdrb/g>1eM\TP1,n!&,9@278Bf/NT,)Z4AnpoJ:p\OJf
%+90^Y#@o9n07U!R8Jd\%VG&Ilcu#5lr#6c1+.oGtqWpI7N?,Cm56916niZE8!SA%Sm>$rR24;C<<Lp^ibL9(NGQY-h%"eJ+RcbQg
%QIr+'e6_4D:G[i3(@L>64LhHZ]@E2tcRT#JS<KUA&U.%4L,YY>hM)Kp_&>BCiV/8R0]*)"'o6UW3o'BhZ`cTV3DNu@Y>[RR#.l!`
%3\Mq2Hs$g-LPT^sTgXZ?eV%BbAmRAHWC1;7F:YgYl@f"6:rQpL0=HHL;j\l5%<feirH,u/331Y8jbN$W4u2<KH>d4Pn]T(H+7F$e
%)*D8R[*n+.YE:>+o#RG88ig+"WXj/L)V,sA\pi,mQ`#+H^Cd%FPPS(g[]d]`:r&^c6*BmfJg2K1H^MpbULQcR,X6c5K>JT+q:Fm=
%VsX=9776a#!`*6ZhUJYXB7o&jU..:eI:n[k0DQKL2/#)CkUWMl(VZXIfKJt4#9.!UKL3c5_QE-TG(jH-Z;T'GUWq]@_qYU^qcnB2
%UY#,@BUb#iW!N5M7B[3TU:MY9N*Ob#0Ilf-_'Yq*+&)?B]eCQ/,oDf%=9MKs6=&8pF-&jDMJ-.k/?AR[&7/E7cLV&%c!iJd=FCB]
%R1c21%+@Ra/EM224?;=J%n#HrXW1`7Mr-R3EQ8rA5/[+INZ7Q%Q+pq$e`ADMB>"Z>!:HLCG9="4,BiQ1'BR[!q(r1=bt?bUbs6<&
%C%sO24'sB(VtmIqI@+Yp!Lr6I,upJ+nGLBXD3!ubl.qHs4jBt._U58AZXc#h<VL9uB53B$(P!Qi%dp6_E^P9S2%g:r`i$^Ceh!e.
%qe9XC.=$E1l2%7D96*I=@P\gFfQ$fV\b#-12fnT8B=)s'IS$p*knX*NE$fPoBhmrr5+hj;g'PKcf/HY0CsS`$CDn5<!q\Sn/jV%e
%BT^fV)%QG#\"DdeTW1/W6#`pg08cf%.JV@#2nnt[]F^7(YXiEqAmf'NEXsr_;8e&-AfBSj4YN;CBDSWJ[suC)=FiYWW!tLE_ls5m
%"R4M=)q<&)'W[57U/nXY#D'P$TI1GQ`S6LV.Z7cLF7q^=H[h(hme&D&pc7_;Vb-/4;tmGqe!p$"\6cf!CC?aE,OaE.cStSHoM/-L
%F?LV^cACp.l[AilKF2$NiP'_YSTr?"?[0j/F]YlTk^Pbh!r?WWIdVEpHC=NY[atTT]B*6uh.s_$?2D0+MFu`_E05(>IJt5WEg:8"
%0Ja<?hVPZ-ACDlqhN)quJI(N+dr]",+<'Hu)TA!lq:12KD3rWC./m5VBeutur6]5:Yiq%pU<Z[H.q"fQ_8iNp9-P#]b5a;djj]JW
%(-&_H?l'RE@Z0PT?_%'CI*=N_>*h%.JL8003:+rki)a,FkRE8^0p1XZU[KOHTOI)0!nJ:T&+@'^A"C>E?A^%*&9q,MoaK52X#pX@
%(k[:6<;2?&!;`b4b@*aP!D[3qiC18A9W#;)4U+&iT[4MC3("$.ZkV\Wb\5Gu;^>?.f`YES,>gZ`:l"73_L8)5>$8Hb_8cZo4Q>'l
%`'"!P(7lR8^E/9_\ZiK1c*eN9&pgoQ?>9M[\5AE=M&&V091(eH`s#18CtWO9<&HsG?5pB(hX&r^AZ9>S"hr*Uif]I1qfNc$'jEV$
%J?IV.pKlt:_E.Mh%$uEB!SgRU2WA]J<`e3,+q\R8I$cREb4KXs(TWk2-KN)@*P*H>WgWUXcSpt\o*i9Q[6&=$T/M<>fX%Z0^V)M2
%<YJ1eHZ>CFiaT;jDe!F@r43kP',&Su9lgc&VY-3mh*6IMP$t)p=Mams6>sj`^pM$$YGPs&A1LN^ie<h,)D=5pK@`jS^!r_4WEk2X
%F9UfTFWo00V>+br\iaKYP*ER,899*.i^8*Vf"+fmV[YN),0d<+?C5ZDJjFQ!W9MKS)n6\e!4HVI_aRW<#o[Vp<nK91YgL)n[@`C6
%;5$m]BZ;K4U#f9S?RW3ki<Z;tL8i'oUGA2/XjHL_Tek)qY\YPlop&#5O:#CZpQ&PDK:p**ea11T1Km>emB9/9d_hS5<9L>)`<5@k
%]cZ`]\k;8*lTOgCB=t2),!(9,Qckg%19^1T>#CEF.EC%IU:9A<[^?GuC94kO@$aU6X(@Zf8V:-Z.^:m<Wp#$i;:Hon(b4Ie,Qn,!
%Pk+r*kbt:r6=LP4jgkVQF@:,OhIdb>a5#8bNi:W6@LH3XkMB[XM2tV7#Dd:X'#Kag]1EC]3[25`Rm^DRElr1B1eXkA5I7dp;-3l2
%;7N'*d0U7V]CaIPX4uQo))i.s'Y&B)o*+:Ln_1hma3.,h.DY\IT!Bai/6\GB!U!uho(gM]gZXmcY8beg!NLSdPp@9-PVj)MfJJqV
%GWIS`A6PJ$Mp^Mgr-%uRP=sN@OQU%,<tgk,Ao"2adtgJ>C2Gl[eC*Pi2hc^=O>N1?OKp?IR&DkZA&KQO7tsbiCo*u)``gJ(a"g^3
%H:,]Qk]NPLdV.f&_XMA*"i0Y1??Vom<mSRM,/N9#$q+7,!Ytf@PidX84W(I1?B-Y`][(\a7@K6(dC;2e*g"t-T=V^sDTi]pH%ZXb
%E."'6UJeQh9mB_.JpOb7S&FccYpmaAHVfCKU"_s!1mc_uP"piH(W7<VCXlK5@c."&&`mcLI[u6lf,@Xf\CC3;1ZY'%TYp:AAVET]
%4$&."YTLWu4#2)sl]i%nECQC^4iAXJ(=6M+Z$8G`fXVct8[6Q]*Y?"c@02I;nV?LtqBVree+90cY8?Ec4+dV>_U=X76AqA*%\A[0
%%G$Z!1H9!@PR?7<oa_ccGQ%+do06$EoM&$8P?`=-ff]B1:$A./D@4mC=pY*=Wnt^rIEh(`)g`CJ4pZ#oMVO50pJ)Z/GeWdm*>Z4^
%=*JoV48[j3aa8D]LNN!Jo0!l(bOp>rcdpE+#\lGZc)806[()Yf[o;XB0+mlTp8F`_l:RK4R\u0$W["56gQZk?=^=OFf2q4me9i:Y
%?XFc)&J<laL4)L":V,0j3-L";*PpfB<nZ+!on7i9\_pcQ<p0K8KtGIg\uN?%qQ?U@l\kT,WkZ/&n3KCnd2LjFM0JJg53g7A46#4j
%p9c-.m7:sgP2!T*[jU+I.t)o5E:0\?Wb-///Y!t$LM7XO=H.b(L-MNpY1#B,VI*rkKMW]"<)6TG&Rb9B>'DmtD_(<>C"GF*gZNPE
%AFH'$mP)\20@a8sj7XXLlg!U"]"5NMXtT#(#f#feYR^oj<AJi[7G)6#\2+nj@1;SFL2BA\E-.]oTG$r^BOIH%Y`#f%s)6o!S%bpR
%"7,0i3hipopoL5glY+u>U:2Y<g#bfk;^U:f#G6&LSA>Me#n,$,#&dn%2qd-o\c;CYUE%KFnmF8,k*:,-lUB*M[^bh://=jf?G8?3
%FFlXt#&C%k^fLKC&/^Ku[>h%b$4CsR%3o_rd%s#_Df\>cXdD3NSYQk7;Gft!r96^Y7Ht86I0K;/Dc;."W4X!>ogYu/PTo*W'ToeT
%DVT.(fA?/q]9"$<Nq[*a`XTE?T_ht2i!pQF0SM.Scp9+l=@OD)kj#N9C9ET`X.p3;MobbeAI#BQA,:W?s%X3ZR03c7JO<.N#n.<k
%_')3+ZjE(*iQs7uZA-QfE9JAR8]58*34'?[SDphV*4j>5M=CW60(OFGa1F$O#B0((ndk6g?%1-6.J2.!GLaT:):;M^gnbc,5t4qd
%EE@DWA0?<684Qe1Oe4c"<'#Vs]Bl@A>31QED$!fESLdQ5b>[6n'^,>cNYo1VquJFX-haN\)FXY@@An6;g1U_+%EN\]76PDaE4QR5
%SriRu0cU$O33;"\,[RqQAh]>Q57!+P/I]oY@`_/F2YDE>6VmVkC7m)DUN\R_+JB3Pm:rE%RrU7^1#>H9b4+?c<>.C4Dg&ab_6=6!
%]P]L"::Dar=]J,-Iqk+nSGHgRC+)0Z>),t!l%^^Wr@)u(.pXEK_`NtlcJ(Ta$<jY.R?7&n"lb&M1U=*fNfeIgA\lD=QYcWt"_,$6
%!+U"m6N%[-Q85^J]>9\R:73P_iPqZ\ekDdm?hj>M'[kjQ/eLUeiRX2)90O.*bfH4IImVYY<VH%rSpk<4mo]?rF>3:rZJL5l4'6n9
%dI0C$mp+3:JsJ4&qruoNM'*t'26%oH28`GA$I[=\!(a$K6<PlEq^[b-VR[uX+uPq0%:)]tHIXht-s[S1>rj$/Ot!LLdm8;"?=U+A
%TAe!&[8+)P/*hq?0/n<KG0UEsl/Imbi-?p^'&qYJ:lk6Zf5f^8eRCQ37^W]X^sdr#+V:%XRtSUVKf92ab%TquFq(!3]PeEj"6pqd
%fO#EJ8;mEoJenIEY'skOZtMY)CkoMW/D9AM00M`L(;%j)d$0>]E1^;)!AQHP6-f-SXVP/npr<03Z7arSFfHtV7j88&nrB7/lhJ-E
%oaoW795FQeBH22ekOakh[S+`iS4d)?Qu%g$6T8:KMmf`er%S7R:e)uA,^76)%[R;5C/`s*RG:LkX2?&Tk*OTKK_Unei4g&h1Pi@i
%Xa=/`9\JZ2P)<4-b7Ec"lipU[6%!:I3mFbCQ9$[tX9r!H>+Zp3RSq69Qlt^f10H,ac32>/phWTIj?uh^QDc!`-<1=?jFK4mHdTB.
%NG6n()UQI%Ob-\_'B\E-n3YY8DlRJJQX"SBpLdF)b?pN3(0a=@+&$tLD;3nGqB.fu5@^i:bn_)70(.^i^`9^j2GKTFGNPPoZg67'
%@Q2"NN[(1&MsU4R4J$AM,OXTm!-nqGNXicVR-uHhn+upq:qrdhn*'c>!s3p3UBD9Dm#()?m^b'umO>\.HLFX4q"HT=-/>g`H8^<r
%7g@&b$eg;g*;LabVs&'')P&#^?cG[kk!?Lu,IRml+2KKLTX,P#a]=Q?c;+c_iX*;WVj/t93BZ=jmJ>;QT,S*\,E!ReA_ub\DoRJq
%%caaB6SEVD*PXds/$aL)P]%/,'.<cd"3N^rFQ1cqCUm6skP=u9*lWW_q>NMBS.kF;F?\%'r?+9DfZqV,SH$q4Ga-=?`8Jg^j!01q
%ndHlhq/mKR5*D9*Pb)$<P7-bLe$!hEjX4PBi[3C3QJjiLi#uNN1.s"ph"&sUbiDNi<q?)\Z1^<(c.?:T_-V6^\k2lCeQJf)HRe`,
%<FMeKlrRK+nuPp2rTD/Vn"T;X3d,;_.qWh-SJ=>+C!iM7\XA5BU,\!gTCFn?d@NW!RF[[bm2;C[g&5K=i?Jj3>$q%5R%:J8Mb(P&
%FUrC$EUY#'HXX<(Ili5X*mK%/s'I+CnX9"u?egi4089&h0/$1Dd^_a%k9Pk1)X6FS>?8<_Y$Q_WYN_'lkdW9%HU,.ODs&A:4:n+m
%p@E9T*e_mo)S2;(&%q+W*.9rFK:MQ6Q9HeF"VA716Pks]QZ;Jcd*jX85]8&N(X;7*?9NtCK;:Y\DEWBM#NIrIIN<++$QsV#Y7<bI
%6dZqT[iRHZ_smMAhnSN_5>g*@L?[Oqgb-n,#D@HNE>N*PUX;6_q@7I/@,ZOdr!onp+Rs["^'F$iYQ.qFJAWls1(ZRR_T$:LYTFjZ
%KYs^,Z1(95]E>>2@/(dPhZ<G_'S*rW(]S#.I@25X7ZML\<!U.&8'UTQ>X$ociJ"i70paWVP,f'</<?sq&A&q]Qd6BCbJ:bdh@EE3
%@0ekUU(cS.,:@a^V?>_tUII6PWWUkqULj8n/XP_`Ohs6OR*RS[-tt;Vc"4G2KK,S`kOPHsC6_<*3j?#8@[BRb4)i/h?9)\F0f(`C
%]aN0\Oo-9ah^&LIGQ]Y\^nW6dB`&N_rsA-Yn,OHNJ4D3\=U9LYM8TuZQ0=7/Er(kaod*O"D,j)WePg4*'O;a8=',+FeOOa]<*d%7
%8!hb'DfoVt;68SbE5/L*^?O`?Wk,A2mOluSB_hM!^RdKjUESu<%6L#sNcMBTh!6HfmQ/.d@.8JqT2No!$#YpNNj,jj!:<<G4+bnp
%o!BcAm0Hk,MV#Hqp9("SW^e.AVB9!kSn.MAIfK5)rtn!"a8c)-J,]1,ro:aMcE8fi53VL-=$=!Bb)(^1OU\'M?oG&.BJpKW`^7<c
%\dg$>!9!%,'Nh-TUA.<<W7-<S-l1+4HemRJ9G<gJOcs4V36-p<kU==?XES.MZco^TQU=3J8C\f(-%qU.TJs=7XbRUk:+_G?_G!Cc
%4b>?.p6>qK_B<Yu60m,+$Fa&tOuIh=8O!@V12sUKR;uk>86&&,rX$h6Yfln8\(OXj_ifD:!Ikh\5r+etLCn9scOM93DGO(Q9H!A`
%oPIV#hlG:AH]2b.]rG@TYu[[*)4:nB'jWq(d]eo%'sF>AN2\j30toBi`*`R#)i@C4K#-L!CnK=O$48.bIG%^,H33/3#4(<7X"6)[
%!2=i^^BKmipd\\LG.KZF-d5l*O#\H$Bf7KN!=NeYRB:245YB1I4ah1YhT\10]8UD'R4+eQ#J?^3V.cRN(I)6oO$f"C_GjI-@/LWN
%.Ar)>A(e@3Y\hP%[*&^q[HOU@8s>)r$l/\=TiX#!L1j`T;fbk<lVunp'+O`;5#%h2L_0'm%095;9,#mLEI192(1G9:4<pH&B.M@u
%Og)!(3D<EdUO`.g6^_<#ai0tt<RFLN?L,Wnmo8laU<51f&0.7:K.U'O22[hiGN&<7>r>p:rGgtR8H3sQkQ1-C[WT5f&hQQ;=kp%2
%$j(b2YFKCNd=r0.E0E==eOhoH.(%<iQo<a*r$]u=ejGN,M5m(Y7WK*K9H-h?$POE@M[^H\+&qL78cq-1RpBRC3m=,PksUu_76EX(
%jDk'Z&U1[5Z-DJn]R7\p\YR^!r1UR_Zr'K)nT<;n_@_P8ec*o,]2U=CdqT>,c#Nqgbjl#X/SE+E2B/o\+tBITG+6G^73Ae04qpZ+
%f<3O6XpSsqp*iI<dG#]7^3+akd^g$0(WOR=;ef'^)pDMM*$)K=muI4Qq/(l*]Dm3s@e">j]1Gt?ApTW7Z!aGU*gOo`iTZ;c]Vjeh
%IP2d4bf!G+Ys.9d,,4dap$ZBoMu6q=T2q]9R@s5Nos/!cT2oW=)A`-_V43$[,LYicc(n.R*(4KDbD0^q[3E$f3V]G5%RZ@6ek\#I
%f\scP:$Lkamoma-?:IGqefYWSR)m,i+q+"31p)ss-^6$43VadE'+WPc=9qQi*G_^U68Dd>dQsRT0'^^>MlYOb&D9^of^b2-^F0bo
%Y1qPFXm+L!HNhI?n/^3!g'ctn.Y$^C_?&sZ6lH^YZMq4G4=@Q9X2XakMebXkh:;kg.f[-GoD1/$>8rDr]YepZpPGBiAS[?<WrZU-
%%Njl?b'\Ur#?ti5B'(hW[+<(&q0dDP/+h-mTjfVZeY+U<'ZN"`ZiKRqGP.\VWRM?F.:<:0PUHg`'s?&m8_i(=Fb:/BP?@)c!K]hW
%'?>`)7E6TAO\r5s9/SLC%laWNTBUI2X4(fR8(5pDa^&A$=u-H@f?dR3]&gB7TX-u.X,^J>`$Hog/LI_@U)N6?SUQ&S7PpA`:s3(M
%1LVnJ"u0duK/C&"SJd6c#td<ipM*\].\.t`WB\<HBtH-d'(+q^;T?dY+f"Ll7:"i2PWPp!CUdp)muCo^r_+c-elL@iA:GTM"9SRF
%foq+UHei$oo>LuM5skok%td)KBtUI74I?,?Vj\eEcIoXm"N@r8n#MrI?_fkKMA;%2gQ17,7';cs/<-%0fJ,21'k`E#89.Ak49$g8
%Y@Ta@Bk%0#&<DsglgqeA<d'.j58_cGPJKLePSUD^Rk6A';A-Bs-=HtpefhTXVjYFb<$YEF-VE!^!"^.IcUQM`b`#3Y"'Dl=`Ng?_
%/TqUgSn2L<k$7BVFZ0\"eI5(e_W"_(Bj<]-6SK3V5[1J1iVQ2$Uqd6D_F*:.WL6<,/?!%-WHMU6#b#=,k$h_Ce-g%HW;oAhLpBMP
%"s3O^&ebspA8qaf@aWtJp(XFX=Qn21CL#:E;6D>DbJ&)h#Q/*dHP3E<e`>fn1YP/O<<B]+W5!tAi4lV+%0Ju)En&($@1Z`e"[t^j
%4ZH)c#Yl<b&.ZYCmc>V0W5s&n3ap2j?>M=J'2na(r\aF7L]sMe_S'[L'GG#8<\43k^SWA9j;\,-IY!8O.6P^aCPQ\l^4U7A&_5q#
%:4KC,O27MJRVK];]h]ENng"Fl.@H>i14r$D9XIN+F:[N/Uk!IbSW+)G(QR38d'LT_8e,gs?s]J%]goRp#"=lucg\0E^(=`&U9CBB
%@IFS10^IUKS86TYXdE#0<q%m1Vm=t6c;*E(`iSiBXp*DcKB"+Z2cqmO)Y,XQgY[X`Wu`:P?R(l`P%[f4F:$U3ePcVSeWZ^]G$3]S
%XGZcK9>e=QOcK>70b9qR]9sHYN,fb%CpqVYVGn5qf(ti?:?p79r&O/t##/4i[+HC+"@;27_7nQj=B4"GP&YDu,Su2_Dbd@K+"fj:
%.'@0G*JBO'jT#S]Y9f[?"NJ0+P3sa-RW`3)-!_J,7TH:I<JYe.J,o65)BjS,J56LFg[m+Qc?gA/oHC`(g4m^!4R>n22AOq[n%]#a
%Z$#:&7W*S*EPZg1Dt^ccWTpJ5/*u02)5"'+&g!Cg;W%MgLnFROce!e"8Xh\!Egj#]4mdL*^0XpH9@.Arc_?.f_4eHFc0oS8<kQ9Y
%KMdqRV?kiZ\H&;/1-;fd"":NjP]VVQ%C3s\JZV"T=>Njc]%.(QVe,;dmYZ`-c=h*")b#a+%4RIf-Ag'4QW]'jOD.'Ne7S+"BFkjq
%gZh\cZQ!p1URR!golSqtR7AT:[UJ2g!19e7`iYYP#0;`K>3&+:ZE6@0YHHP4(K*?:]%9&bie.'I?p@["Qp7HOj?:TArsmV%<#:(h
%j/7bB6sa6[DGe&Y8X?0$d_#hshGI%6[&J[iNE#/"&V)Kor`.Yc%o^$-\d+X.96E/c+-G8"JGl16$'m78K/\LG@V/Z3(a(ci[0YVa
%19=>m&lE)ePa,-J=Uf21U.Pg9U6X::?'>O.1'ui(D,&L",Nu]c$@p&UnEBRc0\Ipj#-@lWdZG"+W_4G@80[EH9BtW<nq2-c9P_&;
%'";%f0r\A;('h9'8N\1.@3^@Q^4g75b8>0oZg--SB-&qZ>ACLaN9/JD\:q62\b!erXBK4%Wj2du5g4DfV5i54q3,M^BfC"oCW*^d
%FQ?t,d_2)B]Eg[QluLP$jXB\/d3=3LgC&t@kpXr:nUi&n[Nl!ae[r/UX;&779s5'4*Jfs@ki46n>q>-=@K#hpdH&s6;Lja(@@\lj
%i!dDM8'-$YD5(2I;]/LJEJ#l0-nC%m*3;_`oTDg6ZEa0Zc%p>+8WA).1`)^S?h]>FRDJHGUD)93M?eW^b>r),^:Eb+q4`3Imbb1e
%ITA`eaUJ<^X@7i\OR4`]_ESf9L5:M@@3M?jFu4c@Y#8ji9r)4RLD:Jr\2<`HP4^UP+"*1Jq2B3&0PWYO:>Z=<V<NTQ5UC-I5"`No
%>B)(2YhiN:4qaVY<Wppt6EFq'+1PNB9sW2A5>3N^V=KIf-jVe$YYI!g<!S/FP%+`!dsQ+<PgE$#=c&X=*L7HeIpQ`_24J&])[/i'
%"Q;*(Sj1,6YL%nN9HXe>FW#q1N@!Fm@EO->O[@0$fN_HlB5Q0GkWiKa02'!6(d%l!YSn[AonAQ4"E@pc.o'ZW#(>RRX$n.%$>5<r
%PKbM>&P8!4g\8b)jFtQ]8).8t,E\e<%NSusL!BkC=*3XCA0W%P3%m"'4crC[3,2r#Mip>)1p*k&#+RqW```5$H:TZhi?NY=O\Q]=
%mpqA:g?d60"5Pr\7Q45F71ohu2u+$`D3hUugrUUZR0oWV(Upr'^pY$$QW<fQQ"cIaM>@du;6R[+3!I:;W^$+'Lha<WV5;b`.KNmC
%^t3<IU+VJt7???;0J#AEo_Q_1gVI%%[8T*DZ]Z_Z6(,k70<I>p5K']5PVIbsl71dJ8\TB^5LKqF"rbtOF&J`]Ks`g3A3"D2n6D1Y
%(Ps+'[G%I4bnchC0n,+>7]']d:n^Hk3g1te7-/0JgSK7H0DD2X8K%KlqK:-spKT1EMjX)37QPFX@\KoI`Yl*;Adf(oJ`QpSTO#An
%>Sf,]/i'BJ;e_3I`D8D]A\XITXbCP'e,o$pBd7F.Plg;p@2/jUWm+"RaW+8a"Lo1GH"IMH9/JL4g#00@PpTNLe:hKIE`"eFE!JTF
%&TNAE<@qj<[#in<W+FM7i$V&"Xcc_OE0j+q!1?'P"Om7P2luRh'qhD+im*8#q6Vjmn6U,$OfIRnh'#B>o3l`q7/fT;0G,JQKo&9Z
%k^Vej?$C7eTm0\'"g*YmmBAnJ:+%]s8;LLJ1naGhh+@$4o+6Il:c=p@0PrQ<MRm^^7K&p=+U<A'84/VA)pfhZ;i>GnAXA,%a1Yqk
%dhQEs1;rtrWirR4B-m&D9G13B4$\6N9pK0mQ+6BGW>D^hi3L!k:QqV)**K6X"AXt4hUBIBcL9m8j)D+0T*HSJOYl`Wp&&Q?nPsZ<
%&qC)5e1Tk8.9cK*B+"d/;EQ-Ok(P_%:,>FoC._YgN@JO@_@WO<(+=c#Z@^8OH@?Sh'$SgP]Q_*5qBZOQpEZ^IAZ.Zi-*Tm1]F%s]
%1/HrtWOti2Q?[:i1:NcsW4_Ld3j4opXS[8h6Dp&mW&f7t8["*;(-K:YW*;SOQ!<(uXB3C6$bh(,fIJ-flHO3`g9"g+9&=H6gaf1m
%MXJFVQf87dc!e`6A0[3(0.duIRQ1X,WuQ\\=AZSrKgo>n:r6_<<Z(kk%HF>8O8]uq@5]Fb,[RlI+A<YR?bhd",t\[P:g`E>+?M"7
%R=!/+@RKR.MW<!FBZ?HNAWSO.oR>qOma`(NmnM8>C">diZX!Ysg$4!MI'$L9e[hVcY5eth`As6*:`_n5l`uXk=tm"RMo)Ko*<qfN
%ct'&:p5KYDi-,_sWOZqI@ne7`f/f;Gqb*9L^SP/7ei?CZAmo)[BQ$>:1aQ^Udmt0nXgYO4eQF13AlfWC##^/ga\1!n&DgW-!eJt;
%3&^5K_XS20^#9h5#BI\ZIAi<l2KM?H2a(BeK7gCHNTU?#!t=eMS0=HiXh%q/LeffnYGIZbb.B[9rp/$l]'srn$)N\$mR_`hmV?fi
%`F0mI#19b\"=725Tft5b$PDcm[Vs[*)1`-gZ?J$nZGrm-0LBr:h<WTs<oo8Ph10/eh+[Q7WC+#Lkqp[1U1d`VkU\!KPtY=M<Nhg+
%c@:!&04(&10Qi<UfaEs2UsRY3"L@-TeZMO6'8(]q`--K"\;,K\CI?u5MVM,feeTDXMIX\Wf8GX%(tt%Z]sujUh[cF["jXb`K=a\Q
%B@+(7mR#?'%ar4nW'/qJJRkjaK'Jk$"2U_]fH:K#A;i$u7&_XC&$ak;[YL;QkbKAA<`_euNXcJqHsK.$eZc8)<[EbUDdBL6Oi^YL
%IM[cCQ8`A'=jVL$[-msA`Ab=Y,Z=#E+-BK@(()Q('f*UF'qCu9C@mQo/*JP%;A+'lRmj6LcKkFd]&^!'hg\:P^j5RHmqsf#H'RQZ
%XsD0(ZB/iPW*.UfiW^n*]#AF&4\2t^]'IJFh0qo`X'XB)8[eF@a.0?1#)S$&b3*;O[2C5op-&]8?Kc!'YP`964I1]1H;4jm>Edpt
%FdMp=4>Br)OG9uW"O4qC"VkT`m$OQdh\[>Nb"iSCJmb$97$)3tLpcu2q2!6:'hDW9F(6B;`30$+V5GX?%$QjVlpZ>7Q*WHMUZ>j?
%>R#nTBbS*h<QN0+`7p<rZ^AN/nTeNW*>`Bc)/d_rbB(4eef,L=fUJn&<V%=:T:m$uauGsKFm211Pq$fG,("lUP18_FL8cB\_0?FN
%iurk7AFP=-[?((44pSKack4VX-..12=Ph:r_o-UH<+4g\krM1t$:.\^H9mK@NhNcqjQR\Hd!b4!SB+2@\H!o\bN**':@KYB8`]rT
%4Cj`[iUVM*#=t3e*nqiM4r2BFXmO3<-N[&Z5BVPTn4Z]5Hu\Q1Xcruh<dIla>.7;oe2gBOHWUSe-'.S1I6(7&#05O`SasUD*uqt8
%*r%+<=%)\<NIG$Y.:@IUc;RFOPoUg[^e,HDK8V@\/61^Ab)L/!UcIN9[]3Q[6Hr.8]-\sSo!"q[+pe\i?BIh?2Ub#^MAn^SnYeQW
%n[DL"Upd@-"e8:Mh'IL#1q-BJ[5p4QPVqbm\j^#P+rV\SWFdoT[n.esgp\KlX``TE,dIkqN=26t&MAnuIl1tW#9BUnrtZU4j5W[l
%8umKKY7,2g;<LgM`GG0!V#lX5Pe&@MCL'QE=M*8)V)!t%#hZ0BX4Y"ZEV3e`'iqA-1C9@m88S^'4U`)1%I%F[9b7S:GtEu.cR)B0
%NUhl&-07m[JRP1%!fE.J;'25S'hn'@7Ub6(]r](QkWEX4MQV.p](;*=(6<+r[FAOjWG;.[-CO*\=\+dC;RDOdG't:^fW55ZP3#/_
%"1BUEEG,K#1c8:!6sh(]Mdj+uX]72P4k1C9kIFV`7j8Wbq5\1,(k'N2?[15E88tOpWUnL5C3n6+'LkYT[Ab[1C@n)lhc>@sq+C:4
%`Q43e8m_lhAd&e3Khu-n6A+)f"XmNLak=;JXK]M*qCLJn#?M(iTn5k8CG7C0j8oQ-Bf]O&N>ZIiD66eV:VGYs^0-o5peXo861':2
%f+B0e,,07FlH*.(SV'=M(($/XkWuLL_g!Q"!m@PVme"`:cMF4>n$VJp[f-R6i.(tn:k>)@].((Q>5Ln$Q`b[L]i+t,XG^WRf0:c"
%)<E,ceK<pKUNFGPRBfZ6:S;aJTlXRQ%Vol;Z@Q&`+ir3D>tdD;,%D3c\%"GkoW@G]oM%cg"Lgq++02>P_+]b0YfH+F^\O]Lis.,L
%)a]Dnnd!UPc[pebOb,P,Y]a9)BeT.%()9C@-,W$oF,Tc%embS;^i&-301DdHHsmnJi&jHV(NEkT0?[3q!_J8C>lu]-@&3GSkUE=K
%67rsU<5nDe6m#RH7.Hg?kTT?d1LqksrlhiY=o4!>Y$'U-G@gTsgU/pE;C>OlqjV%+MRW$t<Je)HhCP^5@VpY/WT*SW%UBtu.l95q
%P$oP@VH6tj;hp,A.+pYbqmS@eqYs^*o2Mm`l3plW_L$p$^,n"&>82kcj"3-,8c"@s>NX4Kn=J\!M0j/QH\qIN:05a.hYE-pY:&Q,
%%M*Er]d)bu/l*K_Y8?K29FoBJV[^6sCCb8f^B<hEM@WEm\,YgfW=LRtYP[^/aU\i'\+f=`kR['.Vt'67"+2MJM`Ph(#mVT*K6csj
%&Pc?ZO>BW4g+-,EC>*"igFJJ[lC/13g=>joFAZ?LTZfdu<UJ/9`QLVHE)[Q`[:L$-!31-8pT;i?L0QR[&QiaO7$+",D.]u0*&<"@
%[U=`0I]^WRBP!Sb104L1!k%$[,&5TAPq@-B![b#9on=j[kUFTskn[uA`NEk^l!r6geCG8s#[80jqV@9]=FZa..eBm)"LG;SMUc2`
%^pD8k)3fnoT182Y*WtPtll0@JXkZQYK>U_]]]<.u[Hh]9hZFnCSCW:,j^,NQT;A23%1E&m77tO(7Tt9ZV9+"BE,T9i>XdigN8>gY
%^$\rK]O5(.6*N%[dRIEd2iGV5XUfd@_4Y4\iBURC11uk2#-RnSAf=NBNL=dLNaNI[oI;pF4i*hEH"=#n0b5i%<>Tk-]Ltpk/+C^=
%+!4DI_ji_"c$r@=5RY*T[Gt24[^Am-n:ccl_7ip$:!*Ca@$hjOg$E\m<%bP\,W"!-/jARPWDU=rZcUN<`FEccHEf`u,)V\6s#TsS
%;p`iA&Ab7.Ou>r9oK9.eokmQmHGc$.l`F*e0QZK)`I/S&=LQq#s7@73,25HZ@ZJ<FQs!0T9:H2b?cf1oB'HaNFUkeNg?;BJqeEFF
%g+<S-NF@mIg.'ngbjQkJ#]3!4HA]cVUTOTsrZQ_JJR;gCNM,?<EnT*FTYoEJ^DfM(XA-djQ/7\fgGsHC\;d;oAr$l*\o9R?$!X/p
%B-5Gj3G9Y:W2*c5o=p\Fg\(opJ-q\/)!cm[Jkb\2&lZ.VB"gfkW2]oq!D^iAe7:K"V+MQL4t]T12D__6+0lX.*O8,@!b;tK]1SC`
%\pp7:7S=V?POG8);oe`Veqb#V0t$o=j*krF;TnGc2_-]X@=F7%?Wp1)BSQ\VhHkn/KS@jc91'+abfo$pDR&J,>^(U_a'S@h+^A)T
%F9T?cA9DE]B!15=E.s`o)PU/b-sR-NMHL#<R);b4:U[5"+e'UGfqdR,1&I7oZ6+[@p(N*G=FZc@-*0q0]'_1U=<Rcu4"CZL<-o-2
%;ie9>XK.J7D/T)_[MCDaB9H17Y9t->I3s*g4AMZ:fYr'^Ll+??J1bG,fB_:UT[LLePH&#L(KM7jPOM^YYK!-^VdmA`$Y@GeIYZiN
%45bG80mZn"JfKSA*A0L6gNC]O._O]"WbG,D&Q!YdSX6a2A'E+Q,Lc5;WKfoGa/O_XHiI""<`=X7g^e-26J<5M#@7'UD<fNm=s5fH
%2MUVt?r\"sm%N/p:q-D;E>5'8?15GeeKG].9X``sqKNdA#+MJ/g`OiN)3fD#4je)fQ4_50]K]`hmh.t9q=X9X@@GW8)#'Y+R)28N
%BF!5Y+`H70Rn'7ro2?tV.'quMX>Z:GhDVsmYV3G2-ak3.9sl;9[FC#8Y-b?4W+[Vg8rnfj/ZL]@]llhnf]m8K'_$Ca^LXJST/<LT
%h@C_7A(NPZVjOT]/861Z2F(<p'Er06T^fE`9c?.H/qgI9fi<X4:BT`XS3DVrdp4;Y4nOh8B#A`fGM_N5?LbN?l.EL7$V(7GGL/p(
%n:r''eTg8W&^^K10UXY0[!3`ImW>jH5puOE,kDCU:Ic(50_sfklO%WrhH3&]Su1e2A3ob6DaQ+@5hPu8UghrRM[hs84]A7Tj<d/"
%2T9_C$<96tJhE3=15R<iXrZYB\oTRq@]o9BgI^Fao])B.*mLQ_Y^JPcSIcFGA8@L\.?'PY2=hnY/7mX5HP'(U)Pd3bai!Gul'[k1
%VeKfJ1S%3lii335K_s=\4$tlHVj/aO?]\qD[\5:CeOJ)mXJpjK1]oVdS^U<IPdNG0ZZXrYemK7i,q[l?8ik4MUN%HaBOLe#m?4W\
%IOQ^fU&UuMVfk@Gh)\I^K%:2'd5KR</qPGI<lm]D6!**8Ld28Wj?%=Nk"@+(%4%oFa/BAY$QM5pB4b>H%k=AcnFgQQ5hfI^JMsN+
%74AMCrnIpTP)s$JdRU/Vj)Pgt>$B,_\[(g)ldSNa^a'WdElC)AM&T[6(CbVMA5VA5jW?$N!)''H,\4k?FnW'AmZOa73@.I8iI8*n
%Y@c7Qi(UBQKAr<q@+%e"X33-%>2:G.6gG2F;X(36YMYrfA<q'RC3f\uZS.:bb@eS,S!P[,brXNu=e6k!pAONTU)R^,Ra!anPt>"t
%O&eQWe&Z\[Bp^c!LK`CH[4Q\"G"#IiI^M=4*I&!*DE3/q4A/A9nm!en^[PK/c5CGCY[1iGFu5==[-q(&bVt15OD@Vtp9]"8+Z_3^
%i7=Tjmrp*n;X^g\hj/C"#-MWCN)C1NcEmp8#<Lb'/Z"0%?l4!i8dkM@W?U%RAga'b"J+$NCVK4h*pknGo#,nj.uQZpcXnYQAN159
%IR%)$4!&%T8uESK^Z8)hG6lo$Pj<"j@FNR=CcS?hV_Qq#Ec`coj"%`1EN!Sdr?fX9``6J"YK,3&;=kNXm<!O%r`!/G4h'P?E?Kk!
%&amVYk9?Y]Kb[4FVVjU/lRB!@7;1XQno*f)WO]H&\NJ0g/J\ocZ.UA1?WW=2mB(q<\CQ3l?62RfdbPZ^V)it<Ps]KD3$qic>LDX<
%($FSIMdX9[\(Et^ga24Tfg^mdr2j#D.M\qNE.9i_S;IYM=2"WSQ*aT\dS+@lr#"2CVh=pXl0>[ZEp[M^^>ZeFnK?qKl?t.$O28I8
%>d^j)gJ3/(Zi)e)am2sOn;,to*p1QM)KbUcV5n&mP24<e'h(BVA;.ngl]"IS<q*Gu3Yt:YZt]SlVB$"T9t/,jVuF9tU/%sfgM6Ii
%%[rl1-<PQ1%f0UHa")2+(,&rrQ"ZZ,p/1-M(@H;/*G_WhL9F8h_0Bm_=R@N6]VPmi"&_W4LV21F]i&QK@-aur-u8It=E.29)Ng^Y
%>.bH6@aenmMRW_aI'6M\QU4nUXX:s[(("?k<.d*cMuoG9L1JL%LSZh/QaQ)9b0#h6^J&q+/=XRYdR*42R2?])^RaH*^f@1Q3>(?g
%MfWoF+l8L]G7h?A^;*I/'dQ[,f)_de[Oqh6j2gQNk#Bn^U]"gMaQR!`JH/SVbt+UgBOPE;[KP/PSNCXEc"4TWU'([@;n7Mf98V"'
%Q+":+M#%H>6.OW'2IK@)h\pDICo*"`,O"fh\jh2-IUhT`='NGU"B:%fb/5]X_tk=0X/uq<?aIjblrC:uKI>;A+fK&(El_P(=OK_4
%lE=[W>qN-2r;EI3`X:8N*S$p%h2P7AAS8bb+p\/%>]W][6sXS0o#0'J3U*J-ju(g-:2sI)!EGW:Q<H.`<>mZ03)cm?5Zf:j+G$5V
%Dk^$G9+ApL]X2:R,e,o3RAMpf]']%Ui74.s#C_N+2N>rN>B:f=8f^8;6`0kn265O'7u7-]mOF=RFbq+^R'9Q\d:q!ip.doWo_!uX
%XnQ^l-kJ]RJri)h2T6)$O-Kh2XG5b-kI;]t-Uf(X^;n^u3Cj3cWaI`cl5sc"%eVAa,:/U,lgVcWnf#58;n/lQ!+%D.3fpXG;f#om
%R^7i9d2Y*:>3bGA=`l&#,sd^()YQb_$UI54EDnGf16MY;leVT+=]QlleC?"NU&\mF(A2SVg/X`gQ)BAulXkDT>E0ELVdS,[(R;fd
%Hi5:7$En45$R(mDN(KFh:"bBODM]\f,[jL*2Bo_T@0!5>Q[9;iFGYuaWA@,g/(3+`Im&_E5Me&lTKN0*-_q%kI-I,W>#G(m.qkjJ
%$L]<2BXRA=)TsRWRt/*$eAI%J&5d94VBk6dLSYo6iQ_!YH1<f+NEoedpR-rKl##A<1-l;e,J9Lb:#Z&SJ8oY&n#"6(P$1(D9=Dr9
%]=O1V"*KccEoj-&+Y$j,l8:d9QqZs<i6r,#AofY]L<Gq<%Z/IJ_O#GPFF$j952f\^0Mro,?1[A#F"kW:<g5#^36''P5_0=mi%0\^
%@_^N($9*5K05ED_$lW1`OGVWW:K<nudKc%X@hsY9b1CY?W)HYo5p?q!1lE&XCd\q&B9AZ9R]KTB2l([sTU>Mf#$K1N:-`+6Y\Q.J
%#6\\*,T[sMd95-aWS_Zb_N_npXTo\>$O069M0)<I`T<G<Ycfr5W0MM*#Z>TYBJ^N$c]I9S2pnR3,//@Yo.e>m<O8k8jKb[@H]"Ym
%qirnm[[bpD]qW40.^A#VY&h\(o`\;#m6-Qn[emMER-$<3d1utKdqa5!70>EKB9Po>A^"ng"VpqdZuFUU0B6!q95(i&^fDprJaH>l
%eSOU-G$>>`GtWnDc&K[0^_\mJJOBCH`PlBnB!RfJWoBm%e_#f)\S)nPPATRVAs!U:C+Hc0,(7IOH^Y>fKT$hnJ7H-kmN?#j?itI8
%5`1&nDcfq4JrN/,G'o![`+S;:<(@Dr,]6BX]NiA!kC9<060orCVUQ\h$f<p.0+!Jd^9VHGbV4nJAsmjjdgkS)<bX7^(9Q0s`]L@E
%9^l?J19)4)lU1lq0"[Pb`O9s'`(.$rQCMC3PZBfZ.t#[<(".%<(7oDRefi>',SNNIf53lmA\<sM:18XJ>F2!6#pVTeG$R`@Zc2TN
%Jq5Z3olMiECAl[2grPS@6%#(>8!R/\*&t*9dLF']>(B+q66#jNC^CL1."9+B:^Hp8*T(QBK6.c+C^@f\3^$B)dqe8BM<FL$-<*+N
%$8=8$Hn"<V'odi+@<%^JSrj2/oXETRq&9U9"*ZT@OoQ"D^]`qu9e!)J\V]s3$Z1/&#n=&rEd2Wp.X?k\%8$`s=4_.uo&\;-N;";k
%lq:$&p2!i\RS1?ooSV?ec<L(hJ]%Xc<:#I'1.R'"/RN$O(p_Tm=O+7R=PUW#e%9R00b+O/T%JcBb4.+>nVXPI35>7^DeY7Z@ALBB
%U6.K(ebHSG83o]*AU2C-gbd0/L5%(`EDkof"?[Zp%p'A(`_K#E)q7G:KZN"A7r1t3mG-pl$N97Pq7gfo=a"<WH="hq@-:6crH&oe
%Zb^S<-=^@CmujQPWGFr5%a!c3F<[-M6&'FR617=6X+de"!D%iSluE*8I":RdepsYji8(fOSJg7?o5)&m(47eq$he0oEW1>O%:4*4
%;R+nS;Jd@b1EG0L\?M<EMiY3eHWg%b+@IBG]$(hd[997X'#?N:MA!)aKHjEh07]N'D(dCWOqn%.MUB=&23"LZ@pS)_P,1!CJ*pb]
%gX4A6'gPS@DR?1T-G+#'KC]rK-gW6XfG!u>.U6D?>m*NU\7o>b?03E4RD*fhq_#*X>Tt"3AqI:Oh#4f;bn^k;P*=4.`EieZ6KpFT
%pTSO2,C`DZ<!24&[CJFi,BXs;V,Nlk6Hn_%XTt:(j=-ddCXG$n#sBo/&a%C"BQ4#(8t\HUS`I*=g6%QH5"4`^Zth4ffNrlR8N$7L
%U7oRP?l:QVQS8g%a;7Ls2`SAu^Aa!Cf&A0k\.UJC\X4dZG?`#A4A=6]jg;tlnT6W+K1S%mQ#b]<2<$VLGoI3X&^@@jo'BI%Ma9YA
%=8?kMZjW*5Tr"^Uq:Dp]AE8!h!;JKhrR/$2lMb+")-*c*7dBRQ%UDt;FiXR5Y!@<a^:Qe)%476/H.t5kYV!lYg@W)'D``QRpEjge
%U/^Qab@\(/UY=(189-=un>b<47^#9@6^f$Q&^E=HB$lXW^'_qc?=B+pMhYmn0uDcnC/bJ6ULhDd`5[*-c\Ha0hZ6cnVDp=rE"10S
%_@Dt:E>4l+jtYinCt^5;`G5oiq>Pgc*@$&kcg]SuNU6X$P7qc=)<;,\SCWH9DQ3^$Rlus8mWK`%Cm_-6%F[+_g)6I.do/=tUO>M`
%1hAMG0B^bjLLLUoE4$s\@"fMum2&<kR[1mcGh$E3;j<k,g[a4%YXoPkB.Q[5!@MhEnoaJW?g;KM)D0J$a]S*hB#(+&@5Z.R$Yp)]
%>@WXLEGf>=nZr"[^@j=1@Uqp&"pX<19Gi\qS\p=+b\hJLq-:Z4iqh+3Fj2#r/\DQCHC;VC1744"5U7hq!m;ahc&ag[-c[Oq)N^mD
%Rk`'U8L=S[RS,s-\)*CSLg$,helibUC1f^Lp8KkYhH+&e"OZCI"n@`?>%P5rntTGaC"tRm_[6I6;52mm]aYpb*Ta<uR_\(@o:LM&
%9BGruJ0D(1I8&Ob!OcFl`iEk6)g-Q:J7K(.M(?rX\/gAhNCM6u0qt&2FQPRuIG/a-Su4W[2;\YMhU6DGq?DO>X#TY#)SgdCNsU00
%2\o":rgNi"p=6kXgo]T&.t%NmDun['0?fgdZNDLi/>Jmh0IE8N/PfU:c%KZtThU^SWXRZ!Gr-'mGJL/oYBtZ^!-Z[lpJa<siU2![
%7L#bE_OV(p9oqApRrLsIpbQ^r")kj23:7KO_oNj:4HDG?`tu^="n[5>I7KV'f09[d4DaZ^Vd)I<?q&R@40?%=4be_t44>uUM;:;\
%N+[Ra+HX!7:%-!&&\#`a"!H:3*.a#@ZX5raBPG\\q`1AoCAP4!:Chf<51+PAL^ad9TH88q->!(G2=kkch3>fTjaPiT>4g'p]oiTg
%,8ZG#k^C3@,Zoq\1ORpR[H(A[p2Z3;s0RF4h_-&tEn_t6Af,35n3?:Y=Lqd$o6It8J5868B^*o/loc;aDR0GRF8gVnMZ`UYo,i8T
%HO9:GZMA2>6JLi"]:;IaNGY_uTUK__a%negI;@RQ1DEWA@Qj*8iN.&!YeS&1Zb78)jV\17m)HU?_2(;]B_JelWaS[``:%BZlu)%I
%"\GVJapl+U36d@VIfD>p#<Y$<YN<,Lj`=3?h3V%6<7a9UG$i>HdsQAIi=@^7T&RD\9RdVYpZ1`_<W%K"^8JC-C%D/lrLVHP3t^C)
%4M[FBi/Am?%5)U3*-ee$:1FsM#n,T8L;V@BDn^i_#N@]t@NR2\9q_!1<B+J?h!#W15oKYq%;5<f5GQ+6k2FS_E6!UtF%!ZT,DX)\
%h@('9eqlU,`>P?.busR,Z?Xi&g`\?=3#HRSN&tJ10T=#@>N<u;3K:m)#-V9p6m.Q\F9]#q#&4c#j:j:+*1BUd#(]]$lSsC"VkD[E
%%98VXMi*>iM6`O.(r@47iK'GsL/RBE/,Uh4J,RVmRJ6Vq$IZ)bj<uc(UmjK3-V"U1+<0Dk9R060#L+_oh9+3^o#.h=>qJQrlQFa>
%WHpSi?O*8Y:K,Kd*]qK.\Vb"2n<kqlk,G>jWb]=4S#bVY$bdXWi=7>XT%_scR*O0bF-Q)476F(%cdUN.amhC6I@e=55n),h%J98r
%I4<$=Zd9@DoG%p#X[Gr`d2-/3<#RnWa+J_\4K7@[:TiCBih!W'%gK$5c9)AmPuLmHlra(F7qc"g1gHsbTH%r;TV<n/qM.WB"/_'$
%=<eGUXCHc@MY]uY=k'`fg:;'Mb"bg!,&CiSA=O0DTSK:7CJ@G40%F@K)qj4^@4`)34[;.AS,C26V%kH#)G@DXrN[+aXWAsh<dS(Y
%W%ehrk)F0Vb,j:Z8peRh8gB&M!<_<`Z3^f'J7S6Yn"5n`]AfRnY,BsG&=FrNb5O<p]be#_gMcW7MI[lnb&Q+s_%.^/PLQ*q=p*@A
%CVVuE2S4"jQX49`muX[+a.\!CE15,@O)jta^@0P05HEg99!'OiB>^HP'=M1^BRF+7%JeJM;'4(MqL)"BCc(]e/'MLnHd$Su`:!0O
%I9sS4T\m<R*[gtYhqs7hSfY[E3ac#,E5W"lZ3?9*JKoheP"bAp'g*4cK4'>8mGM\D\8i1QZ@o,@E=f01kZW6-(S4T\,HB^:D]E:K
%4@KcVq;WS1iou<dZ6KU*P(T(BY'K$-U\Hl"]AC[rR`/?Jg!sDV>o6@'``&<dMULkf24i+<;%dMCcZ)?r4L'`q/qpK9EKIbN<A?W/
%N(mtQ^2oV_qH?UE?)bnD1cgF73BBa'T$g2Va\upEe=7#c:S(%?Y9i;Q:3d1H^67#4oP3!unoV7!P$=M=Q`&j)$@[9S@#fom6#=co
%-1gcP%T6r".%7')k0'hdJnt\J2HSn_&VG-Mist'h^(/sG=*G4ao/,qVWP#")hQFWVl1>uBrH@iu:F5M+-b(Z;H4#@tcBte+jp@B"
%)J>qSZa!?gIN6)%95?[E?lcDO8#\YUDg.YQ8*2u(IQ`Rm7jU@'Nd#rX7q4_;Siq,$8##_Aeda@fUMh6AhB"-$,EM^ao:;!2daep;
%GD?Rp;s$5`]gotag%kq[s"4?18Hg)6"a0nJ8#P:DB]*PGGS1;f2$HKo_3JXm.66a`&"YV20-[[%9mEBH#Q5!*l=-*unAR22R>kL4
%j.P2dM0sPW+:$^6?Xgs;+uuTfliJQ+&B\-3AWp3cA6;TY/Pfdk:]BIK']Y%mGiCLaSJk;P`_jHi'llDc*FEj-&a/[pHk(0]#A##R
%7*$#\Ecm4$$)<.&d6SMh&Q&%OQ;3lBY'e^$o&T+&3Qb42^skZ.b*T6a`N;6;/5Itc+KT_4i7d;(4B\k_!na@bk"1FNeAj\F1.T^X
%TRGtFUj6uq#N[g=Us0Qoo6&q1KfE.)m[uT'ajYMjFpGuJ:E7[od6$RZH.%)#K&8l[c]\P)j9'h,5t@-cPqG1t*.!3mSoCDSZ07$!
%HCBfuF[nq,dZ]SO-qjC\Pab_86.OBs_"<:8&"8rYr2(jjGnTc)Ud%#!:fjj_+Dp.1i#L6e4CK7#J&g+(nH=8&i?(i?BXQ+6$lM,/
%+6SYrVMC0%=R%q(cVs_UO;Zk/`r<b`Qe1n+873KCb[ZsL1c1Q'Fs+9)e"GO-d0KZD:H!</M'ie.bBNT'OY6IUB*u5?_BT*O`)^u*
%N@kOc*UN0S!'a<<:4,'g=m+6&>gAqemQ45G?/D6p0Ka=,I)NaWm6;6b>h4GG0DHn?T:HSTEef%.cB6K6nU=`'ON5'(8/`k]gkf.r
%nF&K>T#^/<)1Y5gi/(\%OUrP9h17r"0l;r8*1+G#14=?(Xa/KgLia=,Stm[)h;hD+5+B>@T&7eSg,X^*HdJN+lAC!RSBIPR07%.j
%T9eYZp`?p8,07O/I2e[4j5$=uqF=#ici&&:o7%;(k):hA&R?eoVIEBKDDU_0%7b<3MDP[*p8Mm9dSZBN4Wk:t3A+Q(m=H,;jJ`O=
%&>LDcksOK@JP'TNQ/Dl)B!5#HG!i%[agY!5/L^]D`$^CJ\.9iGno]F%75c;@/8H^.Vb*!.V#@$QMOK=];A/ds=??M($O3l=L?se4
%/]dB.Q%?r\fj#`b:E#p>)jgdZn>C7pGhj]a(=t3Fg6MQ:AprGRlg0X]G3;8?"/W]Ie([O)[0%,4R[*hL`KLY8UV+#\_r>:fi2GqM
%iDb?)F@l[9:bK(sCLudbi(0*5o9q>j*DrfGe4g($;,`QY1ItV<cke$Nl%P33')``S=M6/C,?$IfYE[P!K=fO/%gX0\aE)n0Gj$7\
%7-()%4C"&)?TLHCG#X]]T(;A*5*X'>h!F6p:FDK"CWj_5`[h--RHk;EVi4]bjT%+FS?FU0)XL3qFcEeA#_CSH%d;qd,85rS_Q#bn
%?ppYiV'Z$(r;H'cX6m&X$fCV<Nd!ND1=t]7^2\4h^Xnl8Dek`\V$')=<a&jDr$u<-f@Ztl2OLrcrB9I`Dq>FXYN53DS<pmlLY&r7
%Z2i&oA`Lj%i_XN`E'7k^#--\:[+Og"Z>*&i]a_gkPnqkYblZF:*?%<6G]5`/4D4+'$HMbU4)2DQBg9<1p&WGsQTh1#/X:"h@$Z3A
%hj"OG<Yi9M'>FIi7b3CqA7Vbt?.Kl[]8s#koH!CA:#F2m[)JNZ(9-$k1TsrgQ*N;6[qnFJ#,(WA\dlQ%]q*2#)rG'N/6(Vl_$Gb5
%&4=(^Vmkir>1(Q3*(%R5#h4s`'.h`Z46q(/*@AXmnRf'S=9XP[)9Squk+Vm#:Q<EM_19TH8^(_OY[+^'=s'@H@t"9/N.O>Se5IS@
%MD4t*NBW"$7r2?QDuJMj9S8JPp$4/V3@W2.j>WlU>DGA?FJT^QR3!6ST'g6K@[HQog!DlcmQsB5H`.f+Jo!lhZ7M!GZ7[1U1UYb(
%Xb1$,7<iG#-]JkO"@Di5kg;[;X/f;K"<VYVqUPdT>^;1NJ(:`<OVH22UKuqCFOI3J'U#`9kR@`->80-%Z5@"LiZc9]]8FGWHEJcN
%X6MjNFYYS\,h.?<?BFImOQr][mL\EB!C^A7@$M$uN3H8\#6rF\2;ae%4=o:?fA*QZf28t0W39e+et0??h<"")HuFf,2l7;j9HD-N
%T#%8#:'F4_JZRK@_Kctam1-2jAm4Z;m.^'^]A)r4UZWeJ?fJVdbra`9i$`V`Tprj%Xu!'oS:r+c>W>)5CKG%\'AdA!;:es#8o%%s
%Ge%ObfP6P.)qKq;T2+K:_ke.!A?IgG=CKl/]gaVFJg$^!Z&ee]B(nri$^5A^rPR5Bn#jTM3Lb4JpB"Pif0H#;Q/B):ApboY^e)+J
%5WC?G#&_&=U9Kn,1++REX3Ng53-]^V:5On-RS4gQCi92oj7$&W;7/Mn!n[WS9dp^=V;*u)!eP8o;=>/8?+ZY+2;F\X8@ml<\eL*m
%Xdn#pfm^N@hlA`C3C1toT)@mAJj!3&HhG-\>2Whflik;4dU;rUB'i'$DaWmF!]*sFg.3$QdtbdU7A#.b3*kFAOAJFofStV.[Hb9L
%;+4oM@g1OS\/E#bhl,3XBSXYa^u*Lqd10XiM7S[Os*I]IKs.<CXC+?#*Sc_+P<a4Ul']/#=K/;MAqGDO/P&hQ]1Z3cIrO7fq+g\7
%$:3HNh1+*ENah"iTnOTFZhubY5#8HVYAY)!_,roYb!B9n:F1)P*NfpdF2@$'9rV:,q.>4L7G6_W6u2XI_YpqPqb,*'.G+"P\t:k<
%?,:bU>5n%kIbc3X])\oh;dHe5=',)D6L-,Pm`Msc&R8*cf+Z^uM"&!5]rng46%\g3=6o)(q@^<@?EU?1lcS_rFmF?<jLW*4HJaai
%\#TPt$ANomigpSS8[@-:2g9Dk:SR*f^q-;ZIZSDj2;VUrpnMrDX#'2NdN>j^4dl2"*r\_nhbi*O2>LP*oWuEGX2TN#DVmn>>r?k.
%3aU#%3@a-+9mYK)WjorJ:6SlZYqFl5R)?-FGHQl\J*&Sg`gpo*%`$bqjlcbRQ1QT`4p6\2`k&Nh;Ii'%W3N5=FM"UsE8T@qoWKnE
%3N@"shP4Yn$(t3UDqb39]UAX9SDc<m(n5s3c)o.g<-&"BUDk3+G?5pdTI0+Vche@J#<@-4qYhb'Io+X=jS)rRrj/W>3s*28(3#]n
%i/SuM"r<`+)u-0>gn>%W,5sklh\Y!2X7A=brgqcW58iC_FXVVI%FRT7`X@'%Le\VA]\u?*%&@`DP'J2^bcHml9MmXMKrVZPE!*q?
%-4c*C]3b<WQuHO1jb&_\(N9T-5Ka;ZJZ(K3kZS(mN79_R#ds?u=_1;cge#*t5/6@cUM86mZd!U"Y8Kf#]`,JI?--"S<,jMo4"M\7
%"nLL'-*eD8<aV)ogNgYD,ZPp$\bsg?o+h%OIl0KVdh](Mr0&Ln(GopA1Q(26X@a`0)XS4rO0=OK,^5nC(X4_L`^Fs]n,SnC5sXAR
%oIR!`g-4T^hU1(?."?'_Bu&5>(6phbb+!9[*,_IJnquZN"ZJ/eY,9<U.u4L`kTNk`f&%fql%-fTb[2$![!YB^UFlVN@L.OaK3_<[
%j.H&gnU:ahdQIp[6j#7R4k*=;b%!qi$JOMBkpqCS&]\H'Z@pZ'RCL%`2`:>5A-iEqEJU1d;-GBg+MabV'ZrP$Hl_aRkW\hI:cmt%
%U";WZ0%;e!P[W!bWRk5dgZO3r"6i&MnK6f3s7i3Nrm1WDa++$=hjkB7;c3rDCd%ke"lYqO&o;EYCmFp46@gP!>8U4RR\8A=X9;eT
%TV#I7kT*F"XKKcp0b%Yc;/f.h"E;EZ3tbB8Gi0m=ED=*3<e+[/&!)6b_A^2.kp[qbfUW.tn'ar;e+76K1R01])5$'gDZ=gN_4Uae
%i==`CI'(H:2>%;VY>tq/Ru4,lHU?/<9#\/7k`?torSV:6A+O[O/"5f:7?.*IV[\n1Hn,gmA0'-pjUk2GXt1WXbc162,8<FFa]8s2
%O\NlUCeZT!`'a*)J'B>cg`ZP[ZI,\+d*s)1!<tM)OATE27Q)\L*0VhK:2;YEd^8;9cbJhb0[Ug"0[lF)np2b5/IGo\M>K1E,F.GM
%72f#cgP7coPDORPiUU5r1V^,i_od&WlWPD*)NlAj]\pl@i,k.78C<OdL/#gFq)+qq(/#HCGQ(VJU'?t^l[Ib7"Fg&HN7k/e:XW50
%=Y?;45W)=C\P=gi<g);fSVf5QHa/<@W5,]sNZJcbW*Rp;jWor]'?;]@,]14&0dOJuMFRlsal*UN5[PtU=KnW*eK*n1"3":$BLO[q
%K*tCQbP>(?1E=q0]6G5tX8BT6GXoF]+nlmLS!ghNWDjQ-S@?jQ8.ldCTo?teDa9[th1Dq8>gf%b!Ni_';!(AKpL?D:@2t5&EaPNG
%*[!4?Th*OjpYR:&[aM#sIY*SQKKf#qYT&g('!*F5*!2M->-a^S25L,Y8_WfFW\)/]6/]E!VHZsX-QoUU((gC<qBj+eQY4eOIn8`)
%;H*(<!tBtsm5Uh._ZgPbrJlSmNm]Vd8S59oo7>SRY<TG;eKoMp&YT)neK<`='Z6KaY.>$:*pss`gY:/*k.%dm6D^J0I^$,m[`2NO
%l'GY4/*I)!3q2[\$"@s'jTP5I.b#rh=XWQpiAH@G`>`caUo02G=^:Eu=t:0o?8C^J1P0SbMk"6B+ragCVq*(42dm59!hJ+NI]B'c
%V.J-IRL@gR=@mNYrZqR=oGk5==`fne1^iX29:@^Co>>o4Hc5%)H((S;:U@tdfIp%,,k%=*Tpkg=`?^7WD"SZ$JT_G?d\KR.L0@"B
%f%X[M8%_=XHDeU214'7]GJL_$O`P7tLYLc-FH9,aBQ^)-_T*Ck7?ul`Ls;*Ya4%+,01mMP$j9J0<G?1/'g?0Hn!5G12Sb-moGsqp
%(KPme00pl*F<i&g)ecV&K(cGGBkWI89'"pLU<7[W"VH*\#cbopYt$O;m%E?jbogcBZLg"B'r5c1"AHDCib!ohaDOGV;Ig]6K-kO-
%,nfAfcm>e/S4B$T%7VG`8K<ZH2LO<VCoT#mGjnXpLmd%RP&i<W=g5a;!#<^MP3T!+i8kb'SdrY8!__Qc'H&i\P7tU,VQU]D>1#fH
%&VrWR8Z%Y1V,:$4?VoK*RD>VAo_`\PK:ATpXE;:a)Tl]T:g;SBKSZ<O>/Kb8/YjHOHrN)</eFr%d,nDsRNn@MIHs>h.\JIs1d_^#
%)&f?G.hmUmM'l_5NlW68QZhK^h<DhIqYD5+)lSc>3`jfL::.m"Gd>@r9k**0qu^XKMfDTt>g;BMMGblT7A1@R)Tnq<'+HmQ$-8OD
%+0%fM@K#pqFYqdX/4$C@Zl#kdV6RH2*qR^G682_+o7DKIif2VJ!Wa]j9$1.S(T>F3=h0j2CSiON\L31tY>mu?ZDs_AR23d)c]Th_
%-(-\JD(8l=T:]_qjT\h7[oQ50IK"5Kp9.2WGrO%qSt@oOYiaelRLsei-GfXmDO2"7pb6p'LJ.F>_q]&hmDB>r46Gp'W#2o8]YJfM
%6'?`SGo,KmD1<"##^,l;ZNfsN2$eHp%6F:&LK(@^8uT*&E^\!IL3>hG0]ZF)E5.]O^h:(*E+<o,CpsBFVFe3on,,KUG&Arc]T-!E
%(VTaUgb20c[C2<fZ_CSpW=<Y6JFOisc'4i1\I8"%YU6"OYHF^EC"+XAKr01*`X,8>TRB0>N)e!"6r0g+1P1ji<ca9M+%/X'[\f<4
%fj/P7Jr]A3oE7^_1uf>F$t?/W2r%HhduB")<Cr6Z"[7'2086jUkUUPgLL#(=1oIooH-fmRg3]b@W#&nmGSX&3ijZLm74PP8_!!GH
%WZ%tT:>_W=gH>BId;5]>V;da7FQP*2OJaXh,_RU2-/fTOG1RET68(OY"nM"BlEojC76hP.9Eu6QF/N'SBc@Ac`0qX`m&8?G*[P>\
%'.m(;*5kAmC8_9I_2t"n4p%(:m"#S_1i%30oW0T[,\%OV>qWcl*`I4J$D)kK]b6Gc,RXk,qd)E[3^tel=d7.-;2CT]3YYP1T``$L
%@9MfYnqd39cr@G*QBO9tI$QWFb.#&JA%[*Pr/pP+DZra2GSUfG=[_,@7mZ1qFs4&2gWWl2mcEnm9])lWGdRX_bjZOoh8Ief<a_^k
%j=L,<bo"Fn`:5[q9(MCUUj>@!KscMs&fpYq;J\tp3J<e]0pKDVB<uancb*,@Rl9=BK_Zhi>07aUW9$PAV$MHE;ctZu\`mdnA@#uU
%B=]%!/L.k'nEG$M9"eH;TW2S#3_Xf3PCsN\&7\o=p0jb*oICoN+g,/YdMN^B&']4kN^RNs#Bc6Lf>iNVq1<cqqF_O#P(=m(Y=3XU
%Q_p0e`JAQUUKI@CKMY(.HJ0XjSJO7WJObpb>$d<%R@pb6&8;3qB]#78<0ciP&Aasi/u;P#,YZA<9c'K@7DII?*h`hNoeQ0^(r.UE
%YDf)TmGD%uX$bL7Q(&3bG:biDBglf5<stV7BO?\HeICqHUXgi_\ICopc0(I#AN4b.^rgaYajs0FFf]^KD>D2[dqDuq?o"cn..bur
%j=!K!P?mQ&QR>udqAFD$H<;IjTLi&Gmt-oVj/%9D_Z*0C7\s%3JNL-u\rP5dY.-GHKJH0O)qs.K4'#lLV+qbJ)1?ld6fYSbdAFM\
%+^FL<#XV)Pd_[el%\+VRhq`7cORJ5TD4mVdE0hU#7mkF(F1ekp&^\n,&,"DXI)siF=_"kiJ<\*NM^LrP[ZnU3pA7R5]^pJ)BUA!^
%gLZqgY>p)l@U66b,k%g!9a7!Pipq)g0Wp[-i+pC^?61b$/O"Fa%\j4N,_Y8p+SMhBI#5n!l+3A2<6A*ADP]j'a;KOT4cHJT0f63O
%NW)aBeF)q-cmIp0b4ZU/4jb//G70$Z$('N=84&.8i*E+bbUd`JR5sO(mOlV\@uFAd_)CTT3/A6M72AHQ">JO:Kcas-MBHardsMu^
%'>oYB)DOkcHX1tc&5:D%_hqOo7IsN4RKV^bBT=r5"Q;d0B@?)An:op.MY>`Jp%,:OWD[lcH0N(.k%N'd#uq"F&s>^k1']^?&'F%8
%;QBg32tdS8T7jApNVc($Ec)X'9)ceCpn0MV)%Vo#0@me93&Oo&N09![f-<SP5rIWg,sJC&=+^?5Ncp6"G5!;-!RS?O'SYCj(gr&O
%<;s,eKNA]Xh5E*reXolQCj2phaQGKQN2/Z;<f]afkr5Y8+rUOUBgopT4MHA,"Om$-ILURKb7Qt?A?E+a2JprqVf)NK6j??WJ5>L=
%+;"!B$2n"!o59h:gLgCZSm3e%Jm=qY>n@LefZF7KPq;P-KdMiK\U#)DU#?->U+ct3AJR+g-tp!6.aA6lQj':;O$NLhBPN1!<5^Z9
%c<J1:mc'di!9SA2+G)G%MsgE6hD1U6/]1aKAW7PLH5KEFA+:K*?Y3&(b1C^JC06LH(*!TKKgJtXh5:#t.r?d<i-7fg`_Iq12ik2?
%8&Ccp]CrAQVn"u?5+>%VJ:V7NX^+J>)n.MK5#WZ*n1;cj1fC;J4m`qlWNlH5gfm_I;Y+@%=3r=s,%1ZXD258-2!IR^S'2-[gd_H8
%fm&F(83FlNXDT_sZs`-rbYp0;4tJCoQPrbSM@TXh%Q2akR^!&\%j2*lEouO;9'8*7RODZF6^odb.]o\3?0m)eopTT(&dq!o#\<-u
%<_"of'1cJISX!'(S9cM9Hms_`aI!GE*['BRDCMTJYAOU:'ZFM3(EgJm;%"e4A@d-a<**@&R,#LG8n2Cb@>Il:_DXA&"K?q)<65E#
%0WAlC>_L@oUc1UP:kPK/]s26f'u"Y91TIe2TA%3TB8`ma%5c'ZcT+\0i<k=V">t-cZ]MV18R`$nW;s0OPH"V[85i6)khT1q#tBo8
%ns9K$,3(6Ro^&87m/Z`u?V'Vr4%7E,.R>1?9M-\"!h$'l^erZFcYUN!,Z7Qq+bWE^]><riS-rBl_/X%,q7sPM0HEFs:K:P`B\kFP
%]]U5<`'h#_b5M>&)9"[+iNDg"V*m`l5l(V61o&!`XY_R(.kLbn)/7.q-H+tB%9H'cOgh7Y?CKOnGER^&?>0]4\4l`D:l*FIFA^k"
%;Ab4ZJBUsbX!cBELo+ndq`aPUac)>I%#P3fjFaDEM#R=GL2[].<-$\d<l8T*Do+.;NLOJI'Li9=!mu)=>nflrn[0(WM[eK@g-/Pj
%_(dhV8dH#([44/t7bJ8K:5en5^-aX=,BK-m!^oDTaYn^6qh]ugJXUT,a3f`5PpHu(9>ZW*L;;^7$6IT>[F(-@o<8QC_JMMRhI2%.
%KWIB7nRDj$)E'!QM]MaN1bg+j0E[lUfi'_De7R<GXlkeh!'d^?dJ7Kp;RY9Gk[PHIqpRaY<8Xka):=\=^B_\6[d->dbAt7N*NH$%
%LEC]FfmT)uJ-k%JLo,Jf1u-Rt&'74n5ddUPW$Z[D#pdc;>AH_rQB_L*]%;*s.aFHl&ir<p=ng!^V;V6uY1UOL"2'0C<*8gnYYMV"
%<7plE^g=_L:g<YZcu-i!:u6A2iGR3$0<ff"Gc,$>eFl*;'#%:Qh'8;`P99(rD\-a/ajtkG;UqjcMgd<:%e$h/S_dsIC7>,Y25t/\
%X^n/F_ZVMj0(3nP9MhkCr,t%j`7U)[qEe.7&[0P:P@E-?'ED%JNgECA@XUZGbpX@Gdi+[V1a&p.K1[?95rolR0a^O'%^I(\d)9_9
%9.cCILZmHW%-_P\N;,d3;VT(M'E5(Ih"(&)?a>l8E>ML4JmX/3LH;%G=PYOnWL>NKNYb:laTU#4]B*36Y^Ih8b=ab]dd^3qi[f,F
%1V94\-(>I3mMJso\Q"DWbkmK>Be#f]i<Ym%X1>3F]S$X^,M>X6U7D9(&:_%2MPYW`K9.FA83\L#>'C)Xj>QJZcl$tBp:##<Ce)>k
%D.,VL*MGr?Foi*!T2.O:]sO7X07aa^g@)-'cW*ot;A;?`nM?ee2'X?QN#JcI0s`uCl'$:9%sDBEI\M3]]0.%D-q]ealk/\D^#O@O
%1%;:Qqu6*iJj`MF8_R&^/?*H(12>7#OX-U);Jo?*eLWg1Z&!//UJFq=)Eo^+C?ks,WMR_,X2V^9M@Y?0P3rcm?1,U433tOsL&.El
%7phn^O/kaJpY$uhMp`kNgkV<gScS\e*_$O6Y<OQo+j0o^TXSr1$e!PN8ZP_6Yu6mRRZ^DY$V9&_klQI(^j15"Z#3G1LPs-\oD;"b
%#r"Y4/Xr^A!cV2kP2\!-d8'-;=Xh?*;oV1c[9-.G"em>qLKu:+N0Yd4p^1/>]t^4H-K>mRN>YApYH$0W^Erp,hZB4@JEo\6^Kt"2
%%#*N1q%R7aiOBi:HVsbqjU&,ak5s9A]+h*$Bbu`p=0jM>kMoaNP5)I;`TY%i/ZC-:ih=;Z$E/sdm\3m^iOm>KB.9]:/^4QPKd9[%
%)<uk([mQD446J2jL_mmnBn8uh!9Pj@c](feJ7G,_C%7DiAF,P&:8!8c/]W/TXTRGCdTtFq%W1;-*'YcP3M]k=hhR:8@7B"B[_pE7
%<9W,D%6#eW1)MSUi\5@6jQe[S<jg6r<W'W<ek:Z.4i;#=X%=Pb^-Lg9?=mY-Hf!`9f_Z3R-*6j9!CM"+R?>4`@Hj`dA7HeCSAlk6
%"]VR<lT.U<q1nSZqoJM(*Q(j6Q\;6lFd=B1&(tb^AW8`cAu]V-R;o;DT+10Eohq;-OVb1,NH33XMQ6(+a`>:*;XLC>:9La<!0e@[
%cUa1)#RA3uAZKF-^5Ks<\*Rt9qNk2%OM"^\-gq#=njGC#"X?<[2.YG?)O@/jar*5J]\8-J-#lO,O-0r`4(4nU,oF3tQW(15ahXH2
%mHe4-A(^%@Vk)G1%KXtMO^s=KM/[,Z;9^;rbe%1BII&96'IRC@_q^tW*c1i+ph'$#8%bbllZPS8'&#e[;dpA>6"5S[N$63I=sUbn
%@(@pj*T4T!+>52;c\NgFP-u/,cnl^kCko/B8]C)ckqM80jkG$X?M8c<=n+YWCZP:(T[94n_-@"$8Q5>`;,DEGP%ih@<a;h&OU+ft
%$.;[n@f#YM2`B*0Ej*q25*c("6q#;L25X[GZEX7.iVCQ3VeWrA+[rA_K`)^VS^QJX2,mAlqkZch]V;pp3dug\(<M19.\_p[Xmj-b
%.qqHD*6An;Id4/K^b*]%Q$(7YKP?>/1ek,k0:"7DBrf=J)qV7EfoU=q.;ORcoe<3R)aImKWtTN6oseb4!hV#N8LP(Q<rl*&P.+.k
%'V23"oDSXF+oQYiql`*!$2k(bO&6_\_PTWB8BVqT#GTAcN5QXXHW4iL,F<tIP*e\'l>7'O^22<8cH(>CV!im1cbTP_9Amk1-J4.[
%IspBL65NM^q"c\Z+S1n!4gFZ$!rnmDoedrqF,#jP0,1!Q2Te9L]LuEE$VnH</&k)2VmarB#qRr7U.TZQC@mS"e9Nq=WdM1Jn=Z0f
%bbGolklE@/a\ZJ-kO<";"m0W\d'cmi-&4g$lY-TqOgg(2L779(r#/d)gU@U903Y#&csEJ8d6FC_`@K'4=aec(7&C+f(mhA`COnTS
%YSYbj0We#V"l^u0T$M^sX2D>0r;4/IQr5!1a<MfJ\4RgEae:p>Qr:^]OTmSPasH1')d._)cY=Rs/JqMnHe@KTX9Rk[8[N&>Vf'bi
%MfID6W2HI$%mm>#-ciQuHmjn.,q8HG*$COb+1'-lMQttGdZSIEi-_ff2"M/r'RlY.@[`LC0a@44.Q02m0$!j`?CDN*Z)1$Vi5W)R
%b/5F(I$tr,QF7Oa/L7t.)W=rKHSd3Qn.Yr7BRbo$Nc9(/WK\*>+@n57hcUSfXeQr'N:_b.r?YZ*qY<?!Tn3$/9AAsCY]8rK"A2dR
%Q#//n))W33_d&MC$8L9MrX#IR"TUVTiD]:$DZkD-j&:0TD+/eGCTkYSE+^YpiWa?!BZR'iJ53_DMk%(uQ#)<'p#(U;2r+.Sh-5I\
%BjC=W3qIKV&'MgO=3WPO524u@YCDa>Q@gRa=r#@2o[ndE+2H)Am+I"]+-=tnkh<jb+&L`6i7g\T+(4.^k1iJ)43Lsfi9_,#2]Z5l
%@3)j.k-2G0Q09f&Dg?9E*o3!j"%9;"!S?r@]qYV!W*\]GKc'f?GW7k"A+k!iHcNU:bW?EQ_t2ajJcuMYg#8MWLZ?H;\_JFtE#e^E
%VgHK+:?;BCp<In1*3^0lF0%MWp5-6F0t]XrpjQi..s6k2mhe0XR/>k-*Q$*IrOF+Y&bR0h5D*l-89a'=]-iB3lg]7+iig62p6`cG
%d]ptkp3=ecian%aajIb3m[n'>>FOb'PYUYC95kd.*gQXg481/g/sY6?]mKBrLIH^NgO%FtO2?BSq`DXpSq)@;K6A]m*js^1@=R^"
%(FdH'j3Ab;BLW4nP/CRG-r)rD8gQNr'5Yo9VetcYR#g':[rq'r\PF5cYC5gsg5fNb[tX9/qbP95(Im<a%M%\*(WtZg*ZTjO'B%J!
%oP1E6o-:*o*Ve5CCLBYE/Gu0K0KlM2Mb6)t(d5O,Mi9d8-lp7&O3B`%3'GK`#7`lu8R9iF#>[KK=^Bg`LQFZ,UO42L$b8=WZWo2N
%$iBKK@YURC;_W,aHUQ.LhVf7lN8qpNm?eCp*HHap\@<1WT5oIf=O,O%1a=b*`e,@s-C5l(k07.te9L-U)eON]S:03"`^WaFBP[pn
%RnJe589>*NSO^rZ)12[lT1]Rak^u(Hct+Kj`'p$OkYWLI`oM\Tl-V1J]&nk&l#8n3U8Z*E4OOO[g7cP`<0:jl2d'//@7#6uW<9WP
%@psY!XTPiOiIH2YYqrLuB;"W[[0*8M+hr:B\HADJA)84CH98=r8-.JE@L#r%6U:7!C+cFOYP%$!gdbQY%SbBH;]_<m/kOM8EuoRu
%/k+9bP5:tQO.PXa=:^?lNu[JIBRRIoa3-WmGFt[,T-!:F8.UYXO.>Ku=?XC!NhdQi?93oUe>ls^clZ)&k$nVor!D,!!&S'_pl?*@
%`eEOL(`jL_j$SHH#g5HK]=>p!%n5M%DHq#'!QX6+(4:SK#qk@*bBs`P!O$[^[^deG(Gb15lT?HL!U=gCKt.Jp'AUgPVR\+`'BIDL
%_0C?q")-nK0QNgW-eOTCE8#k>5%r(@=Lgu("('%R(\ob\'5#>k34Vka'5kr=7![:]'@4fKA\%Fb(\Zm!KR>W($$t[lP[$V?"+PVB
%bV/Id_4j&fXGa&@!H9'\Xp=4IdD,O"7N6_f*-onGfj,T+MqI_8bs)'Y_b$ISeNNufKk`]ZDYo//lm'0P#7PVb6moL,MbS4h9F&M"
%MiMgt<'D_O7hGJuUD#?'75;>t-O1W6T4(N[S.YBV8=^"!o:T\#=IKV*4.tD7BUfU-EtEP#6cQ[U\g-aBA%A]?p9="E6*kq16C3LQ
%!$&W/A.QZG!hL3QC`\=I<gN6B@BW6'92:(PD<X]Xp+7saAZca]>mrWm<VTK%F!/auXcP>/m6T32MCV;d:5+k"N>\S`SF)u%Z$&Qq
%S5"5!$!U@8(L'\`g,l5h3^Sjui8[BJdZK[aj<bmY8rF=0*D9c4d[/$;aCu^&2gqOJK<FB/"k;-44Xc71oLOD4l%=Ap,I;hqAG<Ic
%*JO6c%/Pr?C8sjQ8>\1EVEFN5(a5B2>55I"(DZOR<S/&0DA?:>_oN*-*CQONl]2Qr'P#=,r*A^=MLo>Vm:gFe42OA7UC]T]nh^t5
%Dh"3VM=/7uX,Yq]=Et,<q6b%-rqKNoF7Xh@LUCglh",GCKpY)k97BFRG`":)E>hWnAeVdr"[u\`&Po1_+D9[_T=>4W]9p_c+=)8J
%rRh`*kEsQc.=Fe3'`4cPM5Kc5l.Lb6TpX$qWM[H^^t(F[/E'61:rh$ieba\q20#WY$+Y0BH>iObhZs?[MuUQ"F(r$m\[HQdT`;5X
%!kY^qb_V3J2XNhc$Ndq[iSNGQ:d1$O5*@o=2YZ)j^+gjVXdqJh836#NZe!h\*t^<k@uN,]nRMW5Nd6.#<Ko<VDi8P?oVQ7*3grG3
%(,M.IkO:Z-,M4ch0AMufol$H7Bk1bnI5->[<g\'(@I)ulSLj1q6.^t\>#ATZheR=_N?%FS3S9/s4#(3J>AP"6XUt%i1YKl#3uR0L
%9Fu8ZpUJMSa"lTa&a*`Jh#qMslh7"@2i@noAk$#\/cE-#?UZGOb_5QSBo\mgpO/;m8L.fCO.#I+o0ZkE)Pfi[fLZj*EFUAKm,X>#
%Y]=FNPYE`f2Z]-[2Rl>MCsJ&3Z*!5c*+NL&rUl-K'KV[Bd6s1AO"]:>EuPJtoCPJsANd`]D3\@a-f0hcB5Tl8`5[5dqi$VB0`;AL
%m#2T'OZrIU+hNGqITB'C2#rse2N'A(M7?sp%lV;]9PR_>D8q4G-)oR\<?@'$[@<7Sq(5Mad9nPRcUf9CO,shcfD-kiUKYj^`R"&k
%,MTq+"P\-qjsB\iJ=N\mVIkBl*]HL1NoOGs-iLuGpW,85(_PSBJ_%mncL$FMCK-gYqj&h3(s9li1+n"`&oSIsn;D.4S_mE3[YIJ0
%9XUg\WjYUL?Tc`Ee`5$S]7#-4PP;SaU=T,]+.`#T$8)2jVE"Z3Wll^&%3d4->=^#/:n2#dU_)4TV9!C_C/%2rU<A@le?3`Yf4Dg2
%d3GC()d*.Crt#IX/Ab[XNPpdW/^MJWg(a0V4n26J:+o/2[%simr(0AX8n+,rl`j`&#9q<3,J+T$-ZA[(]8<fMn_C-Z+T+:FrRhCr
%35&X_Aars&_.OnW):7c,>LYbP-;DN1OYGmGbZE@pp`d<O@a#bn/Z)Cq9"697A3_fcM=d26>d(>O2u8FH(MKi05f#i0L^U??9%/SZ
%]F!r?1qu/Nh@D-pQ[H^V2:ZZuc4PZY'"0!`Te(TiotGsqa"]X7oF2"aCgEu5C^'Pl/qQ-<IR^*kUVN;ZrT-MTPR>ah3t,QH,K^El
%4X(oj<(Sr&4sOReim1Xto83p!U(^jN(Rh5I5?]84TL5o?cF<kSia[7H@]ZGPDWJhW25%$)T3tgJA"uQ;[hXil>Q=o2b&_B?oS,-r
%$IUc;MatXHis_>ci%rd5WCf2DPmoI:n]V"+BF)-5^oY_X.;RGR8B>S9lOpV=WhH5=74L199Z;E2obsmk5bnM^#UAMkH/Vg^4jtY/
%G$X:.Z"gdBp=qh>%@Km:a/N)$)t#_*[i*MA,TUZ.Cq7#KC[,SA,=N\E28D@i(OEk7G8ok+kVYg2k$?,Fj-L+g=k7Pi[Qf@1C9/C3
%f>``rGi,Wf:tctEL_hQi5u`YN9u?VFmHh))L0J5!W9nWnOVVN&N,dk>n/UVmp1NpZ<NSk[[,<^[\f:*Ck=UKo1u<sIVnNtTrbAuC
%pS^+?gfnbODt0:@MJt(Y[E.-LFR.M]E46YMSlom5k>!iQG."`[(GO.oiDt'MPO(57.8.0J?j#0[78qCdWGdXf",`Db;?Il&bB0D6
%r2NHk7KM&'eP9&HlNi1;fH(asUC(ut8H/^KLhJ-n8o:/I1[5RFL05;aJ&]'PXqPK7/J.e_[U=3Qg3N`T+u[aC9gY=njD#?DFR5D-
%m&Ht^K).Yu,g:j`@o^EQVK:)TP821,pDkUpRDYrYq6=S?%j-/QH%:UTY^XRe+7#rh2B6Xgb`s)LAin!bSAf&+cTG^_13RX8<((1/
%*eDGJ"aQ@0ds`ekAV=([X^m_4-QMgQ#G,A$XNu.@Krp7=pDF=mJD%IaleJQT>kgtP>+H%M3pY+P?),J.V=V<a^1dloL_o*p@sbr#
%hu2B5Ks@.0M-UBbJI'^c8.;pKEH_k5US!f1e^U@09)7s=C^C#_7dr$6In'*h"Mj++-De68*acI"6K`^C24]:EX#DPEB0U:R7)/$Y
%$6EgbLnT"$;EYUIhujWVT%>YBP4kQYOm[@.`7]:a6MD^=)'sOHRN_L0U#^=5&j1qs?IMMLqetmCIJq3j)&#]%U-^Ocf+YTX?9`GE
%As/?%m(h`'!IR_eR+5$SjXubDgUBb0926ORN4r&h6*nllO2J?<0i38?0.+t@!/KUgkmt"CYR/mUpCA[(h*DjLo6j`\mSgTdS_ZPg
%\/UKA8uW4I+\u<ZqRX]lTmA6g)X66N8sZ1":Im\M,%d:U[.<NV8tR!"8Q>Y;H>YmT72IIcg_'e8)QdF%ro<>C4Ka8$)8n:Gms4*f
%R@Np;>D,/4P'`4%U,K6UN@`Z@,j,79]pEH6LJm&Wm\P998X`<7DHWUG4<?j)>$MUtW%j-;geC\6fVD(\HT;_^nb5qs]lZ=^<g+Xe
%Q#FQlC2l6CY#'Of\,H!k+N.V@i717Rhoe3m!6>:8MjVYA?dC-;&^T.Wc\.+4BTa+$aPTuKhHJn"kP^:;(kFlBGT8$i.1mQkdW?n8
%3R=3^2#s*D:%%i0<#4OgV$Jb5DNDp#=o?A!S84&G6Qm1oE&c)U%^#d9R9ND\;$lP<PS<pCYe;8g@!I+O4`c2FiqNuuD%7m`;UJon
%3WpfOGWoTEo6'SGX53rMj;:)a=B?04AJuH-NidopS,@hSApL#mPu(aLS6%KO6HlNX[A'c,,3ZADcj*9"3FLVEhNLV^QuunUO*bG^
%VVn'5Yen:>lLiTXCaGsq-Uu#rRR^^1%T@XiaGk]tI]!RS^5B3/R,m^t@AP"elUW9LW,o=8@/FQo@00cMpI*\Z;d'4<&b&5E>[FV;
%"&eP2gQ%>dWN(9T1J/]m+\O:JCkp:]31$'^qGg\?M4ga0R5H,'R?0+3"bBl\R=J,_WA4'tElSR49XGWCjr$4h9hkta0,^q(UVLO<
%PD=C96B%o/ZhKkiCj\rJ9LO(4]i9[XOf/rkDJ/G.(VYZVP5dS<_#A)'g:#mj5sb<MqZmEkbj^Jdh$Vf:+8[Y4XPcYt'DKILfRe8G
%CaJ#`7nANN=>PoFqe*;AqYf"UW7\6-mUO0C`9+PD9<rP4;;`8VEJ2BB=TP.lqe**#m<:A0H_tmCo.rD$9.+$!kqgh)Cft4q[3Dt=
%<<$f2+6R8\]-nnc89"ApTMrZcZBp8]3H0TSKG&\\<n9"=j`%G,XWrcLkipQ'mVJAe"K/Q=1C2o;2L7cBh&g5CL#S!*%:gZ?9PtuA
%&H(ZbJQGTDqKN5m2>=#ME[)Pe_^!4bH4!,<$*%G3L&cRB]YL:K^Kf;\`L;>VajtWtHJh!N?LT)u.l,X,NjiF$g=>@X#RXV0itV'U
%!Q,n6ZCOF^+<gsa\nU#p\2V49lWN89PsZOdE=`W#UX8:rJl`1gr\EO,'.)&J%=r6?3KClmDL+KsGJN)^S;ph`\@%K[q93qk?KZIK
%V^E`">.NF9L"bbA8h?eiH#3S9@[C(`@59@e5(H3p?jbX>ShU6f33<U9)bfWE/J-K$[*:$C7M.mZc4nrP4Cn@r;Yi:f#EDncLed^7
%g\c@20*Ut:@et5)>NZT(q%=Dke;a_'=/S5f5p2l%8g0X)W2)ar?G.WPJq=8uVCu=5_inoWeM]B0g..c"`R0qoX;7MN(k^=:Zn++1
%9/UUJ@(f"PJuh=O<]SbG/W6q%6,f9i.H%.trkT1,K1r+L7fppd&sdN<1\fTkTG-t_LblB00rL-:.a9Us<]KALMOYHno1dJVQK#0M
%!s<_+H493&;?IIJmh26F-CRPXb0P5G(I]NXRCa2TXX1oj^p=ajCpk$NM71/5'oQVr\(NiqqM'uiHKO[Zg*h4p^f7aF_;\dR!fhP<
%1h;>U\<_,N=-C^"#C'K+^?\#cUKrdD#ZNP=)82\Ea8)njX4SbF6R`7sn\)`-bYaV@>/_sC+J4Qm*SkR_K^Z^Wg7akOY=LN=i2X0Q
%+$Y43p;Hlb#&ZApX0OIq=14m44`%@QA_N2%QdW)ZnlB=':bY*_Qrd^W<->EuH,:e8933`uQVdG]nfO0cSf4bF3,K4-l9U![':f`u
%:'*LYiDl!mBL=5[-DF:Q*Xs(!K\#g@Yt*"Xh<MD&ERlU&o?^BnhAK32n#-EWLC-8,[IW]p;Ha:UOJ8h_Bg-5fY;bDgVfGOl/3[tQ
%N#.>%FaY`J7YaCr^1d@[;F`MOo$FH>n[C#_8b>u[O;77&(#&7:p3lkd*hjGH5-XK=KNL5XC"hZ3T\L\(Uho+J-MU^f?K6!VWi!NR
%9P:::Tm,!c*,e`/Ig]\\$83j'N"F0+H6-9U'f+f"Wh0#-$'2Y)6IE^kLeZ>s<H2*B-U]iua$Z:E#Ft5+1[Id<5^Kg)%&kI<<HVK;
%DddPU"2We5,:65$UGA]''-3]$Y^L$Gds0!7-`=:?jBGJ+acojOV8IKCJOcD86F+%T3@h1'9Vn,&OupNQAOblh,rT/,>NhT2\[52)
%/61q#!-:a\quDnAC#fTjXL@S5IKtZMZo8:e,/L$l:J1.l`HKVWVAWA)orRkD5oKA9!1nDnE[iJ?]uEAS0XVC@oB'?K6b\l6G,BNo
%76A60[<PU5bLGm3'+>>/._cBC?L4!:YosogVamH%I*B:N:[N.ZS9g$cmb=N7;.i%S.e8&Uqid-g3L7\SpU$!VAX2t)`EdoBMpcoL
%(BN8'qa9`91M"7DmRu<p38"2-@*[A&)/3UgRAXoJF)a.(LfbH=!]mF8EfJT4S\jTfhDaa`M8P;[A*q`LKDsY[OqWP7a?-0E[HmII
%aqrH%k#LhI\O(*Y+#@OWE&tt/W]T^lZq%5gOtm2<$^bh2lbqdm74Nsfr_FO;Y5!t[;B.j-KVW8j5Dm#\8)J)k%;p*)@:%0C0KVd*
%nnL@7TVZO<ie2V_)*U>Lc\3=mfYn/7pa0*)[R+\-<<qe;_h;.B))VY*UhUD#E?m5JeYu3#$!q$ZIVIU#0e373dsq]UWe>%\1n"sV
%TEq>koHBVF#uCY-!b+(5#3opl>p]-C7o,s&eCJs[A#f,tj9an^!0V9!r5]Z8*0B6\V=1fNe8_6=+A1CEbKESHR<h^jCH*8FK#0dG
%f$d+pXrM%YkK_K++p:+Zn@Ttj^]?o44k=/SKPkhaB*=8&SE):P@j!kd"'SBuqc,Y^`pGH0#DoU-F=keOc#Ajf1o_tAN)Ml=![`UG
%WieM(gnN$/:`(T)>AY0?B,;,XKt0Wsa,/^!1Mg\DLqqhe>S5^F-8t)>"'C/t_Zp!Y>c>TZZ"6c3D^sL0AB*BWcR9ndW=\^n]a7nG
%,>6,cSsqDo8N)Sni_"I[-#[k623J6%(912o=sU-.[,e-92&55A80s';ei50XR`.94h;kTgA8P8&!S'Z4D=ipqP*Ue#QF+\3d[cL8
%e2.cN<Ker\9W3meha?K6qV,dSZGRVEAtY+,Q/GSH15J#0k")hDdfD$Y!O=,?LFauOC;si+4%hg35kQEn(8CjuVQR4j&gJNn__r!a
%>,QkIMQBEbLI"R9OE4-+?90*[8F:br#bkYh/'\%;>>,Bg3\XlT)=_TtLdIt^S;M[+KHuDPNc.MDCk8:eJ4=(D]2k[`0%!5b:&8.K
%YB7'JrG:lDE'(`H]`VllS9iRla%7aT)@c<V346@"@qr$lB"D#f7N([ngaC`S;/e[mn](RVW[G.f#u6n3\e&QNMTjDPJ,+nQS()O.
%qUJLn!FYi`Wg"`+c?NV8&S$5'Bq?O^"jp^t-5'5+)r*g#O8__b;F0A*<@pE!L)as4n@Gnr&l]_;IsPIu`;%t@RS)K"p*t,cm4k1-
%WFCNAL;YJGd#8d)!.]#W_Q1'.'60HuPg9mZe(<8G=f41>_PCX.PrR<Y+5XHLX(fFGdj&IGms0AhMG?L?AgEf7lV0oh$6a&_F*C81
%;\uW`"U1ga9>!$WBq/q@JAW2P8Wd\c+WV=EVr2P.T(H=52?(6LF$%`-.%Xk+a!l#,hQJe,jg,1N)Ge]Q@WE&69HT;DC0oI,JZgK@
%81VZQ:oRJE`8[:[3kZeI1-Z1WEi[SW'Y/!,Zn+",Q7EBT1f@h8hlDa<d;SL5O3\e-Bf?5.>s5=\OoDb3>kW3(aS!CNL]P7ZKjZI[
%X^*im[B<-?[Y4j9js^u>8OYK(!2Hn,Z9!%eF:gJsHgjN?Nj^b-a$_#=ne,:()&#op:+FD0.MCdX=3TQi3GK3"2TaCgFR2Eq<HsUu
%SKiYQP0dh:1W\\4bdRT>Vbe)_-.[pj7!9dA;r_U#(rpTHm7RfVJ6a/WGR-g)&6r'#.;l0ThN`]5PM)^ZPE/X)^CZQYAe^(Yl#W;3
%JU2]8Wk5$l(&A)>nq=nndh&MUAD9]n,>C]?!b4N[4sdtE,!GHqaD&F:ffpWA&k0B0mtLWaK)!#uT>Vaq5l$S5;LR'd]BH2;/)J$r
%B%tRX9VST'."PrlT\].cY)%m^,VjYBG:l&Vp5?tM\Ms/E3[8m-Ga?]4k\X5\5(^MfZP6sq1Y]7dqOK0$?SFf%07;Ze=aB1N1O]S^
%G[h)gYcC3sX'$a'FB?'Y5i>Zq>G9D"N$DXgleBCS0%[,.T@G#8++I8UmX>3$^20t&F9-f]$dYs%eT/*6hsD&kUSo7oL\$^%'?3+:
%5IU-.hEO%kC7VO#d,($@]Y6NPr)p<bGjHkjca2`lk>"WrVQLD:F&kL9o[V(PJqQQHiStCaU-(f27FVEZ>id/d'<1qa:6dfZPjEF_
%DrckW&tYh'N?Ack8]%d&'VG,U)YU28RBSLl>rAiEFdN^%4O,KW0OTjoQhY.AESDcsX/=BqKThW_o7e%!"Z88nP3M70lhStokXlR$
%=$e'$[_9\!OGmLoF\;4-09#]VaC?Tlj[7tf;t(j9LA%[AFpaLR/c&a57d/uLKY'o-\t$i@C(^')1\pZGVnV3Cq;'+-aToBm/$^pC
%SjLG+JBu.sFM2D3KoCZ.U'.K&Ph9NP[8<)X_Q080hQP%lUsW'Tq)Z:IlWg?aW7.TlJ*XFEeT9N*C>c+-D,PZ'+$\YlW,SKoH'ETL
%dU]$_#R2j)5C:u.Xr%$!C3_#r;VG]K337uW'?Z/Oe,GL/Em1qBY<`b-QU$m<\t&]NWAc1jlbE\nFLD-NHr5u%M-':u<Hf&9.^h$]
%/m)Q!AjK%M!\)9&'?1b+#40JRE]3dn&]-et`RL%e">Pe:;JeQfYQuuAkQku)JiH9J0JPFm4!L1n\O+'^[YWMk-*bku.#f2+CJtlM
%\E5MQ"#-^'aco<u;6HnJ3JWM6KMift#Y0>(J\u+nDF\.TWZuZ7H!l*U*ZlEWVhe^a1jU\6e+[uKA1=\)3Z1$-^[/utU9j?dY"B3J
%)ej`M#o]_s4+9%d8krbK`5F3p*qCm=T3Xn>Jd<"/'gBsVKmJJAkV,XkLQnDl#9^fMb$@I%mugPpgS#4h8WB8b4=D2_hC8t[3K+C"
%'1a0@b"_P[PO#)FVlX44MX(_i[j?&Lbm2n2@A?(8[rg'SfkT15ZWt8nB#T=i6CMdIL&V%TNK5Dtrhhg#>S)V94`3CdhFG=UPHY=!
%Z_<;"$>Y<a#b3[5ACF`BEDTdO/tk`*:$XYcnIN>8?nE9f8lKgAW@lf%KuON%2;du;G*St7.Sg,hVWWD'*FDif!lX,*gUDYDNjc",
%fi:tFmM#B::>)K1@GDD8dOjgFSOmgEYOWK0r796bhdum<WUcf.,j')n4mL]JZC@9hU;up$iGTNk<Q">d$WTikQ_\,fC=3Ca-[ic!
%YuOdG+ap)2M\:XhNBhU1a)u^i.76ZimDS\??$:A*AAahXX_o_jri]\,A_(uh++(esU7Qb4*!^6V'K5XEg5@G/'/"^QQl9]4=$\Dt
%^;lhEnN`3'H&L#1\=.Sqpo'.*a!5kSPa2"d+?KF\Cp@PB9;!<\^J=`7"Y\T6MCc!2"f^M93M+upHg:3NYd--BIJdLlQIBIXZ=F]#
%.7Q5dB*a@$DL)<EP[,S0ECl>+:FR2Dh^2BPQY9NgMLV(feP(h"a%4<2pY3GFa%K\\'<PIE>9#.soH^c[RE3%A&YYM:baQU<qg&%&
%>]k#-f$[gso\ft<QMF?qK)ptsY/a$]VJ<64;6?I)U%:=h`0u?WQmHNA_u5M/0JYr(86mdP@nsBJZ,H9%aFDQ\H:O"qlroA5cEVC8
%!ZU!-#@8\qRWnX^75;G&DA1]#*[H.O5ZO>,oJ(:koU9fn"lCU,Sao13Sob?doJ)"f:(6A8dI.VI-*'rJY#j.u.FHITS<A5P,3nFn
%R*nK'dKG2^5_`g(5Ih.57VbE%iOF$DqB!Na2!/G`Vu@uG0Jr=H2J*@0)3d/bLr8<<s.qBP%M"2&V-QnE`ZCOR"3o:3HNlo3c0M.B
%RJQR6Zk.EEGA-Q-a"pptqU.IS9+n(%mGb2YY#1!$a8%b>qggbGCAh^4ApH<-l(FSY?[&;^o?&o#Hp>i_c<Q-Ad>Ket44E$W>sR!o
%FD]!0#P)pTPCJR)fl$a\`/OTe!#[`<;E`Mi?HaY;)#GmLbbR`*ok?b7R+WZS3_P]lQ$NI:#pV_&VYLL1$_(%qfH5W_lhn1f@![8>
%15[u13TQR"N[`bSA9J.07=$oB1WJjG%e!r.L1bi7`T=.mOE,t8p\=AT5ed[D%u(;Y39X!q,V'K`f7Hg5$rQj/P@1EXFbg)(26\'@
%@Gk\*+J3:ArY[O%V_'5EMArlk&@#3:_*9$b7O\DW\7q*9P>"o<"sCu,]qdohl*3nQY%i$,8>:k.=fh*BMQWb5Qk)"i32cJ9K"ZBZ
%,d/QSq\c+4![/iE8IB1N#%foB6A[S0#loajPG$\tgs8q23'4C_bCZMaS0oK=`@MI*[b'^(8Sr>q0p:kQquSg+L#!E`DWSUP5tSNP
%nOJVP#@-M2T(r<n#4SDq4;e<oHf/QEQHim+&"eY/J(%4u$[ih@eD]I/TRMI*G:7kAk$R'G/OdHP#o9TE7o1m-##BLuj9S8M=RdsO
%1W'ea%+jP23r_IFBQY1hMZ^^FE&%Vp@t6KGN/iV`37uOa+lpF,%Wo(p-Q+=rK01a4;%?0/0iq"uQGITEba6A*3@L<9S?2d+(<pH2
%DbH1^6e#9*h%HZ!0msQ-pV[=u32)$HHA&!p1HNnCU''Q4A[\jURW+n23ZmFSkfl+3OJ<49pdH""`8XgIRS3YeEj]l='mA.0D4c@6
%'mA12I6Ak.!EUkmeUh4raB8nW[=I$9Gh:r&/Ki]?LF5:^QY"g1Le7u^MnNAS[Ku&$i90+;74@Dp:(s0N!a-3.]%D8Hnmm71W"<2J
%%5u0b9o0@4,s##o!#qm4FJt;`WR<-b=f'`k$9eXWTbAOpLb,9P:fXTG8Qg'#3OSg\oUWVVW^&Wo(MgNOfMUZ=o)/3@2#L312uMY_
%&,FLQ^/!\)&DhV*l.B![U\<108PLh*2r:nWM6FpkmN4C%.7FE+:pZ$QO<4u13&<?o'_86'C??'G?5fUW7DD#J58:sF_E6HE&-88<
%G*lI?X#50r?PWTho(=:P[e4;Q6!+Wi'Nuf7W'(I_he'@bak_G%r#\f:+6>u&>1>r4dE5@H7a2:#UnWkcDaY/N?-43)`D4=O,Qc7f
%Ti8]oZZ0bZCj&aTO.tO2MEG(MkF=Z#HG!0])j$%8\iikU1nTA.LVuE;G5o6[F<fug*rhGp+&rWF,N88A(=Eml`Sr=inPI4"3hoH,
%?@UDG@&d'V\_O8.JZH8/A920;M4[EP(V->54'd/I'A64?ChgLu@elY;ddk_UPlq(JCm)MAIP[N_V+QOm##J>+VN'V:V_m5!'Z1TG
%hPAC=)6:*^+9@JIlV]W6;nGH(8u>+@'%V?:b=iG$c^pB!q_W?S7"j(!3S4L#jTICb2jKGk(6Qq1-BX]V<C6PR^Mr7,<[kt22%8XM
%ZIL?%4U*BPE#ga@g<S_gS:]hi<femDn$53_"_c*\bUaHFKj->E2[b=DiT<8DcGK+;fKDWLA")A\DZV&T)-iF6CG+o*FU`^M5Tgnj
%9@l$plq#ca]BtaJC]T7cGdM?CIf$`H;Rn(c$;tL3fS-b;Q$s&:`U5[>gI-4s/KT[sFS6TU?AO)XmQI`hKkX-5hY"2%mCVAdIsu=D
%IoZ>ob]2:=&39r^[PO8^Q/prpfaF)<fm;03d=/Nu8+8Q)FR"VJOgokK;R?btePFb>Td*mF3/`(;^KR<lVrMZk^(fM3="@75)"dH0
%7;FQK-/Yifm'dgI]33PK53hMfR(4RIe#W!]Net?`X*+3)nOIJHp42I6lKp<>3+K^OoEhf3%6K?c1r.A$9=O?H*Ye<Eq>D%Rh9[N6
%bte9@Wj2W4/.aKN0&qL?*e_GuD__*Ze3m.SiSgZ6"NB!,8$GqmLq\XZ5YW>Sr)s3(KhLdDe/%]1'-EN4?c+-/U;A',(*F&+B1p_-
%7$%L[Wo;acC)6/GpuU*'"Kma.GP:5;F*":f%28t[9/U>I=aQfG.aiAeC8^@(1T>EpBQW@7^'^>Wh9JDu0*Ag#+Cc3cP(NJM<K@I7
%kVEIkr6(O$QlE.*e5S2'YPt&u='lnBfLgD;f.[lOLNN6:oEg8/Wqjop1^s!4!^!eJgATJ=i'koP@:st)WqRUcTXO64oZT/Em/ZNp
%ZR71p4?@L$3`XV'-)YUNo(+oWDg1m3@f3:3IWc1mm4%*<2_..YEnilP,<(d[(FreEGiPEt'Pm:,8<=*_PD\TPlN:3(6@KDrk-/SA
%fCo*pWS2K=?oO<UaQJ*'eo40gg4gOfR7+Sn=d3I=T9;7`RPE]Bia57^>e`X^)'fr!ccT$Ejn*aXlj[)+204*XIgoq$/_@j&B*Y,G
%7[q,p;ViJ=1?i/Y0)J"&L\J6-XqP6t>B^iq>X'!!T0rYJZY>=sC7c^F\CoX?5bM_eSeVa7bUM!I*oK#Y\Pks&OZ,!;/S<+\N-807
%:d(HB=4<-)C\<@O_pNgP^<-2TKtF[_d5]L.X,W^MJ^-93h#`RKJU7mb\%i%`e=Zm[/oZUVZKRs@%Sl2LG7L=U!qSG-T7I5"J:uk+
%1`hN?WrWIho_nDZYk#.h!cX=p3DFTd(W<E#L_\(5k"r">dWT&hgQ_P?"*>!<f7SN86J0/3/aR_9:c<!!$[Z2hU_ePr"24^6i3Y)7
%q[*7.^r.7fg`auq8DW7X/aRldOFJJ=%G]eAo,WSC@JuP"J1#ub0b$5oiQ5DN1)rCi_JpnB[phY@0SBnUlZc;moPMX2F^3W(mInZK
%F\LX<l.=:7%>f<q2dS2%%>!20SK06WadufMXZ\&dEOQ`@mfsm25o<r?b8giDERbl4p'1WTd,^OHHH3]X'Re$_GDq$L%'\(i0PU\b
%Q,)]%4G437*l:f9_5StF227B8K@>'i8jP!r,OXh0:4m")=(.@GMuq!c/Apaf4S1QJ;B9)o_h`dnA3uf\Lf5Ab)C8/'`2T=jiMbXG
%MKAs'3dg6#$>WMF%UJCO\.5i\Z+V1_C]M?W=1j&+>I<r&ea*:_(+X5EeJ<Q"E7u)R]mtPnPdj)E07`3qU@+-0*q\minJ4X`+nlJ;
%Dc-EB=)/th%][--of<)W_$N=<`O?9M8pmgAp5pPg9R;hC]DUIGnV`Xh<!QYC_'d)XB=>AD+q8`6]?BQ57=a+p`J9b&LTc0Ve\^ZF
%E3<1'X*UWCkR*$XVYFG'pIUAW?JG!`/DnIp@k<b^ctt<g8+iZ>%nTcX'k->mCiU4<_j.NlWYPER&@ELOCW66m1pJF!b]BF>?-:Tq
%((;`aeoIRh-i5DRRs1$$1_^?=c`m*_bKdB_*,!U&q_!!Ch_h_$=o*qY0l7'BD-/VA>RSGl3YkF%=!M^mPXX9E<+oM_`tj(U[c7gK
%'9%nu>0!Ca('#J4'f)/N`?^W0ck8:mA2sn6Nde>K,4-pQ2g4aPST6I*dSIMtK/)2dPNQ0b2a:k.E+B!4EaUAP]2J[u!C[CaX21kt
%BU_N.3P_-geh&S##-I&SI:cm/F0pcCJ[1Z.@Rk,r#B&83S7[AN*V?n0$0oNc\hTt/NmM:qO;gm#)!/(()*0IGJLt1qDf.8UTB;&Z
%,"<TYF9+]cGZBN7oa"YY&`l28`K"$iF'.51QGmO(`N[e2A5eoP&Ce\'eAYZm2hKS>C44ABH4D'<K8LG^I9)/1#Q0!ZK`>qOTM^Q4
%MRF1_J'-%io]`KB]p$,'lM++Fh[/^([/$8O^JXl8bQY3q"Pfr,j\u:?^q^C?YVQmHp]NBa_5Z`RK_UO7^R+Y<6NGoG!'=7IId9#-
%ihu$%*eQ*#5`E\G$pS:_0oKNr[DU;aE+;/g^^rG.`!mi/K1aoi'0#d+:J#O.<SZLI4/'WQE\S57m(<in)T7UHn\[iO=;!R,`(iA@
%J;EBuJY-Q/j$&jGbqJR=%a70@5<$DS=Er,#E&/H!iuO_T+Pam@5?l!!TeOqF(5"3o$k,'F@kh$%:#KuS3o$505LA@DojKQr_G-1I
%""3GKMQr%.ML3)9L]@/CYQ+1Z?iBCWs8#g3q+q#irp@1Er9qDtiST._q>G^YIe2HGpqr0mr::I!o7-`6o<3Z:LHkh.IsueBiK&Kd
%dpIS!bE)[Mr7B[FIfAl`J,.R>5JI*lJ,JR2@c9s%?hhlaIf!LPbHHEgrrCH3@9<~>
%AI9_PrivateDataEnd
